{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tombo \ud83e\uddfd","text":"<p>Intelligent Python package management for VS Code</p> <p>Tombo revolutionizes Python dependency management by bringing rich PyPI integration directly to your editor. Get instant version completion, hover information, and smart caching - all while supporting modern Python packaging standards.</p> <ul> <li> <p> Ready in Seconds</p> <p>Install from VS Code Marketplace and start getting intelligent Python package suggestions immediately</p> <p> Getting Started</p> </li> <li> <p> Smart &amp; Fast</p> <p>First lookup online \u2192 then lightning-fast forever (even offline!) with intelligent LRU caching</p> <p> Learn about Caching</p> </li> <li> <p> Universal Support</p> <p>Works with PEP 621, Poetry v1/v2, requirements.txt - every Python packaging format</p> <p> See Examples</p> </li> <li> <p> Privacy First</p> <p>Zero telemetry, no accounts, MIT licensed. Your project data stays private</p> <p> View License</p> </li> </ul>"},{"location":"#what-makes-tombo-different","title":"What Makes Tombo Different?","text":"<p>Rich Hover Information</p> <p>Hover over <code>pytest</code> in your dependency file \u2192 see latest version (8.4.1), Python requirements (&gt;=3.9), recent versions, and direct PyPI links</p> <p>Intelligent Version Completion</p> <p>Type <code>numpy&gt;=</code> \u2192 get smart version suggestions with compatibility information</p> <p>Smart Caching</p> <p>First lookup requires internet, then works offline forever with instant responses</p> <p>Zero Hassle Setup</p> <p>Completely free, no tracking, no accounts - just better Python development</p>"},{"location":"#supported-formats","title":"Supported Formats","text":"PEP 621 (Modern)Poetry v1Requirements.txt pyproject.toml<pre><code>[project]\ndependencies = [\n    \"requests&gt;=2.28.0\",    # \u2190 Hover here for rich info\n    \"numpy&gt;=\",             # \u2190 Type here for version completion\n    \"pandas~=1.5\"          # \u2190 All constraint types supported\n]\n</code></pre> pyproject.toml<pre><code>[tool.poetry.dependencies]\npython = \"^3.9.13\"\nclick = \"~8.1\"           # \u2190 Hover and completion work here\nhttpx = \"^0.23.0\"        # \u2190 Full constraint support\n</code></pre> requirements.txt<pre><code>requests&gt;=2.28.0         # \u2190 Standard format\nnumpy==1.24.3            # \u2190 Pinned versions\npandas~=1.5.0            # \u2190 All operators supported\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":"Rich Hover Cards Hover over any package \u2192 see versions, Python compatibility, descriptions, and PyPI links \u26a1 Version Completion Type version constraints \u2192 get intelligent suggestions with compatibility info Smart Caching 90% API call reduction with LRU+TTL caching - works offline after first lookup Universal Format Support PEP 621, Poetry v1/v2, requirements.txt - covers all Python packaging standards Privacy Focused MIT licensed, no telemetry, no accounts - completely free and open source"},{"location":"#quick-demo","title":"Quick Demo","text":"<p>See Tombo in action - the perfect complement to uv/poetry for version selection:</p>    [\ud83c\udfa5 Watch Demo](https://d.pr/v/R4zkde)  <p>What you see: 1. The Problem: <code>uv add apache-airflow==3.0.5</code> fails (yanked version) 2. The Solution: Open VS Code with Tombo 3. Version Intelligence: Type <code>apache-airflow==</code> \u2192 see all available versions 4. Smart Selection: Choose 3.0.6 (working version) \u2192 then <code>uv add apache-airflow==3.0.6</code> 5. Rich Information: Hover to understand why 3.0.5 was yanked</p> <p>Perfect Workflow: Tombo helps you research and select the right version constraints \u2192 uv/poetry handles installation and lock files.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Ready to supercharge your Python development? Install Tombo in just a few clicks:</p> <p>Get Started Now  View Examples </p> <p>Format Support &amp; Usage Notes</p> <p>Format Support: PEP 621 and Poetry v1 work excellently. Poetry v2 has some limitations. Core Features: Completion dropdown and hover information work perfectly for version research. Quick Fixes: Right-click actions have some positioning issues - use dropdown selection for best results.</p> <p>\u2192 See detailed support levels and workarounds</p> <p>Expert Review</p> <p>\"This is exemplary TypeScript development. The code quality exceeds most commercial VS Code extensions. Ship it!\"</p> <p>\u2014 Senior TypeScript Engineer</p> <p>Production Ready</p> <p>Tombo has been validated by TypeScript experts and is ready for marketplace launch with A+ ratings across security, performance, and maintainability.</p>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to Tombo will be documented in this file. The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"about/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>Enhanced Poetry v2 parentheses syntax support</li> <li>Performance optimizations for large dependency files</li> <li>Extended PyPI metadata caching</li> </ul>"},{"location":"about/changelog/#changed","title":"Changed","text":"<ul> <li>Improved error handling for network timeouts</li> <li>Better compatibility with VS Code 1.85+</li> </ul>"},{"location":"about/changelog/#fixed","title":"Fixed","text":"<ul> <li>Minor memory leaks in cache implementation</li> <li>Edge cases in TOML parsing</li> </ul>"},{"location":"about/changelog/#100-2025-09-06","title":"[1.0.0] - 2025-09-06","text":""},{"location":"about/changelog/#initial-release","title":"\ud83c\udf89 Initial Release","text":"<p>The first stable release of Tombo brings intelligent Python package management to VS Code!</p>"},{"location":"about/changelog/#added_1","title":"Added","text":""},{"location":"about/changelog/#core-features","title":"Core Features","text":"<ul> <li>Rich Hover Information - Comprehensive package metadata on hover</li> <li>Package descriptions and latest versions</li> <li>Python compatibility requirements</li> <li>Release dates and version history</li> <li>Direct links to PyPI, documentation, and source code</li> <li>Intelligent Version Completion - Smart version suggestions as you type</li> <li>Real-time version completions for all constraint operators</li> <li>Compatibility indicators (\u2705 \u274c \ud83d\udea7)</li> <li>Pre-release version support with visual markers</li> <li>Yanked version detection and warnings</li> <li>Smart Caching System - 90% API call reduction with LRU+TTL caching</li> <li>First lookup online \u2192 then lightning-fast forever</li> <li>Configurable cache size and TTL</li> <li>Works offline after initial package fetch</li> <li>Memory and disk caching for persistence</li> </ul>"},{"location":"about/changelog/#format-support","title":"Format Support","text":"<ul> <li>PEP 621 (Modern Python) - Full support for <code>pyproject.toml</code> projects</li> <li><code>[project]</code> dependencies array format</li> <li>Optional dependency groups</li> <li>All PEP 440 version specifiers</li> <li>Poetry v1 &amp; v2 - Complete Poetry project support</li> <li><code>[tool.poetry.dependencies]</code> section</li> <li>Poetry-specific version constraints (<code>^</code>, <code>~</code>)</li> <li>Development dependency groups</li> <li>Poetry v2 parentheses syntax (with limitations)</li> <li>Requirements.txt - Traditional pip requirements support</li> <li>All requirements file variants (<code>requirements-dev.txt</code>, etc.)</li> <li>Comment preservation</li> <li>Multiple constraint operators</li> </ul>"},{"location":"about/changelog/#user-experience","title":"User Experience","text":"<ul> <li>Visual Indicators - Clear compatibility feedback</li> <li>Compatible versions (\u2705) - Green indicators</li> <li>Incompatible versions (\u274c) - Red indicators</li> <li>Pre-release versions (\ud83d\udea7) - Orange indicators</li> <li>Deprecated packages (\u26a0\ufe0f) - Warning indicators</li> <li>VS Code Integration - Native VS Code experience</li> <li>Status bar integration for operation feedback</li> <li>Output panel logging for debugging</li> <li>Command palette actions for cache management</li> <li>Right-click context menu actions</li> </ul>"},{"location":"about/changelog/#configuration-customization","title":"Configuration &amp; Customization","text":"<ul> <li>Flexible Configuration - Extensive customization options</li> <li>Custom PyPI index URL support</li> <li>Cache behavior tuning (size, TTL, enable/disable)</li> <li>Visual decorator customization</li> <li>Debug logging levels</li> <li>Network Features - Robust network handling</li> <li>Proxy server support for corporate environments</li> <li>SSL/TLS configuration options</li> <li>Retry logic with exponential backoff</li> <li>Rate limiting for respectful API usage</li> </ul>"},{"location":"about/changelog/#performance-security","title":"Performance &amp; Security","text":"<ul> <li>Privacy First - Zero telemetry design</li> <li>No usage tracking or data collection</li> <li>No accounts or registration required</li> <li>MIT licensed and fully open source</li> <li>Local processing with optional network access</li> <li>Security Features - Secure by design</li> <li>HTTPS-only PyPI connections</li> <li>Input validation and sanitization</li> <li>Minimal permissions principle</li> <li>Source code verification</li> </ul>"},{"location":"about/changelog/#developer-experience","title":"Developer Experience","text":"<ul> <li>Modern Architecture - Clean TypeScript codebase</li> <li>ES2021 target with modern APIs</li> <li>Unified service architecture</li> <li>Comprehensive error handling</li> <li>Extensive type definitions</li> <li>Extensible Design - Built for growth</li> <li>Plugin-ready provider pattern</li> <li>Well-documented API surface</li> <li>Clean separation of concerns</li> <li>Community contribution friendly</li> </ul>"},{"location":"about/changelog/#technical-details","title":"Technical Details","text":""},{"location":"about/changelog/#architecture-highlights","title":"Architecture Highlights","text":"<ul> <li>Unified PyPI Service - Single source of truth for all package data</li> <li>Intelligent Provider System - Context-aware hover and completion providers</li> <li>Advanced Caching - LRU cache with TTL for optimal performance</li> <li>Robust Error Handling - Structured error types with graceful degradation</li> <li>Modern TypeScript - ES2021 features with strict type checking</li> </ul>"},{"location":"about/changelog/#performance-metrics","title":"Performance Metrics","text":"<ul> <li>Extension Size - ~250KB VSIX package</li> <li>Startup Time - &lt;100ms additional activation overhead</li> <li>Hover Response - ~5-10ms for cached packages, ~200-500ms for first lookup</li> <li>Memory Usage - ~10-20MB for typical usage patterns</li> <li>Cache Hit Rate - ~95% in normal development workflows</li> </ul>"},{"location":"about/changelog/#compatibility","title":"Compatibility","text":"<ul> <li>VS Code - Requires 1.74.0 or later</li> <li>Node.js - Built with Node.js 20 LTS</li> <li>Python - Supports Python 3.7+ package analysis</li> <li>Operating Systems - Windows 10+, macOS 10.15+, Linux (Ubuntu 18.04+)</li> </ul>"},{"location":"about/changelog/#expert-validation","title":"Expert Validation","text":"<p>This release has been validated by senior TypeScript engineers with A+ ratings across: - Security - No vulnerabilities, secure network handling - Performance - Optimal caching, minimal resource usage - Reliability - Robust error handling, graceful degradation - Maintainability - Clean architecture, comprehensive documentation - Code Quality - \"Exceeds most commercial VS Code extensions\"</p>"},{"location":"about/changelog/#known-issues","title":"Known Issues","text":""},{"location":"about/changelog/#poetry-v2-limitations","title":"Poetry v2 Limitations","text":"<ul> <li>Parentheses syntax - <code>\"pandas (&gt;=2.0,&lt;3.0)\"</code> requires manual typing of parentheses</li> <li>Workaround - Completion triggers on operators (<code>=</code>, <code>&gt;</code>, <code>&lt;</code>) but parentheses need manual input</li> <li>Tracking - Issue #1</li> </ul>"},{"location":"about/changelog/#network-dependencies","title":"Network Dependencies","text":"<ul> <li>First lookup requirement - Initial package information requires internet connection</li> <li>Offline capability - Full functionality after first online lookup per package</li> <li>Corporate networks - May require proxy configuration for PyPI access</li> </ul>"},{"location":"about/changelog/#migration-notes","title":"Migration Notes","text":""},{"location":"about/changelog/#from-manual-pypi-workflow","title":"From Manual PyPI Workflow","text":"<ul> <li>Before - Manual PyPI website visits, copy-paste version numbers</li> <li>After - In-editor hover and completion with rich metadata</li> <li>Time savings - ~70% reduction in package research time</li> </ul>"},{"location":"about/changelog/#extension-compatibility","title":"Extension Compatibility","text":"<ul> <li>Conflicts - No known conflicts with other Python or package management extensions</li> <li>Complementary - Works alongside Python extension, Pylance, and other tools</li> <li>Resource usage - Minimal impact on VS Code performance</li> </ul>"},{"location":"about/changelog/#installation","title":"Installation","text":"<p>Available now on the VS Code Marketplace:</p> <ol> <li>Via VS Code UI - Search for \"Tombo\" in Extensions panel</li> <li>Via Command Line - <code>code --install-extension tombo.tombo</code></li> <li>Via VSIX - Download from GitHub releases</li> </ol>"},{"location":"about/changelog/#community","title":"Community","text":"<p>Join the Tombo community: - GitHub - Report issues and contribute - Discussions - Ask questions and share ideas - Marketplace - Rate and review</p>"},{"location":"about/changelog/#future-roadmap","title":"Future Roadmap","text":""},{"location":"about/changelog/#v110-planned","title":"v1.1.0 (Planned)","text":"<ul> <li>Enhanced Poetry v2 parentheses syntax support</li> <li>Package vulnerability scanning integration</li> <li>Dependency tree visualization</li> <li>Bulk package update tools</li> </ul>"},{"location":"about/changelog/#v120-planned","title":"v1.2.0 (Planned)","text":"<ul> <li>Pipenv <code>Pipfile</code> full support</li> <li>Conda environment integration</li> <li>Package license information in hover</li> <li>Automated dependency updates</li> </ul>"},{"location":"about/changelog/#v200-future","title":"v2.0.0 (Future)","text":"<ul> <li>AI-powered package recommendations</li> <li>Dependency conflict resolution</li> <li>Package usage analytics (privacy-preserving)</li> <li>Team collaboration features</li> </ul>"},{"location":"about/changelog/#support","title":"Support","text":"<p>Need help or found an issue?</p> <ul> <li>Documentation - https://tombo.dev</li> <li>Issues - GitHub Issues</li> <li>Discussions - GitHub Discussions</li> <li>Email - support@tombo.dev</li> </ul>"},{"location":"about/changelog/#contributors","title":"Contributors","text":"<p>Special thanks to all contributors who made this release possible:</p> <ul> <li>Core Development - benbenbang</li> <li>TypeScript Architecture Review - Senior TypeScript Engineer (Expert Validation)</li> <li>Testing &amp; QA - Community beta testers</li> <li>Documentation - Technical writing contributors</li> </ul> <p>Want to contribute? See our Contributing Guide!</p> <p>Keep a Changelog format maintained. All dates in YYYY-MM-DD format.</p>"},{"location":"about/license/","title":"License","text":"<p>Tombo is released under the MIT License, which means you can use, modify, and distribute it freely.</p>"},{"location":"about/license/#mit-license","title":"MIT License","text":"<pre><code>Copyright (c) 2025 Tombo benbenbang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"about/license/#what-this-means","title":"What This Means","text":""},{"location":"about/license/#you-can","title":"\u2705 You Can","text":"<ul> <li>Use Tombo for personal and commercial projects</li> <li>Modify the source code to fit your needs</li> <li>Distribute copies of Tombo</li> <li>Sublicense and sell copies</li> <li>Create derivative works based on Tombo</li> </ul>"},{"location":"about/license/#you-must","title":"\u26a0\ufe0f You Must","text":"<ul> <li>Include the license notice in any copies or substantial portions</li> <li>Include the copyright notice in any copies or substantial portions</li> </ul>"},{"location":"about/license/#we-cannot","title":"\u274c We Cannot","text":"<ul> <li>Provide warranty - The software is provided \"as is\"</li> <li>Be held liable for any damages arising from use</li> <li>Guarantee support - Community support is best-effort</li> </ul>"},{"location":"about/license/#third-party-dependencies","title":"Third-Party Dependencies","text":"<p>Tombo uses several third-party libraries, each with their own licenses:</p>"},{"location":"about/license/#runtime-dependencies","title":"Runtime Dependencies","text":"Package License Purpose <code>axios</code> MIT HTTP client for PyPI API requests <code>vscode</code> MIT VS Code extension API types"},{"location":"about/license/#development-dependencies","title":"Development Dependencies","text":"Package License Purpose <code>typescript</code> Apache-2.0 TypeScript compiler <code>eslint</code> MIT Code linting <code>webpack</code> MIT Module bundling <code>@types/node</code> MIT Node.js type definitions <p>All dependencies are compatible with the MIT License.</p>"},{"location":"about/license/#attribution","title":"Attribution","text":"<p>When using or distributing Tombo, please consider:</p>"},{"location":"about/license/#optional-attribution","title":"Optional Attribution","text":"<p>While not required by the MIT License, we appreciate attribution:</p> <ul> <li>Link back to the Tombo GitHub repository</li> <li>Mention Tombo in your project's documentation or credits</li> <li>Star the repository to show support</li> </ul>"},{"location":"about/license/#community-recognition","title":"Community Recognition","text":"<p>If you create content about Tombo: - Blog posts - Tag us @tombo_vscode - Videos - Link to our GitHub repository - Talks - We'd love to hear about your presentations!</p>"},{"location":"about/license/#commercial-use","title":"Commercial Use","text":""},{"location":"about/license/#enterprise-usage","title":"Enterprise Usage","text":"<p>Tombo is completely free for commercial use:</p> <ul> <li>\u2705 No licensing fees - Use in any commercial project</li> <li>\u2705 No user limits - Deploy to unlimited developers</li> <li>\u2705 No redistribution restrictions - Include in commercial packages</li> <li>\u2705 No attribution requirements - Though we appreciate it!</li> </ul>"},{"location":"about/license/#corporate-environments","title":"Corporate Environments","text":"<p>Perfect for enterprise development:</p> <ul> <li>Internal PyPI servers - Configure custom package indexes</li> <li>Proxy support - Works with corporate firewalls</li> <li>No data collection - Respects corporate privacy policies</li> <li>Open source - Auditable source code for security compliance</li> </ul>"},{"location":"about/license/#open-source-philosophy","title":"Open Source Philosophy","text":""},{"location":"about/license/#why-mit-license","title":"Why MIT License?","text":"<p>We chose the MIT License because:</p> <ul> <li>Maximum freedom - Minimal restrictions on usage</li> <li>Commercial friendly - No barriers to business adoption</li> <li>Community growth - Encourages contributions and forks</li> <li>Industry standard - Widely understood and accepted</li> </ul>"},{"location":"about/license/#privacy-and-telemetry","title":"Privacy and Telemetry","text":"<p>Tombo's MIT License aligns with our privacy-first approach:</p> <ul> <li>Zero telemetry - No usage data collection</li> <li>No tracking - Your project information stays private</li> <li>No accounts - No registration or cloud services required</li> <li>Local processing - Data stays on your machine</li> </ul>"},{"location":"about/license/#contributing","title":"Contributing","text":""},{"location":"about/license/#contributor-license","title":"Contributor License","text":"<p>By contributing to Tombo, you agree to:</p> <ul> <li>License your contributions under the same MIT License</li> <li>Grant usage rights to your contributed code</li> <li>Ensure you have rights to contribute the code</li> <li>Follow our Code of Conduct</li> </ul>"},{"location":"about/license/#intellectual-property","title":"Intellectual Property","text":"<ul> <li>Your contributions remain yours - You retain copyright</li> <li>MIT License applies - Your contributions are MIT licensed</li> <li>Attribution preserved - Contributors are recognized in the project</li> <li>No exclusive rights - You can use your contributions elsewhere</li> </ul>"},{"location":"about/license/#legal-information","title":"Legal Information","text":""},{"location":"about/license/#disclaimer","title":"Disclaimer","text":"<p>This software is provided for informational purposes only and should not be considered legal advice. For specific legal questions about licensing:</p> <ul> <li>Consult a lawyer - For complex licensing scenarios</li> <li>Review carefully - Understand the full license text</li> <li>Check dependencies - Verify third-party license compatibility</li> <li>Stay updated - License terms may change in future versions</li> </ul>"},{"location":"about/license/#jurisdiction","title":"Jurisdiction","text":"<p>This license is governed by the laws of the jurisdiction where the software is used. The MIT License is internationally recognized and enforceable.</p>"},{"location":"about/license/#contact","title":"Contact","text":"<p>For license-related questions: - GitHub Issues - Report licensing concerns - Email - legal@tombo.dev - Community - Discuss in GitHub Discussions</p>"},{"location":"about/license/#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"about/license/#can-i-use-tombo-in-my-commercial-product","title":"Can I use Tombo in my commercial product?","text":"<p>Yes! The MIT License explicitly allows commercial use without restrictions.</p>"},{"location":"about/license/#do-i-need-to-open-source-my-modifications","title":"Do I need to open source my modifications?","text":"<p>No. Unlike copyleft licenses (GPL), MIT allows proprietary modifications.</p>"},{"location":"about/license/#can-i-redistribute-tombo","title":"Can I redistribute Tombo?","text":"<p>Yes. You can redistribute original or modified versions, as long as you include the license notice.</p>"},{"location":"about/license/#what-about-patent-rights","title":"What about patent rights?","text":"<p>The MIT License doesn't explicitly grant patent rights, but it's generally considered safe for most use cases.</p>"},{"location":"about/license/#can-the-license-be-revoked","title":"Can the license be revoked?","text":"<p>No. Once you have a copy under the MIT License, those rights cannot be revoked.</p>"},{"location":"about/license/#what-if-i-find-a-security-vulnerability","title":"What if I find a security vulnerability?","text":"<p>Please report security issues responsibly through our security policy.</p>"},{"location":"about/license/#full-license-text","title":"Full License Text","text":"<p>The complete MIT License text is available in the LICENSE file in the Tombo repository.</p> <p>Questions About Licensing?</p> <p>If you have questions about using Tombo in your project, feel free to ask in our discussions or file an issue.</p> <p>Remember: The MIT License gives you maximum freedom to use Tombo however you need. We're here to support the Python development community! \ud83d\udc0d\u2728</p>"},{"location":"development/api-reference/","title":"API Reference","text":"<p>Complete reference for Tombo's internal APIs, interfaces, and extension points. This documentation is essential for contributors and developers who want to understand or extend Tombo's functionality.</p>"},{"location":"development/api-reference/#core-services","title":"Core Services","text":""},{"location":"development/api-reference/#pypiservice","title":"PyPIService","text":"<p>Location: <code>src/api/services/pypi-service.ts</code></p> <p>The unified service for all PyPI interactions, providing caching, error handling, and data transformation.</p>"},{"location":"development/api-reference/#interface","title":"Interface","text":"<pre><code>interface PyPIService {\n    getPackageVersions(packageName: string, options?: VersionOptions): Promise&lt;PackageVersions&gt;;\n    getPackageMetadata(packageName: string): Promise&lt;PackageMetadata&gt;;\n    searchPackages(query: string, options?: SearchOptions): Promise&lt;SearchResult[]&gt;;\n    clearCache(): void;\n    getCacheStatistics(): CacheStatistics;\n}\n</code></pre>"},{"location":"development/api-reference/#methods","title":"Methods","text":"<p>getPackageVersions(packageName, options?)</p> <p>Retrieves available versions for a package with intelligent filtering.</p> <pre><code>async getPackageVersions(\n    packageName: string,\n    options: VersionOptions = {}\n): Promise&lt;PackageVersions&gt;\n\n// Options interface\ninterface VersionOptions {\n    includePreReleases?: boolean;\n    pythonVersion?: string;\n    maxResults?: number;\n}\n\n// Return type\ninterface PackageVersions {\n    packageName: string;\n    versions: VersionInfo[];\n    latest: string;\n    latestPreRelease?: string;\n}\n\ninterface VersionInfo {\n    version: string;\n    releaseDate: Date;\n    isPreRelease: boolean;\n    isYanked: boolean;\n    pythonRequires?: string;\n}\n</code></pre> <p>Usage Example: <pre><code>const pypiService = new PyPIService(config);\n\n// Get stable versions only\nconst stableVersions = await pypiService.getPackageVersions('requests');\n\n// Include pre-releases\nconst allVersions = await pypiService.getPackageVersions('numpy', {\n    includePreReleases: true,\n    maxResults: 50\n});\n</code></pre></p> <p>getPackageMetadata(packageName)</p> <p>Retrieves comprehensive metadata for a package.</p> <pre><code>async getPackageMetadata(packageName: string): Promise&lt;PackageMetadata&gt;\n\n// Return type\ninterface PackageMetadata {\n    name: string;\n    version: string;\n    summary: string;\n    description?: string;\n    author?: string;\n    maintainer?: string;\n    license?: string;\n    homePage?: string;\n    documentationUrl?: string;\n    repositoryUrl?: string;\n    keywords: string[];\n    classifiers: string[];\n    requires?: string[];\n    requiresDistribution?: string[];\n    requiresPython?: string;\n    projectUrls: Record&lt;string, string&gt;;\n}\n</code></pre> <p>Usage Example: <pre><code>const metadata = await pypiService.getPackageMetadata('fastapi');\nconsole.log(`${metadata.name}: ${metadata.summary}`);\nconsole.log(`Documentation: ${metadata.documentationUrl}`);\n</code></pre></p>"},{"location":"development/api-reference/#configurationmanager","title":"ConfigurationManager","text":"<p>Location: <code>src/core/configuration/configuration-manager.ts</code></p> <p>Manages VS Code settings with hot reloading and validation.</p>"},{"location":"development/api-reference/#interface_1","title":"Interface","text":"<pre><code>interface ConfigurationManager {\n    // PyPI settings\n    readonly pypiIndexUrl: string;\n    readonly listPreReleases: boolean;\n    readonly requestTimeout: number;\n\n    // Cache settings\n    readonly cacheTimeoutMinutes: number;\n    readonly maxCacheSize: number;\n    readonly retryAttempts: number;\n\n    // UI settings\n    readonly compatibleDecorator: string;\n    readonly incompatibleDecorator: string;\n    readonly showNotifications: NotificationLevel;\n    readonly enableDebugLogging: boolean;\n\n    // Events\n    onConfigurationChanged: Event&lt;ConfigurationChangeEvent&gt;;\n}\n</code></pre>"},{"location":"development/api-reference/#settings-reference","title":"Settings Reference","text":"<p>PyPI Configuration: <pre><code>{\n    \"tombo.pypiIndexUrl\": \"https://pypi.org/pypi/\",\n    \"tombo.listPreReleases\": false,\n    \"tombo.requestTimeout\": 10000\n}\n</code></pre></p> <p>Cache Configuration: <pre><code>{\n    \"tombo.cacheTimeoutMinutes\": 10,\n    \"tombo.maxCacheSize\": 1000,\n    \"tombo.retryAttempts\": 3\n}\n</code></pre></p> <p>UI Configuration: <pre><code>{\n    \"tombo.compatibleDecorator\": \" \u2713\",\n    \"tombo.incompatibleDecorator\": \" \u26a0\",\n    \"tombo.showNotifications\": \"onError\",\n    \"tombo.enableDebugLogging\": false\n}\n</code></pre></p> <p>Usage Example: <pre><code>const config = new ConfigurationManager();\n\n// Access settings\nconst timeout = config.requestTimeout;\nconst cacheSize = config.maxCacheSize;\n\n// Listen for changes\nconfig.onConfigurationChanged.event((event) =&gt; {\n    if (event.affectsConfiguration('tombo.cacheTimeoutMinutes')) {\n        // Reconfigure cache with new timeout\n        cache.updateTTL(config.cacheTimeoutMinutes * 60 * 1000);\n    }\n});\n</code></pre></p>"},{"location":"development/api-reference/#smartcache","title":"SmartCache","text":"<p>Location: <code>src/core/cache/smart-cache.ts</code></p> <p>LRU + TTL caching implementation with automatic cleanup and statistics.</p>"},{"location":"development/api-reference/#interface_2","title":"Interface","text":"<pre><code>interface SmartCache&lt;T&gt; {\n    get(key: string): T | null;\n    set(key: string, data: T, ttl?: number): void;\n    has(key: string): boolean;\n    delete(key: string): boolean;\n    clear(): void;\n    size: number;\n    isStale(key: string): boolean;\n    getStatistics(): CacheStatistics;\n}\n</code></pre>"},{"location":"development/api-reference/#types","title":"Types","text":"<pre><code>interface CacheOptions {\n    maxSize: number;\n    ttl: number; // milliseconds\n    cleanupInterval?: number; // milliseconds\n}\n\ninterface CacheStatistics {\n    size: number;\n    hitCount: number;\n    missCount: number;\n    hitRate: number;\n    evictionCount: number;\n    oldestEntry?: Date;\n    newestEntry?: Date;\n}\n\ninterface CacheEntry&lt;T&gt; {\n    data: T;\n    timestamp: number;\n    accessCount: number;\n    lastAccess: number;\n}\n</code></pre> <p>Usage Example: <pre><code>const cache = new SmartCache&lt;PackageData&gt;({\n    maxSize: 1000,\n    ttl: 10 * 60 * 1000, // 10 minutes\n    cleanupInterval: 5 * 60 * 1000 // 5 minutes\n});\n\n// Basic operations\ncache.set('requests', packageData);\nconst data = cache.get('requests');\n\n// Check staleness\nif (cache.isStale('requests')) {\n    // Refresh data\n}\n\n// Statistics\nconst stats = cache.getStatistics();\nconsole.log(`Hit rate: ${stats.hitRate.toFixed(2)}%`);\n</code></pre></p>"},{"location":"development/api-reference/#provider-apis","title":"Provider APIs","text":""},{"location":"development/api-reference/#versioncompletionprovider","title":"VersionCompletionProvider","text":"<p>Location: <code>src/providers/version-completion-provider.ts</code></p> <p>Implements VS Code's <code>CompletionItemProvider</code> for intelligent version suggestions.</p>"},{"location":"development/api-reference/#interface_3","title":"Interface","text":"<pre><code>class VersionCompletionProvider implements vscode.CompletionItemProvider {\n    provideCompletionItems(\n        document: vscode.TextDocument,\n        position: vscode.Position,\n        token: vscode.CancellationToken,\n        context: vscode.CompletionContext\n    ): Promise&lt;vscode.CompletionItem[]&gt;;\n}\n</code></pre>"},{"location":"development/api-reference/#completion-item-structure","title":"Completion Item Structure","text":"<pre><code>interface TomboCompletionItem extends vscode.CompletionItem {\n    label: string;              // Version number (e.g., \"2.28.0\")\n    kind: vscode.CompletionItemKind.Value;\n    detail: string;             // Package info (e.g., \"requests \u2022 Released: 2023-01-12\")\n    documentation?: vscode.MarkdownString;  // Rich documentation\n    insertText: string;         // Text to insert\n    filterText: string;         // Text for filtering\n    sortText: string;           // Custom sorting (latest first)\n    command?: vscode.Command;   // Post-completion command\n}\n</code></pre> <p>Trigger Characters: - <code>=</code> (equality operators) - <code>&gt;</code> and <code>&lt;</code> (comparison operators) - <code>~</code> (compatible release) - <code>!</code> (not equal) - <code>^</code> (Poetry caret)</p> <p>Context Detection: <pre><code>interface CompletionContext {\n    packageName: string;\n    constraintType: ConstraintType;\n    existingVersion?: string;\n    documentType: 'pep621' | 'poetry' | 'requirements';\n    shouldTriggerCompletion: boolean;\n}\n\nenum ConstraintType {\n    GreaterEqual = '&gt;=',\n    Equal = '==',\n    CompatibleRelease = '~=',\n    NotEqual = '!=',\n    Greater = '&gt;',\n    Less = '&lt;',\n    Caret = '^',     // Poetry\n    Tilde = '~'      // Poetry\n}\n</code></pre></p>"},{"location":"development/api-reference/#hoverprovider","title":"HoverProvider","text":"<p>Location: <code>src/providers/hover-provider.ts</code></p> <p>Implements VS Code's <code>HoverProvider</code> for rich package information.</p>"},{"location":"development/api-reference/#interface_4","title":"Interface","text":"<pre><code>class HoverProvider implements vscode.HoverProvider {\n    provideHover(\n        document: vscode.TextDocument,\n        position: vscode.Position,\n        token: vscode.CancellationToken\n    ): Promise&lt;vscode.Hover | null&gt;;\n}\n</code></pre>"},{"location":"development/api-reference/#hover-content-structure","title":"Hover Content Structure","text":"<pre><code>interface HoverContent {\n    packageName: string;\n    currentVersion?: string;\n    latestVersion: string;\n    summary: string;\n    compatibility: CompatibilityInfo;\n    links: PackageLinks;\n    versionHistory: VersionInfo[];\n}\n\ninterface CompatibilityInfo {\n    pythonRequires?: string;\n    isCompatible: boolean;\n    compatibilityMessage?: string;\n}\n\ninterface PackageLinks {\n    pypi: string;\n    documentation?: string;\n    repository?: string;\n    changelog?: string;\n}\n</code></pre> <p>Hover Markdown Generation: <pre><code>private createHoverMarkdown(content: HoverContent): vscode.MarkdownString {\n    const markdown = new vscode.MarkdownString();\n    markdown.isTrusted = true;\n\n    // Package header\n    markdown.appendMarkdown(`## \ud83d\udce6 ${content.packageName}\\n`);\n    markdown.appendMarkdown(`${content.summary}\\n\\n`);\n\n    // Version information\n    if (content.currentVersion) {\n        markdown.appendMarkdown(`**Current:** ${content.currentVersion} \u2192 **Latest:** ${content.latestVersion}\\n`);\n    }\n\n    // Compatibility\n    const compatIcon = content.compatibility.isCompatible ? '\u2705' : '\u274c';\n    markdown.appendMarkdown(`${compatIcon} **Python:** ${content.compatibility.pythonRequires}\\n\\n`);\n\n    // Links\n    markdown.appendMarkdown(`\ud83d\udd17 [PyPI](${content.links.pypi})`);\n    if (content.links.documentation) {\n        markdown.appendMarkdown(` | [Documentation](${content.links.documentation})`);\n    }\n\n    return markdown;\n}\n</code></pre></p>"},{"location":"development/api-reference/#quickactionprovider","title":"QuickActionProvider","text":"<p>Location: <code>src/providers/quick-action-provider.ts</code></p> <p>Provides code actions and quick fixes for dependency management.</p>"},{"location":"development/api-reference/#interface_5","title":"Interface","text":"<pre><code>class QuickActionProvider implements vscode.CodeActionProvider {\n    provideCodeActions(\n        document: vscode.TextDocument,\n        range: vscode.Range,\n        context: vscode.CodeActionContext,\n        token: vscode.CancellationToken\n    ): Promise&lt;vscode.CodeAction[]&gt;;\n}\n</code></pre>"},{"location":"development/api-reference/#available-actions","title":"Available Actions","text":"<pre><code>enum QuickActionType {\n    UpdateToLatest = 'tombo.updateToLatest',\n    PinExactVersion = 'tombo.pinExactVersion',\n    ChangeConstraintType = 'tombo.changeConstraintType',\n    AddVersionConstraint = 'tombo.addVersionConstraint',\n    RemoveVersionConstraint = 'tombo.removeVersionConstraint'\n}\n\ninterface QuickActionContext {\n    packageName: string;\n    currentConstraint?: string;\n    documentType: DocumentType;\n    availableActions: QuickActionType[];\n}\n</code></pre> <p>Action Examples: <pre><code>// Update to latest version\nconst updateAction = new vscode.CodeAction(\n    'Update to latest version',\n    vscode.CodeActionKind.QuickFix\n);\nupdateAction.command = {\n    command: 'tombo.updateToLatest',\n    title: 'Update to latest',\n    arguments: [document.uri, range, packageName]\n};\n\n// Pin exact version\nconst pinAction = new vscode.CodeAction(\n    'Pin to exact version',\n    vscode.CodeActionKind.Refactor\n);\n</code></pre></p>"},{"location":"development/api-reference/#parser-apis","title":"Parser APIs","text":""},{"location":"development/api-reference/#documentparser","title":"DocumentParser","text":"<p>Location: <code>src/parsers/document-parser.ts</code></p> <p>Abstract base class for document format parsers.</p>"},{"location":"development/api-reference/#interface_6","title":"Interface","text":"<pre><code>abstract class DocumentParser {\n    abstract canParse(document: vscode.TextDocument): boolean;\n    abstract parsePackageAtPosition(\n        document: vscode.TextDocument,\n        position: vscode.Position\n    ): PackageInfo | null;\n    abstract getAllPackages(document: vscode.TextDocument): PackageInfo[];\n}\n\ninterface PackageInfo {\n    name: string;\n    constraint?: string;\n    line: number;\n    startCharacter: number;\n    endCharacter: number;\n    extras?: string[];\n}\n</code></pre>"},{"location":"development/api-reference/#tomlparser","title":"TOMLParser","text":"<p>Location: <code>src/parsers/toml-parser.ts</code></p> <p>Handles PEP 621 and Poetry format parsing.</p>"},{"location":"development/api-reference/#features","title":"Features","text":"<p>PEP 621 Support: <pre><code>[project]\ndependencies = [\n    \"requests&gt;=2.28.0\",        # \u2190 Parsed correctly\n    \"numpy~=1.24.0\",           # \u2190 Compatible release\n    \"django&gt;=4.0,&lt;5.0\"         # \u2190 Range constraints\n]\n\n[project.optional-dependencies]\ndev = [\"pytest&gt;=7.0\"]         # \u2190 Optional dependency groups\n</code></pre></p> <p>Poetry v1 Support: <pre><code>[tool.poetry.dependencies]\npython = \"^3.9\"               # \u2190 Python version constraint\nrequests = \"^2.28.0\"          # \u2190 Caret constraint\nclick = \"~8.1.0\"              # \u2190 Tilde constraint\n</code></pre></p> <p>Poetry v2 Support: <pre><code>[tool.poetry.dependencies]\npandas = \"(&gt;=2.0,&lt;3.0)\"       # \u2190 Parentheses format\nscipy = \"(&gt;=1.10,!=1.11.0)\"   # \u2190 Exclusion support\n</code></pre></p>"},{"location":"development/api-reference/#parser-methods","title":"Parser Methods","text":"<pre><code>class TOMLParser extends DocumentParser {\n    canParse(document: vscode.TextDocument): boolean {\n        return document.fileName.endsWith('pyproject.toml');\n    }\n\n    parsePackageAtPosition(\n        document: vscode.TextDocument,\n        position: vscode.Position\n    ): PackageInfo | null {\n        const line = document.lineAt(position);\n\n        // Detect context\n        if (this.isPEP621Context(document, position)) {\n            return this.parsePEP621Package(line.text, position.character);\n        }\n\n        if (this.isPoetryContext(document, position)) {\n            return this.parsePoetryPackage(line.text, position.character);\n        }\n\n        return null;\n    }\n}\n</code></pre>"},{"location":"development/api-reference/#requirementsparser","title":"RequirementsParser","text":"<p>Location: <code>src/parsers/requirements-parser.ts</code></p> <p>Handles requirements.txt and pip requirements format.</p>"},{"location":"development/api-reference/#supported-formats","title":"Supported Formats","text":"<pre><code># Basic requirements\nrequests\nnumpy&gt;=1.24.0\n\n# Complex constraints\ndjango&gt;=4.0,&lt;5.0,!=4.1.0\nfastapi[all]&gt;=0.100.0\n\n# Environment markers\ndataclasses&gt;=0.8; python_version &lt; \"3.7\"\nuvloop&gt;=0.17.0; sys_platform != \"win32\"\n\n# VCS requirements\ngit+https://github.com/user/repo.git\n-e git+https://github.com/user/repo.git#egg=package\n\n# File references\n-r requirements-base.txt\n-c constraints.txt\n</code></pre>"},{"location":"development/api-reference/#error-handling","title":"Error Handling","text":""},{"location":"development/api-reference/#error-types","title":"Error Types","text":"<p>Location: <code>src/core/errors/</code></p> <pre><code>// Base error class\nabstract class TomboError extends Error {\n    abstract readonly code: string;\n    abstract readonly category: ErrorCategory;\n    readonly timestamp: Date;\n\n    constructor(message: string, public readonly cause?: Error) {\n        super(message);\n        this.name = this.constructor.name;\n        this.timestamp = new Date();\n    }\n}\n\nenum ErrorCategory {\n    Network = 'network',\n    Parsing = 'parsing',\n    Cache = 'cache',\n    Configuration = 'configuration',\n    Internal = 'internal'\n}\n</code></pre> <p>Specific Error Types:</p> <pre><code>// Network errors\nclass PackageNotFoundError extends TomboError {\n    readonly code = 'PACKAGE_NOT_FOUND';\n    readonly category = ErrorCategory.Network;\n}\n\nclass NetworkTimeoutError extends TomboError {\n    readonly code = 'NETWORK_TIMEOUT';\n    readonly category = ErrorCategory.Network;\n}\n\n// Parsing errors\nclass InvalidPackageSpecError extends TomboError {\n    readonly code = 'INVALID_PACKAGE_SPEC';\n    readonly category = ErrorCategory.Parsing;\n}\n\n// Cache errors\nclass CacheCorruptionError extends TomboError {\n    readonly code = 'CACHE_CORRUPTION';\n    readonly category = ErrorCategory.Cache;\n}\n</code></pre>"},{"location":"development/api-reference/#error-recovery","title":"Error Recovery","text":"<pre><code>interface ErrorRecoveryStrategy {\n    canRecover(error: TomboError): boolean;\n    recover(error: TomboError, context: any): Promise&lt;any&gt;;\n}\n\nclass NetworkErrorRecovery implements ErrorRecoveryStrategy {\n    canRecover(error: TomboError): boolean {\n        return error.category === ErrorCategory.Network;\n    }\n\n    async recover(error: TomboError, context: { packageName: string }): Promise&lt;any&gt; {\n        // Try cache fallback\n        if (error instanceof NetworkTimeoutError) {\n            const cached = cache.get(context.packageName);\n            if (cached) {\n                return cached;\n            }\n        }\n\n        // Try alternative index\n        if (error instanceof PackageNotFoundError) {\n            return this.tryAlternativeIndex(context.packageName);\n        }\n\n        throw error;\n    }\n}\n</code></pre>"},{"location":"development/api-reference/#extension-points","title":"Extension Points","text":""},{"location":"development/api-reference/#custom-parsers","title":"Custom Parsers","text":"<p>To add support for new file formats:</p> <pre><code>// 1. Extend DocumentParser\nclass CustomFormatParser extends DocumentParser {\n    canParse(document: vscode.TextDocument): boolean {\n        return document.fileName.endsWith('.custom');\n    }\n\n    parsePackageAtPosition(document: vscode.TextDocument, position: vscode.Position): PackageInfo | null {\n        // Implementation specific to your format\n        return null;\n    }\n}\n\n// 2. Register in extension activation\nexport function activate(context: vscode.ExtensionContext) {\n    const customParser = new CustomFormatParser();\n    const completionProvider = new VersionCompletionProvider(pypiService, [customParser]);\n\n    context.subscriptions.push(\n        vscode.languages.registerCompletionItemProvider(\n            { scheme: 'file', pattern: '**/*.custom' },\n            completionProvider,\n            '=', '&gt;', '&lt;'\n        )\n    );\n}\n</code></pre>"},{"location":"development/api-reference/#custom-commands","title":"Custom Commands","text":"<pre><code>// Register custom commands\nfunction registerCommands(context: vscode.ExtensionContext, pypiService: PyPIService) {\n    const commands = [\n        vscode.commands.registerCommand('tombo.clearCache', () =&gt; {\n            pypiService.clearCache();\n            vscode.window.showInformationMessage('Cache cleared successfully');\n        }),\n\n        vscode.commands.registerCommand('tombo.showCacheStats', async () =&gt; {\n            const stats = pypiService.getCacheStatistics();\n            const message = `Cache: ${stats.size} packages, ${stats.hitRate.toFixed(1)}% hit rate`;\n            vscode.window.showInformationMessage(message);\n        })\n    ];\n\n    context.subscriptions.push(...commands);\n}\n</code></pre>"},{"location":"development/api-reference/#event-hooks","title":"Event Hooks","text":"<pre><code>interface TomboEvents {\n    onPackageLookup: Event&lt;PackageLookupEvent&gt;;\n    onCacheHit: Event&lt;CacheEvent&gt;;\n    onCacheMiss: Event&lt;CacheEvent&gt;;\n    onError: Event&lt;ErrorEvent&gt;;\n}\n\ninterface PackageLookupEvent {\n    packageName: string;\n    source: 'cache' | 'network';\n    duration: number;\n}\n\n// Usage\nconst tombo = getTomboInstance();\ntombo.events.onPackageLookup.event((event) =&gt; {\n    console.log(`Looked up ${event.packageName} from ${event.source} in ${event.duration}ms`);\n});\n</code></pre>"},{"location":"development/api-reference/#testing-apis","title":"Testing APIs","text":""},{"location":"development/api-reference/#test-utilities","title":"Test Utilities","text":"<p>Location: <code>src/test/test-utils.ts</code></p> <pre><code>// Mock VS Code document\nexport function createMockDocument(content: string, fileName: string = 'test.toml'): vscode.TextDocument {\n    return {\n        uri: vscode.Uri.file(fileName),\n        fileName,\n        languageId: 'toml',\n        version: 1,\n        isDirty: false,\n        isClosed: false,\n        getText: (range?: vscode.Range) =&gt; range ? content.slice(0, 100) : content,\n        lineAt: (line: number) =&gt; ({\n            lineNumber: line,\n            text: content.split('\\n')[line] || '',\n            range: new vscode.Range(line, 0, line, 100),\n            rangeIncludingLineBreak: new vscode.Range(line, 0, line + 1, 0),\n            firstNonWhitespaceCharacterIndex: 0,\n            isEmptyOrWhitespace: false\n        }),\n        // ... other TextDocument methods\n    } as vscode.TextDocument;\n}\n\n// Mock PyPI service\nexport function createMockPyPIService(): jest.Mocked&lt;PyPIService&gt; {\n    return {\n        getPackageVersions: jest.fn(),\n        getPackageMetadata: jest.fn(),\n        clearCache: jest.fn(),\n        getCacheStatistics: jest.fn()\n    };\n}\n\n// Test data factories\nexport function createMockPackageVersions(packageName: string): PackageVersions {\n    return {\n        packageName,\n        versions: [\n            { version: '2.28.0', releaseDate: new Date('2023-01-01'), isPreRelease: false, isYanked: false },\n            { version: '2.27.1', releaseDate: new Date('2022-12-01'), isPreRelease: false, isYanked: false }\n        ],\n        latest: '2.28.0'\n    };\n}\n</code></pre>"},{"location":"development/api-reference/#test-configuration","title":"Test Configuration","text":"<pre><code>// Test-specific configuration\nexport const TEST_CONFIG: ConfigurationManager = {\n    pypiIndexUrl: 'https://test-pypi.org/',\n    listPreReleases: false,\n    requestTimeout: 5000,\n    cacheTimeoutMinutes: 1,\n    maxCacheSize: 100,\n    retryAttempts: 1,\n    enableDebugLogging: true\n};\n</code></pre>"},{"location":"development/api-reference/#type-definitions","title":"Type Definitions","text":""},{"location":"development/api-reference/#core-types","title":"Core Types","text":"<pre><code>// Package information\ninterface PackageData {\n    name: string;\n    versions: PackageVersions;\n    metadata: PackageMetadata;\n    fetchedAt: number;\n}\n\n// Version information\ninterface VersionInfo {\n    version: string;\n    releaseDate: Date;\n    isPreRelease: boolean;\n    isYanked: boolean;\n    pythonRequires?: string;\n    files?: FileInfo[];\n}\n\ninterface FileInfo {\n    filename: string;\n    url: string;\n    size: number;\n    packageType: 'bdist_wheel' | 'sdist';\n}\n\n// Configuration types\ninterface TomboConfiguration {\n    pypi: PyPIConfiguration;\n    cache: CacheConfiguration;\n    ui: UIConfiguration;\n    behavior: BehaviorConfiguration;\n}\n</code></pre>"},{"location":"development/api-reference/#vs-code-integration-types","title":"VS Code Integration Types","text":"<pre><code>// Document context\ninterface DocumentContext {\n    type: DocumentType;\n    language: string;\n    sections: DocumentSection[];\n}\n\nenum DocumentType {\n    PEP621 = 'pep621',\n    Poetry = 'poetry',\n    Requirements = 'requirements'\n}\n\n// Completion context\ninterface CompletionTriggerContext {\n    triggerCharacter?: string;\n    triggerKind: vscode.CompletionTriggerKind;\n    packageName: string;\n    constraintType?: ConstraintType;\n}\n</code></pre> <p>This API reference provides complete documentation for integrating with and extending Tombo. For implementation examples and usage patterns, see the Architecture Guide and Contributing Guidelines.</p>"},{"location":"development/architecture/","title":"Technical Architecture","text":"<p>Tombo is built with modern TypeScript patterns and clean architecture principles. This guide explains the technical design, key components, and architectural decisions that make Tombo fast, reliable, and maintainable.</p>"},{"location":"development/architecture/#architecture-overview","title":"Architecture Overview","text":""},{"location":"development/architecture/#clean-architecture-design","title":"Clean Architecture Design","text":"<p>Tombo follows clean architecture principles with clear separation of concerns:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                VS Code                   \u2502\n\u2502           Extension Host                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502 VS Code APIs\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Tombo Core                  \u2502\n\u2502                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502 Providers   \u2502    \u2502  Configuration  \u2502 \u2502\n\u2502  \u2502 Layer       \u2502    \u2502  Management     \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502         \u2502                     \u2502         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502         Service Layer              \u2502  \u2502\n\u2502  \u2502                                    \u2502  \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502\n\u2502  \u2502 \u2502 PyPI Service   \u2502 \u2502Cache Service\u2502 \u2502  \u2502\n\u2502  \u2502 \u2502 (Unified API)  \u2502 \u2502             \u2502 \u2502  \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502                     \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        Infrastructure         \u2502         \u2502\n\u2502                              \u2502         \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502 \u2502 HTTP Client  \u2502 \u2502  Smart Caching   \u2502  \u2502\n\u2502 \u2502              \u2502 \u2502  (LRU + TTL)     \u2502  \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502 Network Requests\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              PyPI API                    \u2502\n\u2502         https://pypi.org/                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"development/architecture/#core-principles","title":"Core Principles","text":"<p>1. Separation of Concerns - Providers handle VS Code integration - Services contain business logic - Infrastructure manages external dependencies</p> <p>2. Dependency Inversion - High-level modules don't depend on low-level modules - Both depend on abstractions (interfaces)</p> <p>3. Single Responsibility - Each component has one reason to change - Clear, focused responsibilities</p> <p>4. Open/Closed Principle - Open for extension, closed for modification - New features don't break existing code</p>"},{"location":"development/architecture/#key-components","title":"Key Components","text":""},{"location":"development/architecture/#extension-entry-point","title":"Extension Entry Point","text":"<p><code>src/extension.ts</code> - Main extension activation:</p> <pre><code>export async function activate(context: vscode.ExtensionContext) {\n    // Initialize core services\n    const config = new ConfigurationManager();\n    const pypiService = new PyPIService(config);\n\n    // Register providers\n    const completionProvider = new VersionCompletionProvider(pypiService);\n    const hoverProvider = new HoverProvider(pypiService);\n    const quickActionProvider = new QuickActionProvider(pypiService);\n\n    // Register with VS Code\n    context.subscriptions.push(\n        vscode.languages.registerCompletionItemProvider(\n            [{ scheme: 'file', language: 'toml' }, { scheme: 'file', pattern: '**/*requirements*.txt' }],\n            completionProvider,\n            '=', '&gt;', '&lt;', '~', '!', '^'\n        ),\n        vscode.languages.registerHoverProvider(\n            [{ scheme: 'file', language: 'toml' }, { scheme: 'file', pattern: '**/*requirements*.txt' }],\n            hoverProvider\n        )\n    );\n}\n</code></pre>"},{"location":"development/architecture/#provider-layer","title":"Provider Layer","text":"<p>Version Completion Provider (<code>src/providers/version-completion-provider.ts</code>):</p> <pre><code>export class VersionCompletionProvider implements vscode.CompletionItemProvider {\n    constructor(private pypiService: PyPIService) {}\n\n    async provideCompletionItems(\n        document: vscode.TextDocument,\n        position: vscode.Position,\n        token: vscode.CancellationToken\n    ): Promise&lt;vscode.CompletionItem[]&gt; {\n        // 1. Parse document context\n        const context = this.parseContext(document, position);\n\n        if (!context.shouldTriggerCompletion) {\n            return [];\n        }\n\n        // 2. Fetch package data from unified service\n        const packageData = await this.pypiService.getPackageVersions(\n            context.packageName,\n            { includePreReleases: this.config.listPreReleases }\n        );\n\n        // 3. Filter and format completion items\n        return this.createCompletionItems(packageData, context);\n    }\n}\n</code></pre> <p>Hover Provider (<code>src/providers/hover-provider.ts</code>):</p> <pre><code>export class HoverProvider implements vscode.HoverProvider {\n    async provideHover(\n        document: vscode.TextDocument,\n        position: vscode.Position\n    ): Promise&lt;vscode.Hover | null&gt; {\n        // 1. Detect package at cursor position\n        const packageInfo = this.parsePackageAtPosition(document, position);\n\n        if (!packageInfo) {\n            return null;\n        }\n\n        // 2. Get comprehensive package data\n        const metadata = await this.pypiService.getPackageMetadata(\n            packageInfo.name\n        );\n\n        // 3. Create rich hover content\n        return this.createHoverContent(metadata, packageInfo);\n    }\n}\n</code></pre>"},{"location":"development/architecture/#service-layer","title":"Service Layer","text":"<p>Unified PyPI Service (<code>src/api/services/pypi-service.ts</code>):</p> <pre><code>export class PyPIService {\n    private cache: SmartCache&lt;PackageData&gt;;\n    private httpClient: HttpClient;\n\n    constructor(private config: ConfigurationManager) {\n        this.cache = new SmartCache({\n            maxSize: config.maxCacheSize,\n            ttl: config.cacheTimeoutMinutes * 60 * 1000\n        });\n        this.httpClient = new HttpClient(config);\n    }\n\n    async getPackageVersions(\n        packageName: string,\n        options: VersionOptions = {}\n    ): Promise&lt;PackageVersions&gt; {\n        // 1. Check cache first\n        const cacheKey = this.buildCacheKey(packageName, options);\n        const cached = this.cache.get(cacheKey);\n\n        if (cached &amp;&amp; !this.cache.isStale(cacheKey)) {\n            return cached.versions;\n        }\n\n        // 2. Fetch from PyPI\n        const packageData = await this.fetchPackageData(packageName);\n\n        // 3. Process and filter versions\n        const processedVersions = this.processVersions(packageData, options);\n\n        // 4. Cache results\n        this.cache.set(cacheKey, {\n            versions: processedVersions,\n            metadata: packageData.info,\n            fetchedAt: Date.now()\n        });\n\n        return processedVersions;\n    }\n\n    private async fetchPackageData(packageName: string): Promise&lt;PyPIPackageData&gt; {\n        const url = `${this.config.pypiIndexUrl}${packageName}/json`;\n\n        try {\n            const response = await this.httpClient.get(url);\n            return JSON.parse(response);\n        } catch (error) {\n            throw new PackageNotFoundError(`Package '${packageName}' not found on PyPI`);\n        }\n    }\n}\n</code></pre>"},{"location":"development/architecture/#infrastructure-layer","title":"Infrastructure Layer","text":"<p>Smart Caching System (<code>src/core/cache/smart-cache.ts</code>):</p> <pre><code>export class SmartCache&lt;T&gt; {\n    private memoryCache = new Map&lt;string, CacheEntry&lt;T&gt;&gt;();\n    private accessOrder = new Map&lt;string, number&gt;(); // LRU tracking\n    private accessCounter = 0;\n\n    constructor(private options: CacheOptions) {}\n\n    get(key: string): T | null {\n        const entry = this.memoryCache.get(key);\n\n        if (!entry) {\n            return null;\n        }\n\n        // Update LRU order\n        this.accessOrder.set(key, ++this.accessCounter);\n\n        return entry.data;\n    }\n\n    set(key: string, data: T): void {\n        // Evict if at capacity\n        if (this.memoryCache.size &gt;= this.options.maxSize) {\n            this.evictLRU();\n        }\n\n        this.memoryCache.set(key, {\n            data,\n            timestamp: Date.now(),\n            accessCount: 1\n        });\n\n        this.accessOrder.set(key, ++this.accessCounter);\n    }\n\n    isStale(key: string): boolean {\n        const entry = this.memoryCache.get(key);\n        if (!entry) return true;\n\n        const age = Date.now() - entry.timestamp;\n        return age &gt; this.options.ttl;\n    }\n\n    private evictLRU(): void {\n        // Find least recently used entry\n        let oldestAccess = Infinity;\n        let lruKey: string | null = null;\n\n        for (const [key, accessTime] of this.accessOrder) {\n            if (accessTime &lt; oldestAccess) {\n                oldestAccess = accessTime;\n                lruKey = key;\n            }\n        }\n\n        if (lruKey) {\n            this.memoryCache.delete(lruKey);\n            this.accessOrder.delete(lruKey);\n        }\n    }\n}\n</code></pre> <p>HTTP Client (<code>src/api/clients/http-client.ts</code>):</p> <pre><code>export class HttpClient {\n    private readonly timeout: number;\n    private readonly retryAttempts: number;\n\n    constructor(private config: ConfigurationManager) {\n        this.timeout = config.requestTimeout;\n        this.retryAttempts = config.retryAttempts;\n    }\n\n    async get(url: string): Promise&lt;string&gt; {\n        return this.executeWithRetry(() =&gt; this.performRequest(url));\n    }\n\n    private async executeWithRetry&lt;T&gt;(\n        operation: () =&gt; Promise&lt;T&gt;,\n        attempt: number = 1\n    ): Promise&lt;T&gt; {\n        try {\n            return await operation();\n        } catch (error) {\n            if (attempt &lt; this.retryAttempts &amp;&amp; this.isRetryableError(error)) {\n                const backoffDelay = this.calculateBackoff(attempt);\n                await this.sleep(backoffDelay);\n\n                return this.executeWithRetry(operation, attempt + 1);\n            }\n\n            throw error;\n        }\n    }\n\n    private calculateBackoff(attempt: number): number {\n        // Exponential backoff: 1s, 2s, 4s, 8s...\n        return Math.min(1000 * Math.pow(2, attempt - 1), 10000);\n    }\n}\n</code></pre>"},{"location":"development/architecture/#design-patterns","title":"Design Patterns","text":""},{"location":"development/architecture/#service-locator-pattern","title":"Service Locator Pattern","text":"<p>Configuration Management: <pre><code>export class ConfigurationManager {\n    private config: vscode.WorkspaceConfiguration;\n\n    constructor() {\n        this.config = vscode.workspace.getConfiguration('tombo');\n\n        // Hot reload on configuration changes\n        vscode.workspace.onDidChangeConfiguration((event) =&gt; {\n            if (event.affectsConfiguration('tombo')) {\n                this.config = vscode.workspace.getConfiguration('tombo');\n                this.notifyConfigurationChanged();\n            }\n        });\n    }\n\n    get pypiIndexUrl(): string {\n        return this.config.get('pypiIndexUrl', 'https://pypi.org/pypi/');\n    }\n\n    get requestTimeout(): number {\n        return Math.max(1000, Math.min(60000,\n            this.config.get('requestTimeout', 10000)\n        ));\n    }\n\n    get maxCacheSize(): number {\n        return Math.max(10, Math.min(10000,\n            this.config.get('maxCacheSize', 1000)\n        ));\n    }\n}\n</code></pre></p>"},{"location":"development/architecture/#strategy-pattern","title":"Strategy Pattern","text":"<p>Document Parsing: <pre><code>export abstract class DocumentParser {\n    abstract canParse(document: vscode.TextDocument): boolean;\n    abstract parsePackageAtPosition(\n        document: vscode.TextDocument,\n        position: vscode.Position\n    ): PackageInfo | null;\n}\n\nexport class TOMLParser extends DocumentParser {\n    canParse(document: vscode.TextDocument): boolean {\n        return document.fileName.endsWith('pyproject.toml');\n    }\n\n    parsePackageAtPosition(document: vscode.TextDocument, position: vscode.Position): PackageInfo | null {\n        // TOML-specific parsing logic\n        const line = document.lineAt(position);\n\n        // Handle PEP 621 dependencies array\n        if (this.isPEP621DependenciesLine(line.text)) {\n            return this.parsePEP621Package(line.text, position.character);\n        }\n\n        // Handle Poetry dependencies\n        if (this.isPoetryDependenciesLine(line.text)) {\n            return this.parsePoetryPackage(line.text, position.character);\n        }\n\n        return null;\n    }\n}\n\nexport class RequirementsParser extends DocumentParser {\n    canParse(document: vscode.TextDocument): boolean {\n        return /requirements.*\\.txt$/.test(document.fileName);\n    }\n\n    parsePackageAtPosition(document: vscode.TextDocument, position: vscode.Position): PackageInfo | null {\n        // Requirements.txt parsing logic\n        const line = document.lineAt(position);\n        return this.parseRequirementLine(line.text, position.character);\n    }\n}\n</code></pre></p>"},{"location":"development/architecture/#observer-pattern","title":"Observer Pattern","text":"<p>Event System: <pre><code>export class EventBus {\n    private listeners = new Map&lt;string, Array&lt;(data: any) =&gt; void&gt;&gt;();\n\n    subscribe(event: string, callback: (data: any) =&gt; void): void {\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, []);\n        }\n        this.listeners.get(event)!.push(callback);\n    }\n\n    emit(event: string, data: any): void {\n        const callbacks = this.listeners.get(event) || [];\n        callbacks.forEach(callback =&gt; callback(data));\n    }\n}\n\n// Usage in services\nexport class PyPIService {\n    constructor(private eventBus: EventBus) {\n        // Emit cache events for monitoring\n        this.cache.onHit = (key) =&gt; this.eventBus.emit('cache:hit', { key });\n        this.cache.onMiss = (key) =&gt; this.eventBus.emit('cache:miss', { key });\n    }\n}\n</code></pre></p>"},{"location":"development/architecture/#error-handling-strategy","title":"Error Handling Strategy","text":""},{"location":"development/architecture/#structured-error-hierarchy","title":"Structured Error Hierarchy","text":"<pre><code>export abstract class TomboError extends Error {\n    abstract readonly code: string;\n    abstract readonly category: 'network' | 'parsing' | 'cache' | 'configuration';\n\n    constructor(message: string, public readonly cause?: Error) {\n        super(message);\n        this.name = this.constructor.name;\n    }\n}\n\nexport class PackageNotFoundError extends TomboError {\n    readonly code = 'PACKAGE_NOT_FOUND';\n    readonly category = 'network';\n}\n\nexport class NetworkTimeoutError extends TomboError {\n    readonly code = 'NETWORK_TIMEOUT';\n    readonly category = 'network';\n}\n\nexport class CacheCorruptionError extends TomboError {\n    readonly code = 'CACHE_CORRUPTION';\n    readonly category = 'cache';\n}\n</code></pre>"},{"location":"development/architecture/#graceful-degradation","title":"Graceful Degradation","text":"<pre><code>export class PyPIService {\n    async getPackageVersions(packageName: string): Promise&lt;PackageVersions&gt; {\n        try {\n            // Try cache first\n            return await this.getCachedVersions(packageName);\n        } catch (cacheError) {\n            this.logger.warn('Cache failed, falling back to network', cacheError);\n\n            try {\n                // Fallback to network\n                return await this.fetchVersionsFromNetwork(packageName);\n            } catch (networkError) {\n                this.logger.error('Network also failed', networkError);\n\n                // Last resort: return minimal data if we have any\n                return this.getMinimalVersionData(packageName) ||\n                       this.throwUserFriendlyError(networkError);\n            }\n        }\n    }\n\n    private throwUserFriendlyError(error: Error): never {\n        if (error instanceof NetworkTimeoutError) {\n            throw new TomboError(\n                'Unable to fetch package information. Please check your internet connection and try again.',\n                error\n            );\n        }\n\n        throw error;\n    }\n}\n</code></pre>"},{"location":"development/architecture/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"development/architecture/#lazy-loading","title":"Lazy Loading","text":"<pre><code>export class VersionCompletionProvider {\n    private parsers: Map&lt;string, DocumentParser&gt; | null = null;\n\n    private getParsers(): Map&lt;string, DocumentParser&gt; {\n        if (!this.parsers) {\n            this.parsers = new Map([\n                ['toml', new TOMLParser()],\n                ['requirements', new RequirementsParser()]\n            ]);\n        }\n        return this.parsers;\n    }\n}\n</code></pre>"},{"location":"development/architecture/#request-batching","title":"Request Batching","text":"<pre><code>export class PyPIService {\n    private pendingRequests = new Map&lt;string, Promise&lt;PackageData&gt;&gt;();\n\n    async getPackageData(packageName: string): Promise&lt;PackageData&gt; {\n        // Deduplicate concurrent requests for same package\n        if (this.pendingRequests.has(packageName)) {\n            return this.pendingRequests.get(packageName)!;\n        }\n\n        const promise = this.fetchPackageData(packageName);\n        this.pendingRequests.set(packageName, promise);\n\n        try {\n            const result = await promise;\n            return result;\n        } finally {\n            // Clean up completed request\n            this.pendingRequests.delete(packageName);\n        }\n    }\n}\n</code></pre>"},{"location":"development/architecture/#memory-management","title":"Memory Management","text":"<pre><code>export class SmartCache&lt;T&gt; {\n    private cleanupTimer: NodeJS.Timeout | null = null;\n\n    constructor(options: CacheOptions) {\n        // Automatic cleanup every 5 minutes\n        this.cleanupTimer = setInterval(() =&gt; {\n            this.cleanup();\n        }, 5 * 60 * 1000);\n    }\n\n    private cleanup(): void {\n        const now = Date.now();\n        const expiredKeys: string[] = [];\n\n        for (const [key, entry] of this.memoryCache) {\n            if (now - entry.timestamp &gt; this.options.ttl) {\n                expiredKeys.push(key);\n            }\n        }\n\n        expiredKeys.forEach(key =&gt; {\n            this.memoryCache.delete(key);\n            this.accessOrder.delete(key);\n        });\n\n        this.logger.debug(`Cleaned up ${expiredKeys.length} expired cache entries`);\n    }\n\n    dispose(): void {\n        if (this.cleanupTimer) {\n            clearInterval(this.cleanupTimer);\n            this.cleanupTimer = null;\n        }\n\n        this.memoryCache.clear();\n        this.accessOrder.clear();\n    }\n}\n</code></pre>"},{"location":"development/architecture/#testing-architecture","title":"Testing Architecture","text":""},{"location":"development/architecture/#unit-testing-strategy","title":"Unit Testing Strategy","text":"<pre><code>// Service testing with mocks\ndescribe('PyPIService', () =&gt; {\n    let service: PyPIService;\n    let mockHttpClient: jest.Mocked&lt;HttpClient&gt;;\n    let mockCache: jest.Mocked&lt;SmartCache&lt;PackageData&gt;&gt;;\n\n    beforeEach(() =&gt; {\n        mockHttpClient = createMockHttpClient();\n        mockCache = createMockCache();\n        service = new PyPIService(mockHttpClient, mockCache);\n    });\n\n    it('should return cached data when available', async () =&gt; {\n        const cachedData = createMockPackageData('requests');\n        mockCache.get.mockReturnValue(cachedData);\n        mockCache.isStale.mockReturnValue(false);\n\n        const result = await service.getPackageVersions('requests');\n\n        expect(result).toEqual(cachedData.versions);\n        expect(mockHttpClient.get).not.toHaveBeenCalled();\n    });\n});\n</code></pre>"},{"location":"development/architecture/#integration-testing","title":"Integration Testing","text":"<pre><code>// Provider testing with real VS Code context\ndescribe('VersionCompletionProvider Integration', () =&gt; {\n    let provider: VersionCompletionProvider;\n    let mockDocument: vscode.TextDocument;\n\n    beforeEach(async () =&gt; {\n        // Set up real extension context\n        const config = new ConfigurationManager();\n        const pypiService = new PyPIService(config);\n        provider = new VersionCompletionProvider(pypiService);\n\n        mockDocument = await createTestDocument(`\n            [project]\n            dependencies = [\n                \"requests&gt;=|\"\n            ]\n        `);\n    });\n\n    it('should provide completions for version constraints', async () =&gt; {\n        const position = new vscode.Position(2, 23); // After \"requests&gt;=\"\n\n        const completions = await provider.provideCompletionItems(\n            mockDocument,\n            position,\n            new vscode.CancellationToken()\n        );\n\n        expect(completions).toHaveLength(greaterThan(0));\n        expect(completions[0].label).toMatch(/^\\d+\\.\\d+\\.\\d+$/);\n    });\n});\n</code></pre>"},{"location":"development/architecture/#build-and-deployment","title":"Build and Deployment","text":""},{"location":"development/architecture/#typescript-configuration","title":"TypeScript Configuration","text":"tsconfig.json<pre><code>{\n    \"compilerOptions\": {\n        \"target\": \"ES2020\",\n        \"module\": \"commonjs\",\n        \"lib\": [\"ES2020\"],\n        \"outDir\": \"out\",\n        \"rootDir\": \"src\",\n        \"strict\": true,\n        \"esModuleInterop\": true,\n        \"skipLibCheck\": true,\n        \"forceConsistentCasingInFileNames\": true,\n        \"declaration\": true,\n        \"declarationMap\": true,\n        \"sourceMap\": true\n    },\n    \"include\": [\n        \"src/**/*\"\n    ],\n    \"exclude\": [\n        \"node_modules\",\n        \"out\",\n        \"**/*.test.ts\"\n    ]\n}\n</code></pre>"},{"location":"development/architecture/#webpack-configuration","title":"Webpack Configuration","text":"webpack.config.js<pre><code>const path = require('path');\n\nmodule.exports = {\n    target: 'node',\n    entry: './src/extension.ts',\n    output: {\n        path: path.resolve(__dirname, 'out'),\n        filename: 'extension.js',\n        libraryTarget: 'commonjs2'\n    },\n    externals: {\n        vscode: 'commonjs vscode' // VS Code API\n    },\n    resolve: {\n        extensions: ['.ts', '.js']\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.ts$/,\n                exclude: /node_modules/,\n                use: 'ts-loader'\n            }\n        ]\n    },\n    optimization: {\n        minimize: true\n    }\n};\n</code></pre>"},{"location":"development/architecture/#architecture-benefits","title":"Architecture Benefits","text":""},{"location":"development/architecture/#maintainability","title":"Maintainability","text":"<ul> <li>Clear separation between VS Code integration and business logic</li> <li>Testable components with dependency injection</li> <li>Consistent patterns across the codebase</li> </ul>"},{"location":"development/architecture/#performance","title":"Performance","text":"<ul> <li>Smart caching reduces API calls by 90%</li> <li>Lazy loading minimizes startup time</li> <li>Request deduplication prevents redundant network calls</li> </ul>"},{"location":"development/architecture/#reliability","title":"Reliability","text":"<ul> <li>Graceful degradation when services fail</li> <li>Structured error handling with user-friendly messages</li> <li>Retry logic with exponential backoff</li> </ul>"},{"location":"development/architecture/#extensibility","title":"Extensibility","text":"<ul> <li>Plugin architecture ready for new file formats</li> <li>Event system for monitoring and plugins</li> <li>Configuration management supports hot reloading</li> </ul> <p>Ready to dive deeper into Tombo's implementation?</p> <ul> <li>API Reference \u2192 - Detailed API documentation</li> <li>Contributing \u2192 - Guidelines for contributing code</li> <li>Performance \u2192 - Optimization techniques</li> </ul>"},{"location":"development/contributing/","title":"Contributing","text":"<p>Welcome to the Tombo project! We're excited to have you contribute to making Python package management in VS Code even better.</p>"},{"location":"development/contributing/#quick-start","title":"Quick Start","text":"<p>Ready to contribute? Here's how to get started:</p> <ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally</li> <li>Set up the development environment</li> <li>Make your changes</li> <li>Submit a pull request</li> </ol>"},{"location":"development/contributing/#development-environment","title":"Development Environment","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 16+ - JavaScript runtime</li> <li>Python 3.8+ - For Python LSP components</li> <li>Git - Version control</li> <li>VS Code - For testing the extension</li> </ul>"},{"location":"development/contributing/#setup-steps","title":"Setup Steps","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/your-username/tombo.git\ncd tombo\n</code></pre></p> </li> <li> <p>Install dependencies: <pre><code># Install Node.js dependencies\nnpm install\n\n# Install Python dependencies (optional, for LSP development)\npip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Build the extension: <pre><code># Compile TypeScript\nnpm run compile\n\n# Or watch for changes during development\nnpm run watch\n</code></pre></p> </li> <li> <p>Test in VS Code:</p> </li> <li>Open the project in VS Code</li> <li>Press <code>F5</code> to launch Extension Development Host</li> <li>Test Tombo features in the new VS Code window</li> </ol>"},{"location":"development/contributing/#project-structure","title":"Project Structure","text":"<p>Understanding the codebase:</p> <pre><code>tombo/\n\u251c\u2500\u2500 src/                          # TypeScript source code\n\u2502   \u251c\u2500\u2500 extension.ts              # Main extension entry point\n\u2502   \u251c\u2500\u2500 api/                      # PyPI API integration\n\u2502   \u2502   \u251c\u2500\u2500 clients/              # HTTP client and networking\n\u2502   \u2502   \u251c\u2500\u2500 services/             # Core PyPI service\n\u2502   \u2502   \u251c\u2500\u2500 cache/                # Smart caching system\n\u2502   \u2502   \u2514\u2500\u2500 types/                # API type definitions\n\u2502   \u251c\u2500\u2500 providers/                # VS Code language providers\n\u2502   \u2502   \u251c\u2500\u2500 hover-provider.ts     # Rich hover information\n\u2502   \u2502   \u251c\u2500\u2500 version-completion-provider.ts  # Version completion\n\u2502   \u2502   \u2514\u2500\u2500 quick-action.ts       # Right-click actions\n\u2502   \u251c\u2500\u2500 core/                     # Core utilities\n\u2502   \u2502   \u251c\u2500\u2500 config/               # Configuration management\n\u2502   \u2502   \u251c\u2500\u2500 errors/               # Error handling\n\u2502   \u2502   \u2514\u2500\u2500 logging/              # Logging system\n\u2502   \u2514\u2500\u2500 toml/                     # TOML parsing\n\u251c\u2500\u2500 docs/                         # Documentation (this site)\n\u251c\u2500\u2500 tests/                        # Test projects and examples\n\u251c\u2500\u2500 package.json                  # Extension manifest\n\u251c\u2500\u2500 tsconfig.json                 # TypeScript configuration\n\u2514\u2500\u2500 webpack.config.js             # Build configuration\n</code></pre>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"development/contributing/#making-changes","title":"Making Changes","text":"<ol> <li> <p>Create a feature branch: <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes in the appropriate files</p> </li> <li>Test locally using the Extension Development Host</li> <li>Run tests and linting: <pre><code>npm run lint          # Check code style\nnpm run compile       # Verify TypeScript compilation\nnpm run test          # Run extension tests\n</code></pre></li> </ol>"},{"location":"development/contributing/#testing-your-changes","title":"Testing Your Changes","text":"<p>Manual Testing: 1. Press <code>F5</code> in VS Code to launch Extension Development Host 2. Open test files from <code>tests/</code> directory:    - <code>tests/pep621/pyproject.toml</code> - PEP 621 format    - <code>tests/poetry_v1/pyproject.toml</code> - Poetry v1 format    - <code>tests/poetry_v2/pyproject.toml</code> - Poetry v2 format 3. Test hover and completion features 4. Check the Output panel for any errors</p> <p>Automated Testing: <pre><code># Run TypeScript compilation\nnpm run compile\n\n# Run linting\nnpm run lint\n\n# Run extension tests (requires compilation first)\nnpm run pretest &amp;&amp; npm run test\n</code></pre></p>"},{"location":"development/contributing/#code-style-and-standards","title":"Code Style and Standards","text":""},{"location":"development/contributing/#typescript-guidelines","title":"TypeScript Guidelines","text":"<p>Code Style:</p> <ul> <li>Use TypeScript strict mode</li> <li>Follow semantic naming conventions</li> <li>Add JSDoc comments for public APIs</li> <li>Use async/await instead of Promises where possible</li> </ul> <p>Example: <pre><code>/**\n * Fetches package metadata from PyPI with intelligent caching\n * @param packageName - The name of the package to fetch\n * @param includePreReleases - Whether to include pre-release versions\n * @returns Promise resolving to package metadata\n * @throws {PackageNotFoundError} When package doesn't exist on PyPI\n */\nasync getPackageMetadata(\n    packageName: string,\n    includePreReleases: boolean = false\n): Promise&lt;PackageMetadata&gt; {\n    // Implementation here\n}\n</code></pre></p> <p>Error Handling:</p> <ul> <li>Use structured error types from <code>src/core/errors/</code></li> <li>Always handle network failures gracefully</li> <li>Provide meaningful error messages to users</li> </ul> <p>Performance:</p> <ul> <li>Prefer caching over repeated API calls</li> <li>Use lazy loading for expensive operations</li> <li>Minimize extension activation impact</li> </ul>"},{"location":"development/contributing/#linting-configuration","title":"Linting Configuration","text":"<p>The project uses ESLint with TypeScript support:</p> <pre><code># Check linting\nnpm run lint\n\n# Fix auto-fixable issues\nnpm run lint -- --fix\n</code></pre> <p>Key linting rules:</p> <ul> <li>Semicolons required</li> <li>No unused variables</li> <li>Consistent indentation (2 spaces)</li> <li>Prefer const over let where possible</li> </ul>"},{"location":"development/contributing/#contributing-areas","title":"Contributing Areas","text":""},{"location":"development/contributing/#high-impact-contributions","title":"\ud83c\udfaf High-Impact Contributions","text":"<p>Feature Enhancements:</p> <ul> <li>Improve version completion algorithms</li> <li>Add support for new package formats</li> <li>Enhance caching strategies</li> <li>Optimize performance</li> </ul> <p>User Experience:</p> <ul> <li>Better error messages and recovery</li> <li>Improved visual indicators</li> <li>Enhanced hover information</li> <li>Accessibility improvements</li> </ul> <p>Documentation:</p> <ul> <li>Code examples and tutorials</li> <li>Video demonstrations</li> <li>Troubleshooting guides</li> <li>API documentation</li> </ul>"},{"location":"development/contributing/#technical-improvements","title":"\ud83e\uddea Technical Improvements","text":"<p>Architecture:</p> <ul> <li>Refactor providers for better maintainability</li> <li>Improve TypeScript type definitions</li> <li>Enhance error handling patterns</li> <li>Optimize bundle size</li> </ul> <p>Testing:</p> <ul> <li>Unit tests for core functionality</li> <li>Integration tests for VS Code features</li> <li>Performance benchmarks</li> <li>Edge case testing</li> </ul> <p>Infrastructure:</p> <ul> <li>CI/CD improvements</li> <li>Release automation</li> <li>Security scanning</li> <li>Documentation generation</li> </ul>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":""},{"location":"development/contributing/#before-submitting","title":"Before Submitting","text":"<ol> <li> <p>Ensure tests pass: <pre><code>npm run pretest &amp;&amp; npm test\n</code></pre></p> </li> <li> <p>Check code quality: <pre><code>npm run lint\nnpm run compile\n</code></pre></p> </li> <li> <p>Test manually in Extension Development Host</p> </li> <li>Update documentation if needed</li> <li>Write descriptive commit messages</li> </ol>"},{"location":"development/contributing/#pr-requirements","title":"PR Requirements","text":"<p>Title Format: - <code>feat: add support for Pipfile format</code> - <code>fix: resolve hover timeout issues</code> - <code>docs: update installation guide</code> - <code>perf: optimize caching performance</code></p> <p>Description Should Include: - What - Clear description of changes - Why - Motivation and context - How - Technical approach taken - Testing - How you verified the changes - Screenshots - For UI changes</p> <p>PR Template: <pre><code>## What Changed\nBrief description of your changes.\n\n## Why\nExplain the motivation for these changes.\n\n## How\nTechnical details of your implementation.\n\n## Testing\n- [ ] Manual testing in Extension Development Host\n- [ ] All existing tests pass\n- [ ] Added new tests for new functionality\n\n## Screenshots (if applicable)\nInclude before/after screenshots for UI changes.\n\n## Checklist\n- [ ] Code follows project style guidelines\n- [ ] Self-review completed\n- [ ] Documentation updated\n- [ ] Tests added/updated\n</code></pre></p>"},{"location":"development/contributing/#review-process","title":"Review Process","text":"<ol> <li>Automated checks run on all PRs</li> <li>Code review by maintainers</li> <li>Testing in various environments</li> <li>Merge after approval</li> </ol> <p>Review criteria: - Code quality and maintainability - Performance impact - User experience - Security considerations - Compatibility with existing features</p>"},{"location":"development/contributing/#issue-reporting","title":"Issue Reporting","text":""},{"location":"development/contributing/#bug-reports","title":"Bug Reports","text":"<p>Good bug reports include: - Tombo version and VS Code version - Operating system and version - Clear steps to reproduce - Expected vs actual behavior - Screenshots or videos if helpful - Debug logs if relevant</p> <p>Bug Report Template: <pre><code>**Environment**\n- Tombo version: 1.0.0\n- VS Code version: 1.84.0\n- OS: Windows 11\n\n**Steps to Reproduce**\n1. Open pyproject.toml file\n2. Hover over package name\n3. No hover information appears\n\n**Expected Behavior**\nRich package metadata should appear in hover tooltip.\n\n**Actual Behavior**\nNo hover response, nothing happens.\n\n**Additional Context**\n- Network connectivity is good\n- Other VS Code extensions work fine\n- Debug logs attached\n</code></pre></p>"},{"location":"development/contributing/#feature-requests","title":"Feature Requests","text":"<p>Feature request template: <pre><code>**Is your feature request related to a problem?**\nA clear description of what the problem is.\n\n**Describe the solution you'd like**\nA clear description of what you want to happen.\n\n**Describe alternatives you've considered**\nAlternative solutions or features you've considered.\n\n**Additional context**\nScreenshots, mockups, or examples.\n</code></pre></p>"},{"location":"development/contributing/#development-guidelines","title":"Development Guidelines","text":""},{"location":"development/contributing/#performance-considerations","title":"Performance Considerations","text":"<p>Caching Strategy: - Cache expensive PyPI lookups - Use appropriate TTL values - Implement cache invalidation - Monitor memory usage</p> <p>Network Requests: - Implement retry logic with backoff - Handle network failures gracefully - Respect rate limits - Use efficient HTTP clients</p> <p>VS Code Integration: - Minimize extension activation time - Use lazy loading for providers - Dispose resources properly - Follow VS Code best practices</p>"},{"location":"development/contributing/#security-guidelines","title":"Security Guidelines","text":"<p>Network Security: - Validate all external inputs - Use HTTPS for PyPI requests - Handle SSL/certificate issues - Sanitize user-provided URLs</p> <p>Data Handling: - Don't store sensitive information - Respect user privacy - Follow minimal data collection principles - Clear sensitive data from logs</p>"},{"location":"development/contributing/#community-guidelines","title":"Community Guidelines","text":""},{"location":"development/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>We follow the Contributor Covenant code of conduct:</p> <ul> <li>Be respectful - Treat everyone with respect</li> <li>Be inclusive - Welcome diverse perspectives</li> <li>Be constructive - Provide helpful feedback</li> <li>Be patient - Remember we're all learning</li> </ul>"},{"location":"development/contributing/#communication","title":"Communication","text":"<p>Preferred channels: - GitHub Issues - Bug reports and feature requests - GitHub Discussions - Questions and community discussion - Pull Requests - Code contributions and reviews</p> <p>Communication tips: - Be clear and concise - Provide context and examples - Be open to feedback - Help others when you can</p>"},{"location":"development/contributing/#recognition","title":"Recognition","text":""},{"location":"development/contributing/#contributors","title":"Contributors","text":"<p>All contributors are recognized in: - README.md - Contributors section - Release notes - Feature credits - Documentation - Author attribution - GitHub - Contributor graphs</p>"},{"location":"development/contributing/#ways-to-contribute","title":"Ways to Contribute","text":"<p>You don't need to write code to contribute:</p> <ul> <li>\ud83d\udcdd Documentation - Improve guides and examples</li> <li>\ud83d\udc1b Bug reports - Help identify issues</li> <li>\ud83d\udca1 Feature ideas - Suggest improvements</li> <li>\ud83e\uddea Testing - Test new features and releases</li> <li>\u2753 Support - Help other users in discussions</li> <li>\ud83c\udfa8 Design - UI/UX improvements</li> <li>\ud83d\udcf9 Content - Videos, tutorials, blog posts</li> </ul>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":""},{"location":"development/contributing/#development-questions","title":"Development Questions","text":"<p>Stuck on something? 1. Check the troubleshooting guide 2. Search existing GitHub issues 3. Ask in GitHub Discussions 4. Reach out to maintainers</p>"},{"location":"development/contributing/#resources","title":"Resources","text":"<p>Useful links: - VS Code Extension API - Official VS Code docs - TypeScript Handbook - TypeScript reference - PyPI API - PyPI API documentation - PEP 621 - Python packaging standards</p>"},{"location":"development/contributing/#release-process","title":"Release Process","text":""},{"location":"development/contributing/#versioning","title":"Versioning","text":"<p>We use Semantic Versioning: - Major (1.0.0) - Breaking changes - Minor (1.1.0) - New features, backward compatible - Patch (1.1.1) - Bug fixes, backward compatible</p>"},{"location":"development/contributing/#release-schedule","title":"Release Schedule","text":"<ul> <li>Patch releases - As needed for critical bugs</li> <li>Minor releases - Monthly feature releases</li> <li>Major releases - When breaking changes are needed</li> </ul>"},{"location":"development/contributing/#thank-you","title":"Thank You! \ud83c\udf89","text":"<p>Every contribution makes Tombo better for the Python development community. Whether you're fixing a typo in documentation or implementing a major feature, your help is valued and appreciated.</p> <p>Ready to contribute? Fork the repository and dive in!</p> <p>Questions?</p> <p>Don't hesitate to ask! We're here to help you succeed. Check our GitHub Discussions or reach out to the maintainers.</p>"},{"location":"examples/pep621/","title":"PEP 621 Projects","text":"<p>Learn how to use Tombo with modern PEP 621 Python projects. This is the current standard for Python packaging and the format Tombo works best with.</p>"},{"location":"examples/pep621/#what-is-pep-621","title":"What is PEP 621?","text":"<p>PEP 621 defines how to store project metadata in <code>pyproject.toml</code> files. It's the modern standard that replaces setup.py for most Python projects.</p> <p>Key benefits:</p> <ul> <li>Declarative - Metadata defined in TOML, not Python code</li> <li>Standard - Official Python packaging standard</li> <li>Tool-agnostic - Works with pip, build, twine, and other tools</li> <li>Rich metadata - Supports all PyPI metadata fields</li> </ul>"},{"location":"examples/pep621/#basic-pep-621-structure","title":"Basic PEP 621 Structure","text":"<p>Here's a typical PEP 621 <code>pyproject.toml</code> file where Tombo provides rich assistance:</p> pyproject.toml<pre><code>[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"my-awesome-project\"\nversion = \"0.1.0\"\ndescription = \"An awesome Python project\"\nreadme = \"README.md\"\nlicense = {text = \"MIT\"}\nauthors = [\n    {name = \"Your Name\", email = \"you@example.com\"},\n]\nclassifiers = [\n    \"Development Status :: 4 - Beta\",\n    \"Intended Audience :: Developers\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n]\nrequires-python = \"&gt;=3.8\"\ndependencies = [\n    \"requests&gt;=2.28.0\",     # \u2190 Hover here for rich package info\n    \"click&gt;=8.0.0\",         # \u2190 Completion works after &gt;=, ==, ~=, etc.\n    \"pydantic&gt;=2.0.0\",      # \u2190 See latest v2 versions\n    \"httpx&gt;=0.24.0\",        # \u2190 Python compatibility indicators\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest&gt;=7.0.0\",       # \u2190 Testing framework\n    \"black&gt;=23.0.0\",        # \u2190 Code formatter\n    \"ruff&gt;=0.0.250\",        # \u2190 Fast linter\n    \"mypy&gt;=1.0.0\",          # \u2190 Type checker\n]\ndocs = [\n    \"mkdocs&gt;=1.4.0\",        # \u2190 Documentation generator\n    \"mkdocs-material&gt;=9.0.0\", # \u2190 Material theme\n]\ntest = [\n    \"pytest-cov&gt;=4.0.0\",   # \u2190 Coverage plugin\n    \"pytest-mock&gt;=3.10.0\", # \u2190 Mocking plugin\n]\n\n[project.urls]\nHomepage = \"https://github.com/username/my-awesome-project\"\nDocumentation = \"https://my-awesome-project.readthedocs.io\"\nRepository = \"https://github.com/username/my-awesome-project.git\"\nIssues = \"https://github.com/username/my-awesome-project/issues\"\n\n[project.scripts]\nmy-cli = \"my_awesome_project.cli:main\"\n\n[project.gui-scripts]\nmy-gui = \"my_awesome_project.gui:main\"\n\n[project.entry-points.\"my_awesome_project.plugins\"]\nplugin1 = \"my_awesome_project.plugins:plugin1\"\n</code></pre>"},{"location":"examples/pep621/#tombo-features-in-pep-621","title":"Tombo Features in PEP 621","text":""},{"location":"examples/pep621/#dependencies-array","title":"Dependencies Array","text":"<p>The <code>dependencies</code> array is where Tombo shines:</p> pyproject.toml<pre><code>[project]\ndependencies = [\n    \"requests\",           # Hover: See package description, latest version\n    \"requests&gt;=\",         # Completion: Get version suggestions after &gt;=\n    \"requests&gt;=2.28.0\",   # Hover: See if this specific version exists\n    \"numpy~=1.24\",        # Completion: See compatible ~= versions\n    \"pandas==2.0.3\",      # Hover: Check if this exact version is available\n]\n</code></pre> <p>What Tombo provides:</p> <ul> <li>Rich hover information on package names</li> <li>Version completion after constraint operators</li> <li>Compatibility indicators for Python versions</li> <li>Pre-release version detection</li> <li>Yanked version warnings</li> </ul>"},{"location":"examples/pep621/#optional-dependencies","title":"Optional Dependencies","text":"<p>Organize development, testing, and documentation dependencies:</p> pyproject.toml<pre><code>[project.optional-dependencies]\n# Development tools\ndev = [\n    \"black&gt;=23.0.0\",        # \u2190 Hover to see latest formatting options\n    \"ruff&gt;=0.0.250\",        # \u2190 Fast linter with many rules\n    \"pre-commit&gt;=3.0.0\",    # \u2190 Git hooks for quality\n]\n\n# Testing framework\ntest = [\n    \"pytest&gt;=7.0.0\",       # \u2190 Core testing framework\n    \"pytest-cov&gt;=4.0.0\",   # \u2190 Coverage reporting\n    \"pytest-xdist&gt;=3.0.0\", # \u2190 Parallel test execution\n    \"hypothesis&gt;=6.0.0\",   # \u2190 Property-based testing\n]\n\n# Documentation\ndocs = [\n    \"mkdocs&gt;=1.4.0\",        # \u2190 Documentation site generator\n    \"mkdocs-material&gt;=9.0.0\", # \u2190 Beautiful theme\n    \"mkdocstrings[python]&gt;=0.20.0\", # \u2190 API documentation\n]\n\n# Production extras\npostgres = [\n    \"psycopg2-binary&gt;=2.9.0\", # \u2190 PostgreSQL adapter\n    \"sqlalchemy&gt;=2.0.0\",      # \u2190 ORM framework\n]\n\nredis = [\n    \"redis&gt;=4.0.0\",         # \u2190 Redis client\n    \"celery&gt;=5.2.0\",        # \u2190 Task queue\n]\n</code></pre> <p>Installation examples: <pre><code># Install base dependencies\npip install .\n\n# Install with development tools\npip install .[dev]\n\n# Install multiple groups\npip install .[dev,test,docs]\n\n# Install all optional dependencies\npip install .[dev,test,docs,postgres,redis]\n</code></pre></p>"},{"location":"examples/pep621/#real-world-examples","title":"Real-World Examples","text":""},{"location":"examples/pep621/#web-api-project","title":"Web API Project","text":"pyproject.toml - FastAPI Web Service<pre><code>[project]\nname = \"awesome-api\"\nversion = \"1.0.0\"\ndescription = \"A high-performance web API\"\nrequires-python = \"&gt;=3.8\"\ndependencies = [\n    # Web framework\n    \"fastapi&gt;=0.100.0\",      # \u2190 Modern async web framework\n    \"uvicorn[standard]&gt;=0.20.0\", # \u2190 ASGI server with extras\n\n    # Database\n    \"sqlalchemy&gt;=2.0.0\",     # \u2190 Modern ORM with async support\n    \"alembic&gt;=1.10.0\",       # \u2190 Database migrations\n    \"asyncpg&gt;=0.28.0\",       # \u2190 Async PostgreSQL driver\n\n    # Validation &amp; serialization\n    \"pydantic&gt;=2.0.0\",       # \u2190 Data validation with v2 features\n    \"pydantic-settings&gt;=2.0.0\", # \u2190 Settings management\n\n    # HTTP client\n    \"httpx&gt;=0.24.0\",         # \u2190 Async HTTP client\n\n    # Authentication\n    \"python-jose[cryptography]&gt;=3.3.0\", # \u2190 JWT handling\n    \"passlib[bcrypt]&gt;=1.7.0\", # \u2190 Password hashing\n\n    # Monitoring\n    \"structlog&gt;=23.0.0\",     # \u2190 Structured logging\n    \"prometheus-client&gt;=0.16.0\", # \u2190 Metrics collection\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest&gt;=7.0.0\",\n    \"pytest-asyncio&gt;=0.21.0\", # \u2190 Async test support\n    \"httpx&gt;=0.24.0\",          # \u2190 Test client\n    \"pytest-cov&gt;=4.0.0\",\n    \"black&gt;=23.0.0\",\n    \"ruff&gt;=0.0.250\",\n    \"mypy&gt;=1.0.0\",\n]\n</code></pre>"},{"location":"examples/pep621/#data-science-project","title":"Data Science Project","text":"pyproject.toml - ML/Data Science Project<pre><code>[project]\nname = \"data-analysis-toolkit\"\nversion = \"0.2.0\"\ndescription = \"Advanced data analysis and machine learning tools\"\nrequires-python = \"&gt;=3.9\"\ndependencies = [\n    # Core data science stack\n    \"numpy&gt;=1.24.0\",         # \u2190 Numerical computing foundation\n    \"pandas&gt;=2.0.0\",         # \u2190 Data manipulation and analysis\n    \"polars&gt;=0.18.0\",        # \u2190 Fast DataFrame library alternative\n\n    # Scientific computing\n    \"scipy&gt;=1.10.0\",         # \u2190 Scientific computing library\n    \"scikit-learn&gt;=1.3.0\",   # \u2190 Machine learning framework\n    \"statsmodels&gt;=0.14.0\",   # \u2190 Statistical modeling\n\n    # Deep learning\n    \"torch&gt;=2.0.0\",          # \u2190 PyTorch deep learning framework\n    \"torchvision&gt;=0.15.0\",   # \u2190 Computer vision models\n    \"transformers&gt;=4.30.0\",  # \u2190 Hugging Face transformers\n\n    # Visualization\n    \"matplotlib&gt;=3.7.0\",     # \u2190 Basic plotting\n    \"seaborn&gt;=0.12.0\",       # \u2190 Statistical visualization\n    \"plotly&gt;=5.15.0\",        # \u2190 Interactive visualizations\n\n    # Jupyter ecosystem\n    \"jupyter&gt;=1.0.0\",        # \u2190 Jupyter metapackage\n    \"ipykernel&gt;=6.0.0\",      # \u2190 Jupyter kernel\n    \"ipywidgets&gt;=8.0.0\",     # \u2190 Interactive widgets\n]\n\n[project.optional-dependencies]\ngpu = [\n    \"torch&gt;=2.0.0+cu118\",    # \u2190 CUDA-enabled PyTorch\n    \"cupy&gt;=12.0.0\",          # \u2190 GPU arrays\n]\n</code></pre>"},{"location":"examples/pep621/#cli-application","title":"CLI Application","text":"pyproject.toml - Command Line Tool<pre><code>[project]\nname = \"awesome-cli\"\nversion = \"2.1.0\"\ndescription = \"A powerful command-line tool\"\nrequires-python = \"&gt;=3.8\"\ndependencies = [\n    # CLI framework\n    \"click&gt;=8.1.0\",          # \u2190 Command line interface creation\n    \"rich&gt;=13.0.0\",          # \u2190 Rich text and beautiful formatting\n    \"typer&gt;=0.9.0\",          # \u2190 Modern CLI framework (alternative)\n\n    # Configuration\n    \"pydantic&gt;=2.0.0\",       # \u2190 Data validation\n    \"pydantic-settings&gt;=2.0.0\", # \u2190 Settings management\n    \"toml&gt;=0.10.2\",          # \u2190 TOML file parsing\n\n    # File operations\n    \"pathlib2&gt;=2.3.0\",       # \u2190 Enhanced path operations\n    \"watchdog&gt;=3.0.0\",       # \u2190 File system monitoring\n\n    # Network operations\n    \"requests&gt;=2.31.0\",      # \u2190 HTTP requests\n    \"urllib3&gt;=2.0.0\",        # \u2190 HTTP client library\n\n    # Progress and feedback\n    \"tqdm&gt;=4.65.0\",          # \u2190 Progress bars\n    \"spinners&gt;=0.0.24\",      # \u2190 Loading spinners\n]\n\n[project.scripts]\nawesome = \"awesome_cli.main:cli\"\nawesome-admin = \"awesome_cli.admin:admin_cli\"\n\n[project.optional-dependencies]\ndev = [\n    \"pytest&gt;=7.0.0\",\n    \"click-testing&gt;=0.4.0\",  # \u2190 CLI testing utilities\n    \"coverage&gt;=7.0.0\",\n]\n</code></pre>"},{"location":"examples/pep621/#working-with-constraints","title":"Working with Constraints","text":""},{"location":"examples/pep621/#version-constraint-types","title":"Version Constraint Types","text":"<p>Tombo understands all PEP 440 version specifiers:</p> pyproject.toml<pre><code>[project]\ndependencies = [\n    # Exact version\n    \"requests==2.31.0\",      # \u2190 Exactly 2.31.0\n\n    # Greater than or equal\n    \"numpy&gt;=1.24.0\",         # \u2190 1.24.0 or newer\n\n    # Compatible release (tilde)\n    \"pandas~=2.0.3\",         # \u2190 &gt;=2.0.3, &lt;2.1.0\n\n    # Caret (not standard, but Poetry-style)\n    \"click^=8.1.0\",          # \u2190 &gt;=8.1.0, &lt;9.0.0 (if supported)\n\n    # Complex constraints\n    \"django&gt;=4.0.0,&lt;5.0.0\",  # \u2190 Multiple constraints\n\n    # Exclude specific versions\n    \"sqlalchemy&gt;=1.4.0,!=1.4.5\", # \u2190 Exclude buggy version\n\n    # Pre-release inclusion\n    \"fastapi&gt;=0.100.0rc1\",   # \u2190 Include pre-releases explicitly\n]\n</code></pre> <p>Tombo completion works after:</p> <ul> <li><code>==</code> - Exact version completion</li> <li><code>&gt;=</code> - Minimum version completion</li> <li><code>&lt;=</code> - Maximum version completion</li> <li><code>~=</code> - Compatible release completion</li> <li><code>!=</code> - Exclusion version completion</li> <li><code>&gt;</code> - Greater than completion</li> <li><code>&lt;</code> - Less than completion</li> </ul>"},{"location":"examples/pep621/#python-version-compatibility","title":"Python Version Compatibility","text":"<p>Specify Python version requirements:</p> pyproject.toml<pre><code>[project]\nrequires-python = \"&gt;=3.8\"    # \u2190 Tombo shows compatibility for this range\n\ndependencies = [\n    \"typing-extensions&gt;=4.0.0\", # \u2190 Hover shows: \"Needed for Python &lt;3.10\"\n    \"importlib-metadata&gt;=4.0.0\", # \u2190 Hover shows: \"Needed for Python &lt;3.8\"\n]\n\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.8\",  # \u2190 Supported versions\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n]\n</code></pre>"},{"location":"examples/pep621/#advanced-pep-621-features","title":"Advanced PEP 621 Features","text":""},{"location":"examples/pep621/#dynamic-metadata","title":"Dynamic Metadata","text":"<p>Some fields can be marked as dynamic:</p> pyproject.toml<pre><code>[project]\nname = \"my-project\"\ndynamic = [\"version\", \"description\"]  # \u2190 Loaded from __init__.py\n\ndependencies = [\n    \"requests&gt;=2.31.0\",     # \u2190 Static dependencies still get Tombo support\n]\n</code></pre>"},{"location":"examples/pep621/#entry-points","title":"Entry Points","text":"<p>Define command-line scripts and plugins:</p> pyproject.toml<pre><code>[project.scripts]\nmy-cli = \"my_package.cli:main\"\nmy-tool = \"my_package.tools:run\"\n\n[project.gui-scripts]\nmy-gui = \"my_package.gui:main\"\n\n[project.entry-points.\"console_scripts\"]\ncustom-cmd = \"my_package.custom:handler\"\n\n# Plugin system entry points\n[project.entry-points.\"my_package.plugins\"]\nplugin_a = \"my_package.plugins.a:PluginA\"\nplugin_b = \"my_package.plugins.b:PluginB\"\n</code></pre>"},{"location":"examples/pep621/#best-practices-with-tombo","title":"Best Practices with Tombo","text":""},{"location":"examples/pep621/#1-use-semantic-versioning-constraints","title":"1. Use Semantic Versioning Constraints","text":"Good constraint choices<pre><code>[project]\ndependencies = [\n    # Allow patch updates, pin major.minor\n    \"requests~=2.31.0\",      # \u2190 Allows 2.31.x updates\n\n    # Allow minor updates, pin major\n    \"django&gt;=4.2.0,&lt;5.0.0\",  # \u2190 Django 4.x series\n\n    # Pin exactly for very specific needs\n    \"pillow==10.0.0\",        # \u2190 Exact version for reproducibility\n]\n</code></pre>"},{"location":"examples/pep621/#2-group-related-dependencies","title":"2. Group Related Dependencies","text":"Logical grouping<pre><code>[project.optional-dependencies]\n# Web-specific dependencies\nweb = [\n    \"fastapi&gt;=0.100.0\",\n    \"uvicorn&gt;=0.20.0\",\n    \"jinja2&gt;=3.1.0\",\n]\n\n# Database dependencies\ndb = [\n    \"sqlalchemy&gt;=2.0.0\",\n    \"alembic&gt;=1.10.0\",\n]\n\n# All database drivers\ndb-postgres = [\"psycopg2-binary&gt;=2.9.0\"]\ndb-mysql = [\"pymysql&gt;=1.0.0\"]\ndb-sqlite = [\"aiosqlite&gt;=0.19.0\"]\n</code></pre>"},{"location":"examples/pep621/#3-use-comments-for-context","title":"3. Use Comments for Context","text":"Documented dependencies<pre><code>[project]\ndependencies = [\n    # Core HTTP client - used throughout the application\n    \"httpx&gt;=0.24.0\",         # \u2190 Async support required\n\n    # Data validation - v2 required for performance\n    \"pydantic&gt;=2.0.0\",       # \u2190 Breaking changes from v1\n\n    # Serialization - msgpack faster than JSON for large data\n    \"msgpack&gt;=1.0.0\",        # \u2190 Binary serialization format\n]\n</code></pre>"},{"location":"examples/pep621/#migration-from-setuppy","title":"Migration from setup.py","text":"<p>If you're migrating from <code>setup.py</code> to PEP 621:</p>"},{"location":"examples/pep621/#before-setuppy","title":"Before (setup.py)","text":"<pre><code>from setuptools import setup, find_packages\n\nsetup(\n    name=\"my-package\",\n    version=\"1.0.0\",\n    install_requires=[\n        \"requests&gt;=2.31.0\",\n        \"click&gt;=8.1.0\",\n    ],\n    extras_require={\n        \"dev\": [\"pytest&gt;=7.0.0\", \"black&gt;=23.0.0\"],\n    },\n)\n</code></pre>"},{"location":"examples/pep621/#after-pyprojecttoml","title":"After (pyproject.toml)","text":"<pre><code>[project]\nname = \"my-package\"\nversion = \"1.0.0\"\ndependencies = [\n    \"requests&gt;=2.31.0\",     # \u2190 Same deps, now with Tombo support!\n    \"click&gt;=8.1.0\",\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest&gt;=7.0.0\",\n    \"black&gt;=23.0.0\",\n]\n</code></pre> <p>Benefits of migration:</p> <ul> <li>\u2705 Tombo support - Rich hover and completion</li> <li>\u2705 Standard format - Official Python packaging</li> <li>\u2705 Tool agnostic - Works with any build backend</li> <li>\u2705 Better tooling - More editor support</li> </ul>"},{"location":"examples/pep621/#next-steps","title":"Next Steps","text":"<p>Ready to explore more Tombo features?</p> <ul> <li>Poetry Projects \u2192 - Learn Poetry-specific features</li> <li>Requirements Files \u2192 - Traditional pip requirements</li> <li>Smart Caching \u2192 - Understand performance optimization</li> <li>Configuration \u2192 - Customize Tombo for your workflow</li> </ul>"},{"location":"examples/pep621/#troubleshooting-pep-621","title":"Troubleshooting PEP 621","text":""},{"location":"examples/pep621/#common-issues","title":"Common Issues","text":"<p>Tombo not working in pyproject.toml?</p> <ol> <li>\u2705 Check file name - Must be exactly <code>pyproject.toml</code></li> <li>\u2705 Verify section - Dependencies must be in <code>[project]</code> section</li> <li>\u2705 Check syntax - Use array format: <code>dependencies = [\"package&gt;=1.0\"]</code></li> <li>\u2705 Restart VS Code - Reload after major changes</li> </ol> <p>Version completion not triggering?</p> <ol> <li>\u2705 Use constraint operators - Type <code>&gt;=</code>, <code>==</code>, <code>~=</code> to trigger</li> <li>\u2705 Check cursor position - Must be after the operator</li> <li>\u2705 Manual trigger - Use <code>Ctrl+Space</code> to force completion</li> <li>\u2705 Check network - First lookup requires internet connection</li> </ol> <p>Need more help? Check our troubleshooting guide!</p>"},{"location":"examples/poetry/","title":"Poetry Projects","text":"<p>Poetry is a modern dependency management and packaging tool for Python. Tombo provides excellent support for Poetry projects with intelligent version completion and hover information.</p>"},{"location":"examples/poetry/#poetry-v1-format","title":"Poetry v1 Format","text":"<p>Poetry v1 uses a clean, straightforward syntax that Tombo supports perfectly.</p>"},{"location":"examples/poetry/#basic-dependencies","title":"Basic Dependencies","text":"pyproject.toml<pre><code>[tool.poetry.dependencies]\npython = \"^3.9\"\nrequests = \"^2.28.0\"           # \u2190 Caret constraints work perfectly\nclick = \"~8.1.0\"               # \u2190 Tilde constraints supported\nfastapi = \"&gt;=0.95.0,&lt;1.0.0\"    # \u2190 Range constraints\ndjango = \"4.2.7\"               # \u2190 Exact versions\n</code></pre> <p>Completion Behavior:</p> <ul> <li>Between quotes: <code>\"^2.|\"</code> triggers version completion</li> <li>After operators: <code>\"&gt;=|\"</code> shows available versions</li> <li>Version ranges: <code>\"&gt;=0.95.0,&lt;|\"</code> completes second constraint</li> </ul>"},{"location":"examples/poetry/#development-dependencies","title":"Development Dependencies","text":"pyproject.toml<pre><code>[tool.poetry.group.dev.dependencies]\npytest = \"^7.0\"                # \u2190 Test framework\nblack = \"^23.0\"                # \u2190 Code formatter\nisort = \"^5.12.0\"              # \u2190 Import sorter\nmypy = \"^1.5.0\"                # \u2190 Type checker\n\n[tool.poetry.group.docs.dependencies]\nmkdocs = \"^1.5.0\"              # \u2190 Documentation\nmkdocs-material = \"^9.4.0\"     # \u2190 Material theme\n</code></pre> <p>Group Benefits:</p> <ul> <li>Organized dependencies - Separate concerns clearly</li> <li>Selective installation - <code>poetry install --without docs</code></li> <li>Tombo support - Full completion in all dependency groups</li> </ul>"},{"location":"examples/poetry/#optional-dependencies-with-extras","title":"Optional Dependencies with Extras","text":"pyproject.toml<pre><code>[tool.poetry.dependencies]\nsqlalchemy = \"^2.0.0\"          # \u2190 Core ORM\npsycopg2 = {version = \"^2.9.0\", optional = true}\nasyncpg = {version = \"^0.28.0\", optional = true}\n\n[tool.poetry.extras]\npostgresql = [\"psycopg2\"]\nasync-postgresql = [\"asyncpg\"]\nall-db = [\"psycopg2\", \"asyncpg\"]\n</code></pre> <p>Extras Usage:</p> <pre><code># Install with specific database support\npoetry install -E postgresql\n\n# Install all optional dependencies\npoetry install -E all-db\n</code></pre>"},{"location":"examples/poetry/#poetry-v2-format","title":"Poetry v2 Format","text":"<p>Poetry v2 introduced parentheses syntax for more complex constraints.</p>"},{"location":"examples/poetry/#parentheses-constraints","title":"Parentheses Constraints","text":"pyproject.toml<pre><code>[tool.poetry.dependencies]\npython = \"^3.9\"\nnumpy = \"^1.24.0\"\npandas = \"(&gt;=2.0,&lt;3.0)\"        # \u2190 Parentheses format\nscipy = \"(&gt;=1.10,!=1.11.0)\"    # \u2190 Exclusion in parentheses\n</code></pre> <p>Note: Tombo supports Poetry v2 but completion works best with operators (<code>&gt;=</code>, <code>&lt;</code>, <code>!=</code>) rather than parentheses.</p>"},{"location":"examples/poetry/#complex-constraints","title":"Complex Constraints","text":"pyproject.toml<pre><code>[tool.poetry.dependencies]\n# Multi-constraint examples\ntensorflow = [\n    {version = \"^2.13.0\", python = \"^3.9\"},\n    {version = \"^2.12.0\", python = \"^3.8\"}\n]\n\n# Platform-specific dependencies\npywin32 = {version = \"^306\", markers = \"sys_platform == 'win32'\"}\n</code></pre>"},{"location":"examples/poetry/#real-world-poetry-examples","title":"Real-World Poetry Examples","text":""},{"location":"examples/poetry/#web-api-project","title":"Web API Project","text":"FastAPI + Poetry Setup<pre><code>[tool.poetry.dependencies]\npython = \"^3.11\"\nfastapi = \"^0.104.0\"           # \u2190 Modern web framework\nuvicorn = {extras = [\"standard\"], version = \"^0.24.0\"}\npydantic = \"^2.4.0\"            # \u2190 Data validation v2\nsqlalchemy = \"^2.0.0\"          # \u2190 Modern ORM\nalembic = \"^1.12.0\"            # \u2190 Database migrations\npython-jose = \"^3.3.0\"        # \u2190 JWT handling\npasslib = \"^1.7.4\"            # \u2190 Password hashing\n\n[tool.poetry.group.dev.dependencies]\npytest = \"^7.4.0\"\npytest-asyncio = \"^0.21.0\"\nhttpx = \"^0.25.0\"              # \u2190 Async HTTP client for testing\n</code></pre>"},{"location":"examples/poetry/#data-science-project","title":"Data Science Project","text":"ML/Data Science Stack<pre><code>[tool.poetry.dependencies]\npython = \"^3.11\"\nnumpy = \"^1.25.0\"              # \u2190 Numerical computing\npandas = \"^2.1.0\"              # \u2190 Data manipulation\nscikit-learn = \"^1.3.0\"        # \u2190 Machine learning\nmatplotlib = \"^3.7.0\"          # \u2190 Plotting\nseaborn = \"^0.12.0\"            # \u2190 Statistical visualization\njupyter = \"^1.0.0\"             # \u2190 Interactive notebooks\n\n[tool.poetry.group.gpu.dependencies]\ntorch = \"^2.1.0\"               # \u2190 Deep learning\ntorchvision = \"^0.16.0\"        # \u2190 Computer vision\n</code></pre>"},{"location":"examples/poetry/#package-development","title":"Package Development","text":"Library Development Setup<pre><code>[tool.poetry.dependencies]\npython = \"^3.8\"                # \u2190 Broad compatibility\n\n[tool.poetry.group.dev.dependencies]\npytest = \"^7.0\"\npytest-cov = \"^4.1.0\"         # \u2190 Coverage reporting\nblack = \"^23.0\"                # \u2190 Code formatting\nisort = \"^5.12.0\"              # \u2190 Import organization\nmypy = \"^1.5.0\"                # \u2190 Type checking\npre-commit = \"^3.4.0\"          # \u2190 Git hooks\n\n[tool.poetry.group.docs.dependencies]\nsphinx = \"^7.1.0\"              # \u2190 Documentation\nfuro = \"^2023.8.19\"            # \u2190 Clean Sphinx theme\n\n[tool.poetry.group.release.dependencies]\ntwine = \"^4.0.2\"               # \u2190 PyPI publishing\nbuild = \"^1.0.0\"               # \u2190 Modern build tool\n</code></pre>"},{"location":"examples/poetry/#poetry-commands-integration","title":"Poetry Commands Integration","text":""},{"location":"examples/poetry/#installation-commands","title":"Installation Commands","text":"<pre><code># Basic installation\npoetry install\n\n# Skip development dependencies\npoetry install --only main\n\n# Install specific groups\npoetry install --with docs,test\n\n# Install with extras\npoetry install -E all-db\n\n# Update dependencies\npoetry update\n</code></pre>"},{"location":"examples/poetry/#development-workflow","title":"Development Workflow","text":"<pre><code># Add dependencies (Tombo helps choose versions)\npoetry add requests&gt;=2.28.0\n\n# Add to development group\npoetry add pytest --group dev\n\n# Add with extras\npoetry add fastapi[all]\n\n# Add with constraints\npoetry add \"django&gt;=4.2,&lt;5.0\"\n</code></pre>"},{"location":"examples/poetry/#tombo-integration-features","title":"Tombo Integration Features","text":""},{"location":"examples/poetry/#version-completion","title":"Version Completion","text":"<p>Poetry v1 Perfect Support:</p> <ol> <li>Position cursor between quotes: <code>\"^2.|\"</code></li> <li>Type constraint operators: <code>&gt;=</code>, <code>~=</code>, <code>^</code>, <code>~</code></li> <li>Get instant suggestions from Tombo's cache</li> <li>Select version from dropdown</li> </ol>"},{"location":"examples/poetry/#hover-information","title":"Hover Information","text":"<p>Rich Poetry Context:</p> <ul> <li>Current constraint analysis and version matching</li> <li>Available versions with Poetry compatibility</li> <li>Dependency resolution insights</li> <li>Installation commands for Poetry</li> </ul>"},{"location":"examples/poetry/#quick-actions","title":"Quick Actions","text":"<p>Right-click Enhancements:</p> <ul> <li>Update to latest - Maintains Poetry constraint style</li> <li>Change constraint type - Convert between <code>^</code>, <code>~=</code>, <code>&gt;=</code></li> <li>Add to different group - Move between main/dev/docs</li> <li>Lock file sync - Compare with <code>poetry.lock</code></li> </ul>"},{"location":"examples/poetry/#best-practices","title":"Best Practices","text":""},{"location":"examples/poetry/#constraint-strategy","title":"Constraint Strategy","text":"<p>Recommended Approach:</p> <pre><code>[tool.poetry.dependencies]\n# Production dependencies - conservative\ndjango = \"~4.2.0\"              # Patch updates only\npsycopg2 = \"^2.9.0\"            # Minor updates OK\n\n# Development tools - more flexible\n[tool.poetry.group.dev.dependencies]\npytest = \"^7.0\"                # Allow minor updates\nblack = \"*\"                    # Always latest (dev only)\n</code></pre>"},{"location":"examples/poetry/#dependency-organization","title":"Dependency Organization","text":"<p>Group Strategy:</p> <pre><code>[tool.poetry.dependencies]\n# Core application dependencies only\n\n[tool.poetry.group.dev.dependencies]\n# Testing, linting, formatting\n\n[tool.poetry.group.docs.dependencies]\n# Documentation building\n\n[tool.poetry.group.release.dependencies]\n# Publishing and deployment tools\n</code></pre>"},{"location":"examples/poetry/#version-management","title":"Version Management","text":"<p>Lock File Workflow:</p> <ol> <li>Use ranges in <code>pyproject.toml</code> for flexibility</li> <li>Commit <code>poetry.lock</code> for reproducible builds</li> <li>Update regularly with <code>poetry update</code></li> <li>Test after updates to catch breaking changes</li> </ol>"},{"location":"examples/poetry/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/poetry/#common-issues","title":"Common Issues","text":"<p>Completion not working:</p> <ul> <li>Check file name - Must be exactly <code>pyproject.toml</code></li> <li>Cursor position - Between quotes or after operators</li> <li>Poetry format - v1 works perfectly, v2 needs operators</li> <li>Network access - First completion requires internet</li> </ul> <p>Hover information missing:</p> <ul> <li>Package exists on PyPI (private packages won't work)</li> <li>Correct spelling and case sensitivity</li> <li>Poetry section - Ensure proper TOML structure</li> <li>Cache refresh - Clear Tombo cache if stale</li> </ul>"},{"location":"examples/poetry/#performance-tips","title":"Performance Tips","text":"<p>Faster Completion:</p> <ul> <li>Enable caching - Default settings are optimized</li> <li>Use specific versions - <code>\"^2.28\"</code> instead of <code>\"^2\"</code></li> <li>Group related additions - Add multiple packages together</li> <li>Pre-warm cache - Hover over packages before editing</li> </ul>"},{"location":"examples/poetry/#next-steps","title":"Next Steps","text":"<p>Learn more about Poetry integration:</p> <ul> <li>Version Completion \u2192 - Detailed completion behavior</li> <li>Hover Information \u2192 - Rich package metadata</li> <li>Real-world Workflows \u2192 - Complete development examples</li> </ul>"},{"location":"examples/requirements/","title":"Requirements.txt Files","text":"<p>Traditional <code>requirements.txt</code> files remain a cornerstone of Python dependency management. Tombo provides comprehensive support for all requirements file formats with intelligent completion and validation.</p>"},{"location":"examples/requirements/#standard-requirements-format","title":"Standard Requirements Format","text":""},{"location":"examples/requirements/#basic-syntax","title":"Basic Syntax","text":"requirements.txt<pre><code># Basic package requirements\nrequests\nnumpy\npandas\n\n# Version constraints\ndjango&gt;=4.2.0              # \u2190 Completion after &gt;=\nflask==2.3.3               # \u2190 Exact version completion\nfastapi~=0.104.0           # \u2190 Compatible release completion\n</code></pre> <p>Completion Triggers:</p> <ul> <li>After operators: <code>numpy&gt;=|</code> shows available versions</li> <li>In version strings: <code>django==4.2.|</code> shows patch versions</li> <li>Range constraints: <code>flask&gt;=2.0,&lt;3.|</code> completes upper bound</li> </ul>"},{"location":"examples/requirements/#version-specifiers","title":"Version Specifiers","text":"version-constraints.txt<pre><code># Comparison operators\nrequests&gt;=2.28.0           # Greater than or equal\nurllib3&lt;2.0                # Less than\ncertifi!=2023.5.7          # Not equal (exclusion)\ncharset-normalizer&gt;3.0     # Greater than\n\n# Compatible release\nsetuptools~=68.0.0         # Equivalent to &gt;=68.0.0, ==68.*\n\n# Exact versions\npip==23.2.1                # Pin to specific version\nwheel==0.41.2              # Exact match only\n</code></pre>"},{"location":"examples/requirements/#complex-constraints","title":"Complex Constraints","text":"complex-requirements.txt<pre><code># Multiple constraints\nDjango&gt;=4.2.0,&lt;5.0.0       # Version range\nrequests&gt;=2.28.0,!=2.29.0  # Exclude specific version\nnumpy&gt;=1.24.0,&lt;2.0.0       # Major version boundary\n\n# Pre-release handling\ntensorflow&gt;=2.13.0         # Stable only\ntorch&gt;=2.0.0a0             # Include pre-releases\n</code></pre>"},{"location":"examples/requirements/#file-variants","title":"File Variants","text":""},{"location":"examples/requirements/#development-requirements","title":"Development Requirements","text":"requirements-dev.txt<pre><code># Include base requirements\n-r requirements.txt\n\n# Development tools\npytest&gt;=7.4.0              # \u2190 Testing framework\nblack&gt;=23.7.0               # \u2190 Code formatter\nisort&gt;=5.12.4               # \u2190 Import sorter\nmypy&gt;=1.5.1                 # \u2190 Type checker\npre-commit&gt;=3.3.3           # \u2190 Git hooks\n\n# Documentation\nsphinx&gt;=7.1.2\nfuro&gt;=2023.8.19\n</code></pre> <p>Usage: <pre><code>pip install -r requirements-dev.txt\n</code></pre></p>"},{"location":"examples/requirements/#production-vs-development","title":"Production vs Development","text":"requirements-prod.txt<pre><code># Production dependencies only (no dev tools)\ndjango==4.2.7              # Pinned for stability\npsycopg2-binary==2.9.7     # Database adapter\ngunicorn==21.2.0            # WSGI server\nredis==5.0.1                # Caching\ncelery==5.3.4               # Task queue\n</code></pre> requirements-test.txt<pre><code># Test dependencies\n-r requirements.txt\n\n# Testing frameworks\npytest==7.4.3\npytest-django==4.5.2\npytest-cov==4.1.0\nfactory-boy==3.3.0\nresponses==0.23.3\n</code></pre>"},{"location":"examples/requirements/#advanced-features","title":"Advanced Features","text":""},{"location":"examples/requirements/#environment-markers","title":"Environment Markers","text":"platform-requirements.txt<pre><code># Platform-specific dependencies\npywin32&gt;=306; sys_platform == \"win32\"      # Windows only\nmacholib&gt;=1.16; sys_platform == \"darwin\"   # macOS only\n\n# Python version specific\ndataclasses&gt;=0.8; python_version &lt; \"3.7\"   # Backport for old Python\ntyping-extensions&gt;=4.0; python_version &lt; \"3.8\"\n\n# Combined conditions\nuvloop&gt;=0.17.0; sys_platform != \"win32\" and python_version &gt;= \"3.7\"\n</code></pre>"},{"location":"examples/requirements/#extras-installation","title":"Extras Installation","text":"extras-requirements.txt<pre><code># Package with extras\nfastapi[all]&gt;=0.104.0       # All optional dependencies\nsqlalchemy[postgresql]&gt;=2.0.0  # PostgreSQL support only\nrequests[security]&gt;=2.28.0  # Security-related extras\n\n# Multiple extras\ndjango[argon2,bcrypt]&gt;=4.2.0    # Multiple password hashers\n</code></pre>"},{"location":"examples/requirements/#hash-verification","title":"Hash Verification","text":"requirements-locked.txt<pre><code># Locked requirements with hashes for security\ndjango==4.2.7 \\\n    --hash=sha256:8e0f1c2c2f7c8b7a1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p7q8r9s0t1u2v3w4x5y6z \\\n    --hash=sha256:a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5\n\nrequests==2.31.0 \\\n    --hash=sha256:58cd2187c01e70e6e26505bca751777aa9f2ee0b7f4300988b709f44e013003f \\\n    --hash=sha256:942c5a758f98d790eaed1a29cb6eefc7ffb0d1cf7af05c3d2791656dbd6ad1e1\n</code></pre> <p>Generate hashes: <pre><code>pip-compile --generate-hashes requirements.in\n</code></pre></p>"},{"location":"examples/requirements/#real-world-examples","title":"Real-World Examples","text":""},{"location":"examples/requirements/#web-application","title":"Web Application","text":"web-app-requirements.txt<pre><code># Web framework\nDjango&gt;=4.2.0,&lt;5.0.0        # \u2190 LTS version range\ndjangorestframework&gt;=3.14.0  # \u2190 API framework\n\n# Database\npsycopg2-binary&gt;=2.9.0      # \u2190 PostgreSQL adapter\nredis&gt;=4.5.0                # \u2190 Caching and sessions\n\n# Production server\ngunicorn&gt;=21.0.0            # \u2190 WSGI server\nwhitenoise&gt;=6.5.0           # \u2190 Static file serving\n\n# Monitoring\nsentry-sdk&gt;=1.32.0          # \u2190 Error tracking\ndjango-debug-toolbar&gt;=4.2.0 # \u2190 Development debugging\n\n# Environment\npython-dotenv&gt;=1.0.0        # \u2190 Environment variables\n</code></pre>"},{"location":"examples/requirements/#data-science-stack","title":"Data Science Stack","text":"data-science-requirements.txt<pre><code># Core data libraries\nnumpy&gt;=1.25.0               # \u2190 Numerical computing\npandas&gt;=2.1.0               # \u2190 Data manipulation\nscipy&gt;=1.11.0               # \u2190 Scientific computing\n\n# Machine learning\nscikit-learn&gt;=1.3.0         # \u2190 ML algorithms\nxgboost&gt;=1.7.0              # \u2190 Gradient boosting\nlightgbm&gt;=4.1.0             # \u2190 Fast ML framework\n\n# Visualization\nmatplotlib&gt;=3.7.0           # \u2190 Basic plotting\nseaborn&gt;=0.12.0             # \u2190 Statistical plots\nplotly&gt;=5.17.0              # \u2190 Interactive plots\n\n# Jupyter ecosystem\njupyter&gt;=1.0.0              # \u2190 Notebook interface\nipywidgets&gt;=8.1.0           # \u2190 Interactive widgets\n</code></pre>"},{"location":"examples/requirements/#api-development","title":"API Development","text":"api-requirements.txt<pre><code># Modern API framework\nfastapi&gt;=0.104.0            # \u2190 Async web framework\nuvicorn[standard]&gt;=0.24.0   # \u2190 ASGI server with extras\n\n# Data validation\npydantic&gt;=2.4.0             # \u2190 Data models v2\nemail-validator&gt;=2.0.0      # \u2190 Email validation\n\n# Authentication\npython-jose[cryptography]&gt;=3.3.0  # \u2190 JWT tokens\npasslib[bcrypt]&gt;=1.7.4      # \u2190 Password hashing\n\n# Database ORM\nsqlalchemy&gt;=2.0.0           # \u2190 Modern ORM\nalembic&gt;=1.12.0             # \u2190 Database migrations\n\n# HTTP client\nhttpx&gt;=0.25.0               # \u2190 Async HTTP client\n</code></pre>"},{"location":"examples/requirements/#testing-requirements","title":"Testing Requirements","text":"requirements-test.txt<pre><code># Base application requirements\n-r requirements.txt\n\n# Testing framework\npytest&gt;=7.4.0              # \u2190 Test runner\npytest-asyncio&gt;=0.21.0     # \u2190 Async testing\npytest-cov&gt;=4.1.0          # \u2190 Coverage reporting\npytest-mock&gt;=3.11.1        # \u2190 Mocking utilities\n\n# Test data\nfactory-boy&gt;=3.3.0          # \u2190 Test fixtures\nfaker&gt;=19.6.0               # \u2190 Fake data generation\nresponses&gt;=0.23.0           # \u2190 HTTP mocking\n\n# Performance testing\npytest-benchmark&gt;=4.0.0    # \u2190 Performance tests\nmemory-profiler&gt;=0.61.0     # \u2190 Memory usage tracking\n</code></pre>"},{"location":"examples/requirements/#tombo-integration","title":"Tombo Integration","text":""},{"location":"examples/requirements/#intelligent-completion","title":"Intelligent Completion","text":"<p>Completion Behavior:</p> <ol> <li>Type constraint operators (<code>&gt;=</code>, <code>==</code>, <code>~=</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>)</li> <li>Get instant suggestions from PyPI via smart caching</li> <li>Select appropriate version from filtered list</li> <li>See compatibility indicators based on Python version</li> </ol>"},{"location":"examples/requirements/#format-support","title":"Format Support","text":"<p>File Recognition:</p> <ul> <li><code>requirements.txt</code> - Standard requirements</li> <li><code>requirements-*.txt</code> - Any requirements variant</li> <li><code>dev-requirements.txt</code> - Development dependencies</li> <li><code>test-requirements.txt</code> - Testing dependencies</li> <li><code>requirements/*.txt</code> - Requirements in subdirectories</li> </ul>"},{"location":"examples/requirements/#hover-information","title":"Hover Information","text":"<p>Rich Package Details:</p> <ul> <li>Latest version information and release date</li> <li>Python compatibility with your project requirements</li> <li>Package description and maintainer info</li> <li>Direct links to PyPI, documentation, and source code</li> </ul>"},{"location":"examples/requirements/#quick-actions","title":"Quick Actions","text":"<p>Right-click Features:</p> <ul> <li>Update to latest - Maintains constraint style</li> <li>Change constraint type - Convert between operators</li> <li>Pin exact version - Convert ranges to exact versions</li> <li>Add version hash - Security verification</li> </ul>"},{"location":"examples/requirements/#best-practices","title":"Best Practices","text":""},{"location":"examples/requirements/#requirements-organization","title":"Requirements Organization","text":"<p>Structured Approach:</p> <pre><code>project/\n\u251c\u2500\u2500 requirements/\n\u2502   \u251c\u2500\u2500 base.txt           # Core dependencies\n\u2502   \u251c\u2500\u2500 development.txt    # Dev tools\n\u2502   \u251c\u2500\u2500 production.txt     # Production-only\n\u2502   \u2514\u2500\u2500 testing.txt        # Test dependencies\n\u2514\u2500\u2500 requirements.txt       # Main requirements file\n</code></pre> <p>Base requirements pattern: requirements/base.txt<pre><code># Core application dependencies\nDjango&gt;=4.2.0,&lt;5.0.0\npsycopg2-binary&gt;=2.9.0\nredis&gt;=4.5.0\n</code></pre></p> requirements/development.txt<pre><code>-r base.txt\n\n# Development tools\npytest&gt;=7.4.0\nblack&gt;=23.7.0\nisort&gt;=5.12.4\n</code></pre>"},{"location":"examples/requirements/#version-strategy","title":"Version Strategy","text":"<p>Constraint Guidelines:</p> version-strategy.txt<pre><code># Libraries - allow updates\nrequests&gt;=2.28.0           # Minor updates OK\n\n# Framework - careful updates\ndjango&gt;=4.2.0,&lt;5.0.0       # Major version boundary\n\n# Critical dependencies - pin exactly\npsycopg2-binary==2.9.7     # Database driver stability\n\n# Development tools - flexible\npytest&gt;=7.0.0              # Testing framework updates\n</code></pre>"},{"location":"examples/requirements/#lock-file-workflow","title":"Lock File Workflow","text":"<p>Using pip-tools:</p> requirements.in<pre><code># High-level dependencies\ndjango&gt;=4.2.0\nrequests\npandas\n</code></pre> <pre><code># Generate locked requirements\npip-compile requirements.in\n\n# Creates requirements.txt with exact versions\npip-sync requirements.txt\n</code></pre>"},{"location":"examples/requirements/#integration-with-other-tools","title":"Integration with Other Tools","text":""},{"location":"examples/requirements/#docker-integration","title":"Docker Integration","text":"Dockerfile<pre><code># Copy requirements first for better caching\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\n# Copy application code\nCOPY . .\n</code></pre>"},{"location":"examples/requirements/#cicd-integration","title":"CI/CD Integration","text":".github/workflows/test.yml<pre><code>- name: Install dependencies\n  run: |\n    pip install -r requirements-test.txt\n\n- name: Run tests\n  run: pytest\n</code></pre>"},{"location":"examples/requirements/#virtual-environment","title":"Virtual Environment","text":"<pre><code># Create and activate virtual environment\npython -m venv venv\nsource venv/bin/activate  # Linux/macOS\n# venv\\Scripts\\activate   # Windows\n\n# Install requirements\npip install -r requirements.txt\n\n# Freeze installed packages\npip freeze &gt; requirements-frozen.txt\n</code></pre>"},{"location":"examples/requirements/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/requirements/#common-issues","title":"Common Issues","text":"<p>Completion not triggering:</p> <ul> <li>File recognition - Ensure file ends with <code>.txt</code></li> <li>Cursor position - Must be after constraint operators</li> <li>Package name - Check spelling and case sensitivity</li> <li>Network access - First completion needs internet</li> </ul> <p>Version conflicts:</p> <ul> <li>Check constraints - Look for conflicting version ranges</li> <li>Use pip check - Validate installed packages</li> <li>Review dependencies - Understand dependency trees</li> <li>Consider alternatives - Different packages with similar functionality</li> </ul>"},{"location":"examples/requirements/#performance-optimization","title":"Performance Optimization","text":"<p>Faster Installation:</p> optimized-requirements.txt<pre><code># Use binary packages when available\npsycopg2-binary&gt;=2.9.0     # Faster than psycopg2\npillow&gt;=10.0.0              # Pre-compiled imaging library\n\n# Pin major versions to avoid resolver work\nnumpy&gt;=1.25.0,&lt;2.0.0       # Clear version boundary\npandas&gt;=2.1.0,&lt;3.0.0       # Avoid future conflicts\n</code></pre>"},{"location":"examples/requirements/#next-steps","title":"Next Steps","text":"<p>Explore more requirements.txt capabilities:</p> <ul> <li>Version Completion \u2192 - Intelligent version suggestions</li> <li>Hover Information \u2192 - Package metadata</li> <li>Real-world Workflows \u2192 - Complete development examples</li> </ul>"},{"location":"examples/workflows/","title":"Real-world Workflows","text":"<p>Learn how to leverage Tombo effectively in common Python development scenarios. These workflows demonstrate practical usage patterns that speed up your daily development tasks.</p>"},{"location":"examples/workflows/#new-project-setup","title":"New Project Setup","text":""},{"location":"examples/workflows/#starting-a-web-application","title":"Starting a Web Application","text":"<p>Scenario: Creating a new Django REST API project</p> <p>Step 1: Initialize Project Structure <pre><code>mkdir my-api-project\ncd my-api-project\npython -m venv venv\nsource venv/bin/activate\n</code></pre></p> <p>Step 2: Create pyproject.toml with Tombo pyproject.toml<pre><code>[project]\nname = \"my-api\"\nversion = \"0.1.0\"\nrequires-python = \"&gt;=3.11\"\ndependencies = [\n    \"django\",              # \u2190 Hover to see latest version\n    \"djangorestframework\", # \u2190 Use completion for &gt;=\n    \"psycopg2-binary\",     # \u2190 Add version constraint\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest\",             # \u2190 Type &gt;= for version completion\n    \"black\",              # \u2190 Get latest stable version\n    \"isort\",              # \u2190 Smart version suggestions\n]\n</code></pre></p> <p>Step 3: Tombo-Assisted Completion 1. Type package name \u2192 Hover shows package info 2. Add constraint operator (<code>&gt;=</code>) \u2192 Version completion appears 3. Select appropriate version \u2192 Tombo suggests compatible versions 4. Verify compatibility \u2192 Hover shows Python version requirements</p>"},{"location":"examples/workflows/#data-science-project","title":"Data Science Project","text":"<p>Scenario: Setting up machine learning experiment environment</p> <p>Environment Configuration: pyproject.toml<pre><code>[project]\nname = \"ml-experiment\"\nrequires-python = \"&gt;=3.10\"\ndependencies = [\n    \"numpy&gt;=\",            # \u2190 Type here for latest versions\n    \"pandas~=\",           # \u2190 Compatible release completion\n    \"scikit-learn&gt;=\",     # \u2190 Smart version filtering\n    \"matplotlib&gt;=3.7.0\", # \u2190 Specific minimum for features\n    \"jupyter&gt;=\",          # \u2190 Interactive development\n]\n\n[project.optional-dependencies]\ngpu = [\n    \"torch&gt;=\",           # \u2190 Latest PyTorch with CUDA\n    \"torchvision&gt;=\",     # \u2190 Computer vision utilities\n]\n\ndeep-learning = [\n    \"tensorflow&gt;=\",      # \u2190 Alternative framework\n    \"tensorboard&gt;=\",     # \u2190 Visualization tool\n]\n</code></pre></p> <p>Workflow Benefits: - Quick setup - Tombo speeds up dependency research - Compatibility checking - Hover shows Python requirements - Version exploration - Easy to compare different versions - Documentation links - Direct access to package docs</p>"},{"location":"examples/workflows/#dependency-updates","title":"Dependency Updates","text":""},{"location":"examples/workflows/#systematic-update-process","title":"Systematic Update Process","text":"<p>Scenario: Monthly dependency maintenance for production API</p> <p>Step 1: Audit Current Dependencies Current pyproject.toml<pre><code>[project]\ndependencies = [\n    \"fastapi&gt;=0.95.0\",     # \u2190 Hover to check for updates\n    \"uvicorn&gt;=0.20.0\",     # \u2190 See latest stable version\n    \"pydantic&gt;=1.10.0\",    # \u2190 Major version 2.0 available?\n    \"sqlalchemy&gt;=1.4.0\",   # \u2190 Check 2.0 compatibility\n]\n</code></pre></p> <p>Step 2: Version Research with Tombo 1. Hover over packages \u2192 See current vs latest versions 2. Check breaking changes \u2192 Click documentation links 3. Review compatibility \u2192 Verify Python version requirements 4. Plan update strategy \u2192 Prioritize safe vs major updates</p> <p>Step 3: Safe Updates First Updated pyproject.toml<pre><code>[project]\ndependencies = [\n    \"fastapi&gt;=0.104.0\",    # \u2190 Minor update (safe)\n    \"uvicorn&gt;=0.24.0\",     # \u2190 Patch update (safe)\n    \"pydantic&gt;=1.10.0\",    # \u2190 Keep v1 (breaking change in v2)\n    \"sqlalchemy&gt;=1.4.0\",   # \u2190 Plan separate v2 migration\n]\n</code></pre></p>"},{"location":"examples/workflows/#handling-breaking-changes","title":"Handling Breaking Changes","text":"<p>Scenario: Upgrading Pydantic v1 to v2</p> <p>Before Migration: pyproject.toml - Before<pre><code>dependencies = [\n    \"pydantic&gt;=1.10.0\",    # \u2190 Hover shows v2.4.0 available\n    \"fastapi&gt;=0.104.0\",    # \u2190 Check Pydantic v2 compatibility\n]\n</code></pre></p> <p>Research Process: 1. Hover on pydantic \u2192 See v2 is major update 2. Click documentation link \u2192 Read migration guide 3. Hover on fastapi \u2192 Verify v2 compatibility 4. Check dependencies \u2192 Review impact on other packages</p> <p>After Migration: pyproject.toml - After<pre><code>dependencies = [\n    \"pydantic&gt;=2.4.0\",     # \u2190 Updated with breaking changes\n    \"fastapi&gt;=0.104.0\",    # \u2190 Confirmed compatible\n]\n</code></pre></p>"},{"location":"examples/workflows/#team-collaboration","title":"Team Collaboration","text":""},{"location":"examples/workflows/#standardizing-dependencies","title":"Standardizing Dependencies","text":"<p>Scenario: Large team needs consistent dependency versions</p> <p>Team Lead Setup: pyproject.toml - Team Standard<pre><code>[project]\nname = \"team-project\"\nrequires-python = \"&gt;=3.11\"    # \u2190 Team Python version\ndependencies = [\n    # Core framework - locked for stability\n    \"django~=4.2.0\",           # \u2190 Patch updates only\n\n    # Production dependencies - careful ranges\n    \"psycopg2-binary&gt;=2.9.0,&lt;3.0.0\",  # \u2190 Major version boundary\n    \"redis&gt;=4.5.0,&lt;5.0.0\",     # \u2190 Compatible versions\n\n    # Utilities - allow minor updates\n    \"requests&gt;=2.28.0\",        # \u2190 Safe to update\n    \"python-dotenv&gt;=1.0.0\",    # \u2190 Stable API\n]\n\n[project.optional-dependencies]\ndev = [\n    # Development tools - more flexible\n    \"pytest&gt;=7.0.0\",           # \u2190 Allow minor updates\n    \"black&gt;=23.0.0\",           # \u2190 Formatting improvements OK\n    \"mypy&gt;=1.0.0\",             # \u2190 Type checking updates\n]\n</code></pre></p> <p>Individual Developer Workflow: 1. Clone repository \u2192 Get team's dependency specifications 2. Use Tombo for new additions \u2192 Research before adding dependencies 3. Hover before updating \u2192 Check if changes affect team compatibility 4. Discuss major changes \u2192 Use hover info to inform team discussions</p>"},{"location":"examples/workflows/#code-review-integration","title":"Code Review Integration","text":"<p>Scenario: Reviewing dependency changes in pull requests</p> <p>PR Review Checklist with Tombo:</p> <ol> <li>Version Appropriateness</li> <li>Hover over new dependencies \u2192 Check if latest version is needed</li> <li>Verify constraint type \u2192 <code>&gt;=</code> vs <code>~=</code> vs <code>==</code> appropriateness</li> <li> <p>Review Python compatibility \u2192 Ensure team Python version support</p> </li> <li> <p>Security Considerations</p> </li> <li>Click PyPI links \u2192 Check package maintenance status</li> <li>Review release dates \u2192 Avoid abandoned packages</li> <li> <p>Check for yanked versions \u2192 Ensure stable version selection</p> </li> <li> <p>Impact Assessment</p> </li> <li>Hover for dependency information \u2192 Understand package purpose</li> <li>Check documentation links \u2192 Verify package quality</li> <li>Review constraint ranges \u2192 Avoid future conflicts</li> </ol>"},{"location":"examples/workflows/#production-deployment","title":"Production Deployment","text":""},{"location":"examples/workflows/#environment-specific-configurations","title":"Environment-Specific Configurations","text":"<p>Scenario: Managing dependencies across development, staging, and production</p> <p>Base Configuration: pyproject.toml<pre><code>[project]\nname = \"production-app\"\ndependencies = [\n    # Production-ready versions with careful constraints\n    \"django~=4.2.0\",           # \u2190 LTS version, patch updates only\n    \"gunicorn&gt;=21.0.0,&lt;22.0.0\", # \u2190 Production server\n    \"psycopg2-binary~=2.9.0\",  # \u2190 Database stability\n    \"redis~=4.5.0\",            # \u2190 Cache/session store\n]\n\n[project.optional-dependencies]\nmonitoring = [\n    \"sentry-sdk&gt;=1.32.0\",      # \u2190 Error tracking\n    \"prometheus-client&gt;=0.17.0\", # \u2190 Metrics collection\n]\n\ndevelopment = [\n    \"django-debug-toolbar&gt;=4.2.0\", # \u2190 Dev debugging\n    \"pytest&gt;=7.4.0\",           # \u2190 Testing framework\n    \"factory-boy&gt;=3.3.0\",      # \u2190 Test fixtures\n]\n</code></pre></p> <p>Deployment Workflow: 1. Development: Install with <code>pip install -e .[development]</code> 2. Production: Install only core dependencies <code>pip install .</code> 3. Monitoring: Add production monitoring <code>pip install .[monitoring]</code></p>"},{"location":"examples/workflows/#docker-integration","title":"Docker Integration","text":"<p>Scenario: Containerized application with optimized builds</p> <p>Multi-stage Dockerfile: Dockerfile<pre><code># Build stage - includes development tools\nFROM python:3.11-slim as builder\nCOPY pyproject.toml .\n# Tombo helps ensure these versions work together\nRUN pip install build setuptools wheel\n\n# Production stage - only runtime dependencies\nFROM python:3.11-slim as production\nCOPY --from=builder /app/dist/*.whl .\nRUN pip install *.whl\n\n# Development stage - includes dev tools\nFROM production as development\nRUN pip install -e .[development]\n</code></pre></p> <p>Benefits of Tombo Integration: - Version research \u2192 Hover to find stable versions for containers - Compatibility verification \u2192 Ensure Python base image compatibility - Documentation access \u2192 Quick links to installation guides - Update planning \u2192 Easy to assess update impact before rebuild</p>"},{"location":"examples/workflows/#legacy-project-migration","title":"Legacy Project Migration","text":""},{"location":"examples/workflows/#modernizing-old-requirements","title":"Modernizing Old Requirements","text":"<p>Scenario: Converting legacy requirements.txt to modern pyproject.toml</p> <p>Old requirements.txt: requirements.txt - Legacy<pre><code>Django==3.2.19\npsycopg2-binary==2.8.6\nrequests==2.25.1\npytest==6.2.4\nblack==21.12b0\n</code></pre></p> <p>Migration Process with Tombo:</p> <ol> <li>Create pyproject.toml structure</li> <li>Research current versions - Hover over each package</li> <li>Check breaking changes - Click documentation links</li> <li>Plan update strategy - Group by risk level</li> </ol> <p>Modern pyproject.toml: pyproject.toml - Modernized<pre><code>[project]\nname = \"legacy-app\"\nrequires-python = \"&gt;=3.8\"     # \u2190 Determined from old Python usage\ndependencies = [\n    # Updated with research via Tombo hover\n    \"django&gt;=4.2.0,&lt;5.0.0\",   # \u2190 LTS upgrade path\n    \"psycopg2-binary&gt;=2.9.0\", # \u2190 Security updates\n    \"requests&gt;=2.28.0\",       # \u2190 Safe minor updates\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest&gt;=7.4.0\",          # \u2190 Major version upgrade\n    \"black&gt;=23.0.0\",          # \u2190 Latest stable formatter\n]\n</code></pre></p> <p>Migration Benefits: - Informed updates \u2192 Tombo hover shows what's changed - Gradual migration \u2192 Update packages incrementally - Compatibility checking \u2192 Verify Python version requirements - Documentation access \u2192 Read migration guides directly</p>"},{"location":"examples/workflows/#package-replacement","title":"Package Replacement","text":"<p>Scenario: Replacing deprecated packages with modern alternatives</p> <p>Research Process: 1. Identify deprecated package \u2192 Hover shows maintenance status 2. Find replacement \u2192 Documentation links suggest alternatives 3. Compare features \u2192 Research new package capabilities 4. Test compatibility \u2192 Verify API compatibility</p> <p>Example - Replacing pkg_resources: pyproject.toml - Package Replacement<pre><code>[project]\ndependencies = [\n    # Old: pkg_resources (deprecated)\n    # \"setuptools\",           # \u2190 Contains deprecated pkg_resources\n\n    # New: importlib.metadata (modern alternative)\n    \"importlib-metadata&gt;=6.0.0; python_version &lt; '3.10'\", # \u2190 Backport\n    # importlib.metadata built into Python 3.10+\n]\n</code></pre></p>"},{"location":"examples/workflows/#performance-optimization","title":"Performance Optimization","text":""},{"location":"examples/workflows/#caching-strategy","title":"Caching Strategy","text":"<p>Scenario: Optimizing Tombo for large monorepo projects</p> <p>Settings Configuration: VS Code Settings<pre><code>{\n    \"tombo.cacheTimeoutMinutes\": 60,    // Longer cache for stability\n    \"tombo.maxCacheSize\": 2000,         // More packages for monorepo\n    \"tombo.enableDebugLogging\": false,  // Clean logs in production\n    \"tombo.requestTimeout\": 15000       // Slower network tolerance\n}\n</code></pre></p> <p>Workflow Optimization: 1. Pre-warm cache \u2192 Hover over key packages during setup 2. Batch additions \u2192 Add multiple dependencies together 3. Use version prefixes \u2192 <code>numpy&gt;=1.25</code> instead of <code>numpy&gt;=</code> 4. Monitor performance \u2192 Check Output Panel if slow</p>"},{"location":"examples/workflows/#offline-development","title":"Offline Development","text":"<p>Scenario: Working without reliable internet connection</p> <p>Preparation Steps: 1. Cache warm-up \u2192 Hover over all project dependencies 2. Version exploration \u2192 Trigger completion for key packages 3. Documentation access \u2192 Browse key package pages while online 4. Settings adjustment \u2192 Increase cache timeout for offline periods</p> <p>Offline-Friendly Settings: VS Code Settings - Offline<pre><code>{\n    \"tombo.cacheTimeoutMinutes\": 1440,  // 24-hour cache\n    \"tombo.maxCacheSize\": 5000,         // Large cache for self-sufficiency\n    \"tombo.requestTimeout\": 30000,      // Longer timeout for poor connections\n}\n</code></pre></p>"},{"location":"examples/workflows/#integration-examples","title":"Integration Examples","text":""},{"location":"examples/workflows/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>Scenario: Automated dependency management in GitHub Actions</p> .github/workflows/dependencies.yml<pre><code>name: Dependency Management\non:\n  schedule:\n    - cron: '0 9 * * 1'  # Weekly Monday morning\n\njobs:\n  update-deps:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Install dependencies\n        run: pip install -e .[dev]\n\n      - name: Run tests\n        run: pytest\n\n      # Manual dependency research with Tombo after automated checks\n      - name: Create dependency report\n        run: |\n          echo \"Review dependencies with Tombo in VS Code\"\n          echo \"- Hover over each package for update information\"\n          echo \"- Check documentation links for breaking changes\"\n          echo \"- Use version completion for upgrade planning\"\n</code></pre>"},{"location":"examples/workflows/#pre-commit-integration","title":"Pre-commit Integration","text":"<p>Scenario: Ensuring dependency consistency in team commits</p> .pre-commit-config.yaml<pre><code>repos:\n  - repo: local\n    hooks:\n      - id: check-dependencies\n        name: Check dependency versions\n        entry: python scripts/check_deps.py\n        language: system\n        files: pyproject.toml\n</code></pre> scripts/check_deps.py<pre><code>#!/usr/bin/env python3\n\"\"\"\nPre-commit hook to validate dependencies.\nUse Tombo in VS Code for manual verification of flagged packages.\n\"\"\"\nimport tomllib\nimport sys\n\ndef check_dependencies():\n    with open(\"pyproject.toml\", \"rb\") as f:\n        data = tomllib.load(f)\n\n    deps = data.get(\"project\", {}).get(\"dependencies\", [])\n\n    # Flag packages that might need attention\n    attention_needed = []\n    for dep in deps:\n        if \"&gt;=\" not in dep and \"~=\" not in dep and \"==\" not in dep:\n            attention_needed.append(dep)\n\n    if attention_needed:\n        print(\"\u26a0\ufe0f  Dependencies without version constraints:\")\n        for dep in attention_needed:\n            print(f\"   - {dep}\")\n        print(\"\\n\ud83d\udca1 Use Tombo in VS Code to add appropriate version constraints\")\n        return 1\n\n    return 0\n\nif __name__ == \"__main__\":\n    sys.exit(check_dependencies())\n</code></pre>"},{"location":"examples/workflows/#best-practices-summary","title":"Best Practices Summary","text":""},{"location":"examples/workflows/#daily-development","title":"Daily Development","text":"<ol> <li>Start with hover \u2192 Understand packages before using</li> <li>Use completion actively \u2192 Let Tombo suggest appropriate versions</li> <li>Check compatibility \u2192 Verify Python version requirements</li> <li>Read documentation \u2192 Click links for detailed package info</li> <li>Update gradually \u2192 Use hover to assess update safety</li> </ol>"},{"location":"examples/workflows/#team-workflows","title":"Team Workflows","text":"<ol> <li>Standardize constraints \u2192 Agree on constraint types (<code>~=</code> vs <code>&gt;=</code>)</li> <li>Document decisions \u2192 Use comments to explain version choices</li> <li>Review dependencies \u2192 Use Tombo during code review process</li> <li>Share knowledge \u2192 Discuss package alternatives found via research</li> <li>Monitor security \u2192 Check for yanked versions and security updates</li> </ol>"},{"location":"examples/workflows/#production-deployments","title":"Production Deployments","text":"<ol> <li>Pin critical dependencies \u2192 Use <code>==</code> for stability where needed</li> <li>Test thoroughly \u2192 Verify updates in staging environments</li> <li>Plan rollback strategy \u2192 Keep working versions documented</li> <li>Monitor performance \u2192 Check for regressions after updates</li> <li>Automate safely \u2192 Combine automated tools with manual verification</li> </ol> <p>Ready to put these workflows into practice?</p> <ul> <li>Version Completion \u2192 - Master the completion system</li> <li>Hover Information \u2192 - Deep dive into package research</li> <li>Smart Caching \u2192 - Optimize for your workflow</li> </ul>"},{"location":"features/hover-information/","title":"Hover Information","text":"<p>Get comprehensive package details instantly without leaving your editor. Tombo's hover system provides rich metadata, version history, and direct links to help you make informed dependency decisions.</p>"},{"location":"features/hover-information/#rich-package-metadata","title":"Rich Package Metadata","text":""},{"location":"features/hover-information/#what-youll-see","title":"What You'll See","text":"<p>Hover over any package name to see:</p> <p>\ud83d\udce6 Package Information: - Package name and description - Current version you're using - Latest available version - Package maintainer and author information</p> <p>\ud83d\udc0d Python Compatibility: - Required Python versions - Compatibility with your project's Python requirements - Platform-specific information (Windows, macOS, Linux)</p> <p>\ud83d\udcc5 Version History: - Recent version releases with dates - Version stability indicators - Changelog and release notes links</p> <p>\ud83d\udd17 Quick Links: - Direct link to PyPI package page - Documentation website - Source code repository - Issue tracker</p>"},{"location":"features/hover-information/#format-support","title":"Format Support","text":""},{"location":"features/hover-information/#pep-621-projects","title":"PEP 621 Projects","text":"pyproject.toml<pre><code>[project]\nrequires-python = \"&gt;=3.8\"\ndependencies = [\n    \"requests\",             # \u2190 Hover here for rich info\n    \"numpy&gt;=1.24.0\",        # \u2190 Package + version constraint info\n    \"django~=4.2.0\",        # \u2190 See compatible versions\n]\n</code></pre> <p>Hover Response: <pre><code>\ud83d\udce6 requests\nHTTP library for Python\n\n\ud83c\udff7\ufe0f Current: Not specified \u2192 Latest: 2.31.0\n\ud83d\udc0d Python: &gt;=3.7 (\u2705 Compatible with &gt;=3.8)\n\ud83d\udcc5 Released: Jul 12, 2023\n\nRecent versions: 2.31.0, 2.30.0, 2.29.0\n\ud83d\udd17 PyPI | Documentation | GitHub\n</code></pre></p>"},{"location":"features/hover-information/#poetry-projects","title":"Poetry Projects","text":"pyproject.toml<pre><code>[tool.poetry.dependencies]\npython = \"^3.9\"\nfastapi = \"^0.100.0\"        # \u2190 Hover for FastAPI info\nuvicorn = {extras = [\"standard\"], version = \"^0.20.0\"}\n\n[tool.poetry.group.dev.dependencies]\npytest = \"^7.0\"             # \u2190 Development dependency info\n</code></pre>"},{"location":"features/hover-information/#requirements-files","title":"Requirements Files","text":"requirements.txt<pre><code>django&gt;=4.2.0               # \u2190 Web framework info\npsycopg2-binary&gt;=2.9.0      # \u2190 Database adapter details\ncelery[redis]&gt;=5.2.0        # \u2190 Task queue with extras\n</code></pre>"},{"location":"features/hover-information/#advanced-information","title":"Advanced Information","text":""},{"location":"features/hover-information/#version-analysis","title":"Version Analysis","text":"<p>Constraint Evaluation: - Shows which versions match your constraints - Highlights potential compatibility issues - Suggests optimal version ranges - Warns about deprecated or yanked versions</p> <p>Example Analysis: <pre><code>dependencies = [\"numpy&gt;=1.20.0,&lt;2.0.0\"]\n</code></pre></p> <p>Hover Shows: <pre><code>\ud83d\udce6 numpy\nNumerical computing library\n\n\ud83c\udff7\ufe0f Constraint: &gt;=1.20.0,&lt;2.0.0\n\u2705 Latest matching: 1.24.3 (Jun 26, 2023)\n\ud83d\udea7 Latest overall: 2.0.0rc1 (excluded by constraint)\n\nMatching versions: 1.24.3, 1.24.2, 1.24.1, 1.23.5\n\u26a0\ufe0f Note: v2.0.0 available but excluded by &lt;2.0.0\n</code></pre></p>"},{"location":"features/hover-information/#dependency-extras","title":"Dependency Extras","text":"<p>Extra Information Display: <pre><code>dependencies = [\n    \"fastapi[all]\",         # \u2190 Shows available extras\n    \"sqlalchemy[postgresql,asyncio]\"  # \u2190 Multiple extras info\n]\n</code></pre></p> <p>Hover Response: <pre><code>\ud83d\udce6 fastapi[all]\nModern web framework for Python\n\n\ud83c\udff7\ufe0f Current: [all] extras selected\n\ud83d\udce6 Extras included: all (uvicorn, jinja2, python-multipart, ...)\n\nAvailable extras:\n\u2022 all - Complete FastAPI experience\n\u2022 standard - Basic FastAPI with common deps\n\u2022 dev - Development dependencies\n</code></pre></p>"},{"location":"features/hover-information/#smart-context-awareness","title":"Smart Context Awareness","text":""},{"location":"features/hover-information/#python-version-compatibility","title":"Python Version Compatibility","text":"<p>Project Context: pyproject.toml<pre><code>[project]\nrequires-python = \"&gt;=3.8\"   # \u2190 Affects compatibility display\n</code></pre></p> <p>Hover Adaptation: - \u2705 Compatible - Green indicators for usable versions - \u274c Incompatible - Red warnings for unsupported versions - \ud83d\udea7 Partial - Yellow cautions for edge cases</p>"},{"location":"features/hover-information/#environment-integration","title":"Environment Integration","text":"<p>Virtual Environment Detection: - Shows versions installed in current environment - Compares with PyPI latest versions - Indicates if updates are available - Warns about version mismatches</p>"},{"location":"features/hover-information/#performance-features","title":"Performance Features","text":""},{"location":"features/hover-information/#smart-caching","title":"Smart Caching","text":"<p>Multi-tier Caching: 1. Instant Response - Cached packages load in ~5-10ms 2. Background Updates - Refreshes stale data quietly 3. Offline Capability - Works without internet after initial fetch</p> <p>Cache Behavior: - First hover - Fetches fresh data from PyPI (~200-500ms) - Subsequent hovers - Instant from memory/disk cache - Auto-refresh - Updates stale data (configurable TTL)</p>"},{"location":"features/hover-information/#network-optimization","title":"Network Optimization","text":"<p>Efficient Data Fetching: - Batch requests - Multiple packages loaded together - Incremental updates - Only new data downloaded - Compressed responses - Faster data transfer - Connection pooling - Reuses network connections</p>"},{"location":"features/hover-information/#customization","title":"Customization","text":""},{"location":"features/hover-information/#display-preferences","title":"Display Preferences","text":"<p>Configure what information appears in hover tooltips:</p> VS Code Settings<pre><code>{\n    \"tombo.hover.showVersionHistory\": true,\n    \"tombo.hover.showCompatibility\": true,\n    \"tombo.hover.showLinks\": true,\n    \"tombo.hover.maxRecentVersions\": 5\n}\n</code></pre>"},{"location":"features/hover-information/#information-density","title":"Information Density","text":"<p>Compact Mode: <pre><code>{\n    \"tombo.hover.compact\": true  // Shorter, essential info only\n}\n</code></pre></p> <p>Detailed Mode: <pre><code>{\n    \"tombo.hover.detailed\": true  // Full metadata display\n}\n</code></pre></p>"},{"location":"features/hover-information/#keyboard-navigation","title":"Keyboard Navigation","text":""},{"location":"features/hover-information/#hover-triggers","title":"Hover Triggers","text":"<p>Mouse Hover: - Simply hover over package names - Works in all supported file types - Automatic activation and dismissal</p> <p>Keyboard Hover: - Windows/Linux: <code>Ctrl+K Ctrl+I</code> - macOS: <code>Cmd+K Cmd+I</code> - Position cursor on package name, then use shortcut</p>"},{"location":"features/hover-information/#link-navigation","title":"Link Navigation","text":"<p>In Hover Tooltip: - Click links - Opens in default browser - Ctrl+Click - Opens in new browser tab - Copy link - Right-click context menu</p>"},{"location":"features/hover-information/#real-world-examples","title":"Real-World Examples","text":""},{"location":"features/hover-information/#web-development","title":"Web Development","text":"FastAPI Project<pre><code>[project]\ndependencies = [\n    \"fastapi\",              # \u2190 See web framework details\n    \"uvicorn[standard]\",    # \u2190 ASGI server with extras\n    \"pydantic&gt;=2.0.0\",      # \u2190 Data validation v2 info\n    \"sqlalchemy&gt;=2.0.0\",    # \u2190 Modern ORM features\n]\n</code></pre> <p>Hover Benefits: - Check FastAPI latest features and breaking changes - Understand Uvicorn extras and performance implications - Verify Pydantic v2 compatibility and migration requirements - See SQLAlchemy 2.0 improvements and async support</p>"},{"location":"features/hover-information/#data-science","title":"Data Science","text":"ML Project<pre><code>[project]\ndependencies = [\n    \"numpy\",                # \u2190 Core numerical computing\n    \"pandas&gt;=2.0.0\",        # \u2190 DataFrame library updates\n    \"scikit-learn\",         # \u2190 ML algorithms and tools\n    \"matplotlib&gt;=3.7.0\",    # \u2190 Plotting and visualization\n]\n</code></pre> <p>Information Value: - NumPy version compatibility with other scientific packages - Pandas 2.0 performance improvements and breaking changes - Scikit-learn algorithm updates and new features - Matplotlib rendering backends and figure formats</p>"},{"location":"features/hover-information/#troubleshooting","title":"Troubleshooting","text":""},{"location":"features/hover-information/#hover-not-appearing","title":"Hover Not Appearing","text":"<p>Common Issues:</p> <ol> <li>File type - Ensure you're in supported files</li> <li>Package name - Check spelling and case sensitivity</li> <li>Network - First hover requires internet connection</li> <li>VS Code settings - Verify hover is enabled globally</li> </ol> <p>Quick Fixes:</p> VS Code Settings<pre><code>{\n    \"editor.hover.enabled\": true,\n    \"editor.hover.delay\": 300,\n    \"tombo.hover.enabled\": true\n}\n</code></pre>"},{"location":"features/hover-information/#incomplete-information","title":"Incomplete Information","text":"<p>Potential Causes:</p> <ul> <li>New packages - Recently published packages may have limited metadata</li> <li>Private packages - Internal packages won't have PyPI information</li> <li>Network issues - Timeout or connectivity problems</li> <li>Cache corruption - Clear cache via Command Palette</li> </ul>"},{"location":"features/hover-information/#performance-issues","title":"Performance Issues","text":"<p>Optimization Steps:</p> <ol> <li>Check network speed - Slow connections affect first hover</li> <li>Clear cache - Command Palette: \"Tombo: Clear Cache\"</li> <li>Reduce hover delay - Faster response in editor settings</li> <li>Check system resources - High CPU/memory usage affects performance</li> </ol>"},{"location":"features/hover-information/#integration-tips","title":"Integration Tips","text":""},{"location":"features/hover-information/#with-other-extensions","title":"With Other Extensions","text":"<p>Python Extension: - Works alongside official Python extension - Complements IntelliSense and code navigation - Shares Python environment detection</p> <p>GitLens: - Package information complements code history - See when dependencies were added/changed - Track package version evolution</p>"},{"location":"features/hover-information/#development-workflow","title":"Development Workflow","text":"<p>Dependency Research: 1. Hover first - Get quick overview 2. Click PyPI link - Detailed documentation 3. Check GitHub - Source code and issues 4. Read changelogs - Breaking changes and new features</p> <p>Version Selection: 1. Hover current - See what you have 2. Compare latest - Check for updates 3. Review compatibility - Python version requirements 4. Update gradually - Test changes incrementally</p>"},{"location":"features/hover-information/#next-steps","title":"Next Steps","text":"<p>Explore related Tombo features:</p> <ul> <li>Version Completion \u2192 - Intelligent version suggestions</li> <li>Smart Caching \u2192 - Performance optimization</li> <li>Configuration \u2192 - Customize hover behavior</li> </ul>"},{"location":"features/overview/","title":"Features Overview","text":"<p>Tombo brings powerful Python package management capabilities directly to VS Code. Here's everything Tombo can do to supercharge your Python development workflow.</p>"},{"location":"features/overview/#core-features","title":"Core Features","text":""},{"location":"features/overview/#rich-hover-information","title":"Rich Hover Information","text":"<p>Get comprehensive package details without leaving your editor:</p> <ul> <li>Package description - What the package does</li> <li>Latest version - Current stable release</li> <li>Python compatibility - Supported Python versions</li> <li>Version history - Recent releases with dates</li> <li>Quick links - Direct access to PyPI, docs, and source code</li> <li>\u26a0\ufe0f Deprecation warnings - Know if packages are deprecated</li> </ul> <p>Example: pyproject.toml<pre><code>[project]\ndependencies = [\n    \"requests\",  # \u2190 Hover here to see rich package info\n]\n</code></pre></p> <p>What you see: <pre><code>\ud83d\udce6 requests\nHTTP library for Python\n\n\ud83c\udff7\ufe0f Latest: 2.31.0 (Jul 12, 2023)\n\ud83d\udc0d Python: &gt;=3.7\n\ud83d\udcc5 Recent: 2.31.0, 2.30.0, 2.29.0\n\n\ud83d\udd17 PyPI | Documentation | GitHub\n</code></pre></p>"},{"location":"features/overview/#intelligent-version-completion","title":"Intelligent Version Completion","text":"<p>Smart version suggestions as you type:</p> <ul> <li>Real-time suggestions - Version completions as you type</li> <li>Compatibility indicators - Visual cues for Python compatibility</li> <li>Pre-release support - Optional alpha/beta/rc versions</li> <li>Yanked version handling - Deprecated versions shown last</li> <li>Constraint-aware - Understands <code>&gt;=</code>, <code>~=</code>, <code>^</code>, etc.</li> </ul> <p>Example: pyproject.toml<pre><code>[project]\ndependencies = [\n    \"numpy&gt;=\",  # \u2190 Type here, get version suggestions\n]\n</code></pre></p> <p>Completion dropdown shows: <pre><code>1.24.3    \u2705 (Latest stable)\n1.24.2    \u2705\n1.24.1    \u2705\n1.25.0rc1 \ud83d\udea7 (Pre-release)\n1.23.5    \u274c (Yanked)\n</code></pre></p>"},{"location":"features/overview/#smart-caching-system","title":"Smart Caching System","text":"<p>Optimized performance with intelligent caching:</p> <ul> <li>First lookup online - Fresh data from PyPI</li> <li>Instant subsequent access - Lightning-fast from cache</li> <li>Offline capability - Works without internet after first lookup</li> <li>90% API reduction - Dramatically fewer network requests</li> <li>Configurable TTL - Customize cache duration</li> <li>Memory + disk caching - Persists between sessions</li> </ul> <p>Performance:</p> <ul> <li>First hover: ~200-500ms (network dependent)</li> <li>Cached hover: ~5-10ms (instant)</li> <li>Cache hit rate: ~95% in typical usage</li> </ul>"},{"location":"features/overview/#universal-format-support","title":"Universal Format Support","text":"<p>Works with all Python packaging standards:</p> PEP 621 (Modern)Poetry v1Poetry v2Requirements.txt pyproject.toml<pre><code>[project]\ndependencies = [\n    \"requests&gt;=2.28.0\",\n    \"numpy~=1.24\",\n]\n\n[project.optional-dependencies]\ndev = [\"pytest&gt;=7.0\"]\n</code></pre> pyproject.toml<pre><code>[tool.poetry.dependencies]\npython = \"^3.9\"\nrequests = \"^2.28.0\"\nnumpy = \"~1.24\"\n\n[tool.poetry.group.dev.dependencies]\npytest = \"^7.0\"\n</code></pre> pyproject.toml<pre><code>[tool.poetry.dependencies]\npython = \"^3.9\"\nrequests = \"^2.28.0\"\npandas = \"pandas (&gt;=2.0,&lt;3.0)\"  # Parentheses syntax\n</code></pre> requirements.txt<pre><code>requests&gt;=2.28.0\nnumpy~=1.24.0\npytest&gt;=7.0  # Development dependency\n</code></pre>"},{"location":"features/overview/#advanced-features","title":"Advanced Features","text":""},{"location":"features/overview/#error-prevention","title":"Error Prevention","text":"<p>Catch common issues before they happen:</p> <ul> <li>Version constraint validation - Invalid syntax highlighting</li> <li>Python compatibility checking - Warns about incompatible versions</li> <li>Deprecated package detection - Alerts for deprecated packages</li> <li>Yanked version warnings - Prevents using withdrawn releases</li> </ul>"},{"location":"features/overview/#visual-indicators","title":"Visual Indicators","text":"<p>Clear visual feedback in your editor:</p> <ul> <li>\u2705 Compatible versions - Green indicators for working versions</li> <li>\u274c Incompatible versions - Red indicators for problematic versions</li> <li>\ud83d\udea7 Pre-release markers - Special indicators for alpha/beta/rc</li> <li>\u26a0\ufe0f Deprecation warnings - Alerts for deprecated packages</li> <li>\ud83d\udccd Status bar integration - Current operation status</li> </ul>"},{"location":"features/overview/#quick-actions","title":"Quick Actions","text":"<p>Right-click context menu actions:</p> <ul> <li>Update to latest - One-click version updates</li> <li>Change constraint type - Switch between <code>&gt;=</code>, <code>~=</code>, <code>^</code></li> <li>Add optional dependency - Move to optional sections</li> <li>View on PyPI - Open package page in browser</li> <li>Copy version - Copy version strings to clipboard</li> </ul>"},{"location":"features/overview/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>Efficient keyboard-driven workflow:</p> Action Windows/Linux macOS Description Hover Hover mouse Hover mouse Show package info Completion <code>Ctrl+Space</code> <code>Cmd+Space</code> Trigger version completion Go to Definition <code>F12</code> <code>F12</code> Open PyPI page Quick Info <code>Ctrl+K Ctrl+I</code> <code>Cmd+K Cmd+I</code> Keyboard hover Format Document <code>Shift+Alt+F</code> <code>Shift+Option+F</code> Format TOML/requirements"},{"location":"features/overview/#file-format-support","title":"File Format Support","text":""},{"location":"features/overview/#supported-file-types","title":"Supported File Types","text":"<p>Tombo automatically activates for these file patterns:</p> Pattern Description Example <code>pyproject.toml</code> Modern Python projects PEP 621, Poetry, Hatch <code>requirements*.txt</code> Pip requirements files <code>requirements.txt</code>, <code>requirements-dev.txt</code> <code>*.requirements</code> Alternative requirements <code>base.requirements</code> <code>requirements*.in</code> Pip-tools input files <code>requirements.in</code> <code>Pipfile</code> Pipenv format Basic support <code>pyproject.lock</code> Lock files Read-only support"},{"location":"features/overview/#section-recognition","title":"Section Recognition","text":"<p>Tombo understands these dependency sections:</p> <p>PEP 621:</p> <ul> <li><code>project.dependencies</code> - Runtime dependencies</li> <li><code>project.optional-dependencies.*</code> - Optional dependency groups</li> </ul> <p>Poetry:</p> <ul> <li><code>tool.poetry.dependencies</code> - Runtime dependencies</li> <li><code>tool.poetry.group.*.dependencies</code> - Dependency groups</li> <li><code>tool.poetry.dev-dependencies</code> - Legacy dev dependencies</li> </ul> <p>Requirements: - All lines with package specifications - Comments and blank lines ignored</p>"},{"location":"features/overview/#integration-features","title":"Integration Features","text":""},{"location":"features/overview/#vs-code-integration","title":"VS Code Integration","text":"<ul> <li>Native completion provider - Seamless VS Code experience</li> <li>Hover provider - Rich tooltips on hover</li> <li>Status bar integration - Current operation feedback</li> <li>Output panel logging - Debug information when needed</li> <li>Command palette - Cache management commands</li> </ul>"},{"location":"features/overview/#network-features","title":"Network Features","text":"<ul> <li>Proxy support - Works with corporate proxies</li> <li>Custom PyPI indexes - Support for private repositories</li> <li>SSL/TLS handling - Secure HTTPS connections</li> <li>Retry logic - Robust error handling</li> <li>Rate limiting - Respectful API usage</li> </ul>"},{"location":"features/overview/#performance-features","title":"Performance Features","text":"<ul> <li>Lazy loading - Only loads when needed</li> <li>Background processing - Non-blocking operations</li> <li>Memory management - Efficient resource usage</li> <li>Bundle optimization - Small extension size (~250KB)</li> <li>Startup optimization - Fast VS Code startup</li> </ul>"},{"location":"features/overview/#privacy-security","title":"Privacy &amp; Security","text":""},{"location":"features/overview/#privacy-first-design","title":"Privacy First Design","text":"<ul> <li>Zero telemetry - No usage tracking</li> <li>Local processing - Data stays on your machine</li> <li>Optional networking - Only for package lookups</li> <li>No accounts required - Works without registration</li> </ul>"},{"location":"features/overview/#security-features","title":"Security Features","text":"<ul> <li>HTTPS only - Secure PyPI connections</li> <li>Input validation - Prevents malicious input</li> <li>Source verification - Validates package data</li> <li>\u26a1 Minimal permissions - Least privilege principle</li> </ul>"},{"location":"features/overview/#extensibility","title":"Extensibility","text":""},{"location":"features/overview/#configuration-options","title":"Configuration Options","text":"<p>Highly customizable through VS Code settings:</p> <ul> <li>PyPI server URL - Use custom or corporate indexes</li> <li>Cache settings - TTL, size limits, enable/disable</li> <li>Visual preferences - Custom decorators and colors</li> <li>Debug options - Logging levels and outputs</li> <li>Network settings - Proxy, timeout, retry configuration</li> </ul>"},{"location":"features/overview/#developer-api","title":"Developer API","text":"<p>For extension developers:</p> <ul> <li>Well-documented architecture - Clean TypeScript codebase</li> <li>Plugin system ready - Extensible provider pattern</li> <li>Open source - MIT licensed, community contributions welcome</li> <li>Modern stack - ES2021, TypeScript, modern VS Code APIs</li> </ul>"},{"location":"features/overview/#whats-next","title":"What's Next?","text":"<p>Ready to dive deeper into specific features?</p> <ul> <li>Version Completion \u2192 - Master intelligent version suggestions</li> <li>Hover Information \u2192 - Learn about rich package tooltips</li> <li>Smart Caching \u2192 - Understand performance optimization</li> <li>Usage Examples \u2192 - See features in action</li> </ul> <p>Or jump straight to hands-on examples:</p> <ul> <li>PEP 621 Projects \u2192 - Modern Python packaging</li> <li>Poetry Projects \u2192 - Poetry dependency management</li> <li>Requirements Files \u2192 - Traditional pip requirements</li> </ul>"},{"location":"features/smart-caching/","title":"Smart Caching","text":"<p>Experience lightning-fast package information with Tombo's intelligent caching system. Reduce API calls by 90% while maintaining fresh, accurate data from PyPI.</p>"},{"location":"features/smart-caching/#how-smart-caching-works","title":"How Smart Caching Works","text":"<p>Tombo implements a multi-tier caching strategy that balances performance with data freshness:</p> <ol> <li>First lookup - Fetches fresh data from PyPI (~200-500ms)</li> <li>Memory cache - Instant access during VS Code session (~5-10ms)</li> <li>Disk cache - Persistent storage between sessions (~10-20ms)</li> <li>Background refresh - Updates stale data quietly</li> </ol>"},{"location":"features/smart-caching/#cache-architecture","title":"Cache Architecture","text":""},{"location":"features/smart-caching/#multi-level-system","title":"Multi-Level System","text":"<p>Memory Cache (L1): - Storage: RAM during VS Code session - Speed: ~5-10ms response time - Capacity: 1000 packages by default - Persistence: Cleared when VS Code closes</p> <p>Disk Cache (L2): - Storage: Local file system - Speed: ~10-20ms response time - Capacity: Unlimited (configurable cleanup) - Persistence: Survives VS Code restarts</p> <p>Network Fallback (L3): - Storage: PyPI servers - Speed: ~200-500ms response time - Capacity: All PyPI packages - Persistence: Always up-to-date</p>"},{"location":"features/smart-caching/#cache-strategy","title":"Cache Strategy","text":"<p>LRU + TTL Design: - LRU (Least Recently Used) - Evicts old packages when cache is full - TTL (Time To Live) - Refreshes stale data automatically - Smart prefetching - Preloads related packages - Incremental updates - Only downloads changed data</p>"},{"location":"features/smart-caching/#performance-benefits","title":"Performance Benefits","text":""},{"location":"features/smart-caching/#speed-comparison","title":"Speed Comparison","text":"Scenario Without Cache With Cache Improvement First hover 300ms 300ms Baseline Second hover 300ms 5ms 98% faster Third hover 300ms 5ms 98% faster Offline usage \u274c Fails \u2705 5ms Infinite"},{"location":"features/smart-caching/#real-world-impact","title":"Real-World Impact","text":"<p>Development Workflow: - Package research - Instant hover responses - Version exploration - Fast completion suggestions - Dependency updates - Quick compatibility checks - Offline development - Works without internet</p> <p>Team Benefits: - Reduced bandwidth - Shared cache benefits - Faster builds - Less waiting for package info - Consistent data - Same versions across team - Network resilience - Works during outages</p>"},{"location":"features/smart-caching/#cache-configuration","title":"Cache Configuration","text":""},{"location":"features/smart-caching/#basic-settings","title":"Basic Settings","text":"VS Code Settings<pre><code>{\n    \"tombo.cache.enabled\": true,        // Enable/disable caching\n    \"tombo.cache.ttl\": 86400,           // 24 hours in seconds\n    \"tombo.cache.maxSize\": 1000,        // Max packages in memory\n    \"tombo.cache.diskSizeLimit\": \"100MB\" // Max disk cache size\n}\n</code></pre>"},{"location":"features/smart-caching/#advanced-configuration","title":"Advanced Configuration","text":"<p>Performance Tuning: High Performance Setup<pre><code>{\n    \"tombo.cache.ttl\": 604800,          // 7 days (longer cache)\n    \"tombo.cache.maxSize\": 2000,        // Larger memory cache\n    \"tombo.cache.prefetchDepth\": 2,     // Preload dependency chains\n    \"tombo.cache.backgroundRefresh\": true // Update cache quietly\n}\n</code></pre></p> <p>Development Setup: Development Environment<pre><code>{\n    \"tombo.cache.ttl\": 3600,            // 1 hour (fresher data)\n    \"tombo.cache.maxSize\": 500,         // Smaller memory footprint\n    \"tombo.cache.validateOnStartup\": true, // Check cache integrity\n    \"tombo.cache.debugLogging\": true    // Detailed cache logging\n}\n</code></pre></p> <p>Corporate/Offline Setup: Enterprise Environment<pre><code>{\n    \"tombo.cache.ttl\": 2592000,         // 30 days (very long cache)\n    \"tombo.cache.persistOffline\": true, // Keep working offline\n    \"tombo.cache.maxSize\": 5000,        // Large corporate projects\n    \"tombo.cache.compression\": true     // Compress disk storage\n}\n</code></pre></p>"},{"location":"features/smart-caching/#cache-behavior","title":"Cache Behavior","text":""},{"location":"features/smart-caching/#automatic-management","title":"Automatic Management","text":"<p>Cache Population: 1. On-demand loading - Packages cached when first accessed 2. Bulk prefetching - Related packages loaded together 3. Dependency chains - Transitive dependencies preloaded 4. Popular packages - Common packages cached proactively</p> <p>Cache Invalidation: 1. TTL expiration - Automatic refresh after time limit 2. Manual refresh - Command palette: \"Tombo: Clear Cache\" 3. Version detection - New versions trigger cache updates 4. Error recovery - Corrupted cache automatically rebuilt</p>"},{"location":"features/smart-caching/#cache-states","title":"Cache States","text":"<p>Fresh Cache: <pre><code>\ud83d\udce6 requests (cached 2 minutes ago)\nLatest: 2.31.0 \u2705 Fresh data\nResponse: ~5ms from memory\n</code></pre></p> <p>Stale Cache: <pre><code>\ud83d\udce6 numpy (cached 25 hours ago)\nLatest: 1.24.3 \ud83d\udd04 Refreshing in background\nResponse: ~5ms from cache + background update\n</code></pre></p> <p>Cold Cache: <pre><code>\ud83d\udce6 fastapi (not cached)\nLatest: 0.100.0 \ud83c\udf10 Fetching from PyPI\nResponse: ~300ms + caching for next time\n</code></pre></p>"},{"location":"features/smart-caching/#offline-capabilities","title":"Offline Capabilities","text":""},{"location":"features/smart-caching/#what-works-offline","title":"What Works Offline","text":"<p>\u2705 Fully Functional: - Hover information - For previously cached packages - Version completion - Using cached version lists - Compatibility checks - Based on cached metadata - Package descriptions - From local cache</p> <p>\u26a0\ufe0f Limited Functionality: - New packages - Only if previously cached - Latest versions - May show stale data - Fresh metadata - Uses last cached information</p> <p>\u274c Requires Internet: - First package lookup - Initial cache population - Cache refresh - Updating stale information - New package discovery - Packages never seen before</p>"},{"location":"features/smart-caching/#offline-preparation","title":"Offline Preparation","text":"<p>Before Going Offline: 1. Warm the cache - Hover over important packages 2. Trigger completion - Access version lists for key dependencies 3. Check cache status - Verify packages are cached 4. Update TTL - Extend cache lifetime if needed</p> Cache Warming Script<pre><code># Open your project files and hover over each dependency\n# This ensures all packages are cached before offline work\n</code></pre>"},{"location":"features/smart-caching/#cache-management","title":"Cache Management","text":""},{"location":"features/smart-caching/#manual-cache-control","title":"Manual Cache Control","text":"<p>Command Palette Actions: - \"Tombo: Clear Cache\" - Remove all cached data - \"Tombo: Refresh Cache\" - Update all cached packages - \"Tombo: Cache Statistics\" - View cache usage and performance - \"Tombo: Validate Cache\" - Check cache integrity</p>"},{"location":"features/smart-caching/#cache-monitoring","title":"Cache Monitoring","text":"<p>Statistics Display: <pre><code>\ud83d\udcca Tombo Cache Statistics\n\nMemory Cache:\n\u2022 Size: 847 packages (84.7% of limit)\n\u2022 Hit Rate: 94.2% (excellent)\n\u2022 Average Response: 6ms\n\nDisk Cache:\n\u2022 Size: 45.2 MB (45.2% of limit)\n\u2022 Files: 2,156 cache entries\n\u2022 Oldest Entry: 6 days ago\n\nNetwork Usage:\n\u2022 API Calls Saved: 1,847 (94.2% reduction)\n\u2022 Bandwidth Saved: ~12.4 MB\n\u2022 Time Saved: ~9.2 minutes\n</code></pre></p>"},{"location":"features/smart-caching/#cache-troubleshooting","title":"Cache Troubleshooting","text":"<p>Common Issues:</p> <ol> <li>Stale Data - Package shows old version information</li> <li>Cache Corruption - Errors loading cached data</li> <li>High Memory Usage - Cache using too much RAM</li> <li>Disk Space - Cache taking too much storage</li> </ol> <p>Solutions:</p> Cache Reset Configuration<pre><code>{\n    \"tombo.cache.enabled\": false,       // Temporarily disable\n    \"tombo.cache.clearOnStartup\": true, // Fresh start\n    \"tombo.cache.validateOnLoad\": true  // Check integrity\n}\n</code></pre>"},{"location":"features/smart-caching/#performance-optimization","title":"Performance Optimization","text":""},{"location":"features/smart-caching/#memory-efficiency","title":"Memory Efficiency","text":"<p>Smart Eviction: - LRU algorithm - Removes least used packages first - Size-based limits - Prevents unlimited growth - Compression - Reduces memory footprint - Lazy loading - Only loads when needed</p> <p>Memory Usage Patterns: <pre><code>Package Size Estimation:\n\u2022 Basic metadata: ~2KB per package\n\u2022 Version history: ~5KB per package\n\u2022 Full cache entry: ~10KB per package\n\u2022 1000 packages: ~10MB memory usage\n</code></pre></p>"},{"location":"features/smart-caching/#disk-management","title":"Disk Management","text":"<p>Automatic Cleanup: - Size limits - Removes old entries when limit reached - Age-based removal - Deletes entries older than threshold - Compression - Reduces disk space usage - Integrity checks - Validates cache consistency</p>"},{"location":"features/smart-caching/#network-optimization","title":"Network Optimization","text":"<p>Efficient Updates: - Delta updates - Only download changed information - Batch requests - Multiple packages in single API call - Connection reuse - HTTP connection pooling - Compression - Gzip/deflate for data transfer</p>"},{"location":"features/smart-caching/#best-practices","title":"Best Practices","text":""},{"location":"features/smart-caching/#cache-strategy_1","title":"Cache Strategy","text":"<p>For Individual Developers: <pre><code>{\n    \"tombo.cache.ttl\": 86400,           // 24 hours (daily refresh)\n    \"tombo.cache.maxSize\": 1000,        // Standard size\n    \"tombo.cache.backgroundRefresh\": true // Seamless updates\n}\n</code></pre></p> <p>For Development Teams: <pre><code>{\n    \"tombo.cache.ttl\": 43200,           // 12 hours (more frequent updates)\n    \"tombo.cache.maxSize\": 2000,        // Larger projects\n    \"tombo.cache.sharedCache\": true     // Team cache sharing (if available)\n}\n</code></pre></p> <p>For Offline Work: <pre><code>{\n    \"tombo.cache.ttl\": 2592000,         // 30 days (long offline periods)\n    \"tombo.cache.maxSize\": 5000,        // Large cache for self-sufficiency\n    \"tombo.cache.persistOffline\": true  // Maintain offline capability\n}\n</code></pre></p>"},{"location":"features/smart-caching/#cache-warming","title":"Cache Warming","text":"<p>Project Setup: 1. Open dependency files - pyproject.toml, requirements.txt 2. Hover over packages - Cache package metadata 3. Trigger completions - Cache version information 4. Check related packages - Cache dependency chains</p> <p>Automation Ideas: - Pre-commit hooks - Warm cache during development - CI integration - Cache popular packages for team - Project templates - Include cache warming scripts</p>"},{"location":"features/smart-caching/#next-steps","title":"Next Steps","text":"<p>Learn about related Tombo features:</p> <ul> <li>Version Completion \u2192 - Fast version suggestions powered by cache</li> <li>Hover Information \u2192 - Instant package details from cache</li> <li>Configuration \u2192 - Fine-tune cache behavior</li> </ul>"},{"location":"features/version-completion/","title":"Version Completion","text":"<p>Experience intelligent version suggestions that adapt to your project's needs. Tombo's version completion system understands Python packaging constraints and provides contextually relevant suggestions.</p>"},{"location":"features/version-completion/#how-it-works","title":"How It Works","text":"<p>Tombo's version completion triggers when you type constraint operators, providing smart suggestions based on:</p> <ul> <li>Package availability on PyPI</li> <li>Python version compatibility with your project</li> <li>Constraint type you're using</li> <li>Release stability (stable, pre-release, yanked)</li> </ul>"},{"location":"features/version-completion/#trigger-characters","title":"Trigger Characters","text":"<p>Version completion activates automatically when you type these operators:</p> Operator Description Example <code>&gt;=</code> Greater than or equal <code>numpy&gt;=</code> <code>==</code> Exactly equal <code>django==</code> <code>~=</code> Compatible release <code>requests~=</code> <code>!=</code> Not equal (exclusion) <code>urllib3!=</code> <code>&gt;</code> Greater than <code>python&gt;</code> <code>&lt;</code> Less than <code>setuptools&lt;</code> <code>^</code> Caret (Poetry) <code>click^</code> <code>~</code> Tilde (Poetry) <code>fastapi~</code>"},{"location":"features/version-completion/#format-support","title":"Format Support","text":""},{"location":"features/version-completion/#pep-621-dependencies","title":"PEP 621 Dependencies","text":"pyproject.toml<pre><code>[project]\ndependencies = [\n    \"requests&gt;=\",           # \u2190 Type here for version completion\n    \"numpy==\",              # \u2190 Exact version suggestions\n    \"django~=4.0\",          # \u2190 Compatible release options\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest&gt;=7.\",           # \u2190 Shows 7.x versions\n    \"black&gt;=23.0.0\",        # \u2190 Recent formatting versions\n]\n</code></pre>"},{"location":"features/version-completion/#poetry-dependencies","title":"Poetry Dependencies","text":"pyproject.toml<pre><code>[tool.poetry.dependencies]\npython = \"^3.9\"\nrequests = \"^2.\"            # \u2190 Caret constraint completion\nclick = \"~8.1\"              # \u2190 Tilde constraint completion\nhttpx = \"&gt;=0.24.0,&lt;1.0\"     # \u2190 Complex constraints supported\n\n[tool.poetry.group.dev.dependencies]\npytest = \"^7.0\"             # \u2190 Development dependencies\n</code></pre>"},{"location":"features/version-completion/#requirements-files","title":"Requirements Files","text":"requirements.txt<pre><code>requests&gt;=2.               # \u2190 Traditional pip constraints\nnumpy==1.24.               # \u2190 Specific version families\ndjango~=4.2.0              # \u2190 Compatible release operator\npytest&gt;=7.0,&lt;8.0           # \u2190 Range constraints\n</code></pre>"},{"location":"features/version-completion/#completion-features","title":"Completion Features","text":""},{"location":"features/version-completion/#smart-filtering","title":"Smart Filtering","text":"<p>Version Relevance:</p> <ul> <li>Latest versions first - Most recent stable releases prioritized</li> <li>Stability indicators - Stable, pre-release, and yanked versions marked</li> <li>Compatibility filtering - Only shows Python-compatible versions</li> <li>Constraint-aware - Understands semantic versioning rules</li> </ul> <p>Visual Indicators:</p> <ul> <li>\u2705 Stable versions - Recommended choices</li> <li>\ud83d\udea7 Pre-release versions - Alpha, beta, release candidates</li> <li>\u274c Yanked versions - Deprecated or problematic releases</li> <li>\ud83d\udcc5 Release dates - Recency information</li> </ul>"},{"location":"features/version-completion/#contextual-intelligence","title":"Contextual Intelligence","text":"<p>Project Awareness:</p> pyproject.toml<pre><code>[project]\nrequires-python = \"&gt;=3.8\"   # \u2190 Affects version filtering\n\ndependencies = [\n    \"numpy&gt;=\",               # \u2190 Only shows Python 3.8+ compatible versions\n]\n</code></pre> <p>Constraint Understanding:</p> <ul> <li>Caret (<code>^</code>) - Shows major-version compatible releases</li> <li>Tilde (<code>~</code>) - Shows patch-version compatible releases</li> <li>Range constraints - Respects complex version expressions</li> <li>Exclusions - Avoids showing explicitly excluded versions</li> </ul>"},{"location":"features/version-completion/#performance-features","title":"Performance Features","text":""},{"location":"features/version-completion/#smart-caching","title":"Smart Caching","text":"<p>Multi-level Caching:</p> <ol> <li>Memory Cache - Instant access during VS Code session</li> <li>Disk Cache - Persistent between sessions (24h TTL)</li> <li>Incremental Updates - Only fetches new versions when needed</li> </ol> <p>Cache Behavior:</p> <ul> <li>First completion - ~200-500ms (fetches from PyPI)</li> <li>Subsequent completions - ~5-10ms (instant from cache)</li> <li>Offline capability - Works without internet after initial fetch</li> <li>Smart invalidation - Refreshes stale data automatically</li> </ul>"},{"location":"features/version-completion/#network-optimization","title":"Network Optimization","text":"<p>Efficient API Usage:</p> <ul> <li>Batch requests - Multiple packages in single API call when possible</li> <li>Incremental fetching - Only downloads new version data</li> <li>Rate limiting - Respectful PyPI API usage</li> <li>Retry logic - Robust error handling with exponential backoff</li> </ul>"},{"location":"features/version-completion/#advanced-usage","title":"Advanced Usage","text":""},{"location":"features/version-completion/#manual-trigger","title":"Manual Trigger","text":"<p>Force completion when automatic triggering doesn't work:</p> <p>Keyboard Shortcuts: - Windows/Linux: <code>Ctrl+Space</code> - macOS: <code>Cmd+Space</code></p>"},{"location":"features/version-completion/#multi-constraint-completion","title":"Multi-Constraint Completion","text":"<p>Handle complex version expressions:</p> <pre><code>dependencies = [\n    \"django&gt;=4.0,&lt;5.0\",     # \u2190 Completion works after first &gt;=\n    \"requests&gt;=2.28,!=2.29.0\", # \u2190 Supports exclusion patterns\n]\n</code></pre>"},{"location":"features/version-completion/#pre-release-control","title":"Pre-release Control","text":"<p>Configure pre-release visibility in VS Code settings:</p> settings.json<pre><code>{\n    \"tombo.listPreReleases\": false  // Hide alpha/beta versions\n}\n</code></pre>"},{"location":"features/version-completion/#troubleshooting","title":"Troubleshooting","text":""},{"location":"features/version-completion/#completion-not-triggering","title":"Completion Not Triggering","text":"<p>Common Issues:</p> <ol> <li>Wrong file type - Ensure you're in supported files</li> <li>Cursor position - Must be immediately after constraint operator</li> <li>Network issues - First completion requires internet access</li> <li>Invalid syntax - Fix TOML/requirements syntax errors</li> </ol> <p>Solutions:</p> Correct positioning<pre><code>dependencies = [\n    \"requests&gt;=|\",          # \u2190 Cursor here triggers completion\n    \"numpy==1.24.|\",        # \u2190 Or here for specific series\n]\n</code></pre>"},{"location":"features/version-completion/#slow-completion","title":"Slow Completion","text":"<p>Performance Optimization:</p> <ol> <li>Check network speed - Initial fetches depend on connection</li> <li>Clear cache if corrupted - Use Command Palette: \"Tombo: Clear Cache\"</li> <li>Reduce completion scope - Use more specific version prefixes</li> </ol>"},{"location":"features/version-completion/#missing-versions","title":"Missing Versions","text":"<p>Troubleshooting Steps:</p> <ol> <li>Verify package name - Check spelling and case</li> <li>Check Python compatibility - Some versions may be filtered</li> <li>Enable pre-releases - May be hidden by settings</li> <li>Refresh cache - Package may have new versions</li> </ol>"},{"location":"features/version-completion/#best-practices","title":"Best Practices","text":""},{"location":"features/version-completion/#efficient-workflow","title":"Efficient Workflow","text":"<p>Recommended Approach:</p> <ol> <li>Start broad - Type <code>package&gt;=</code> for latest versions</li> <li>Refine constraints - Add specific version ranges as needed</li> <li>Use hover - Check package info before final selection</li> <li>Test compatibility - Verify versions work in your environment</li> </ol>"},{"location":"features/version-completion/#version-strategy","title":"Version Strategy","text":"<p>Constraint Selection:</p> <ul> <li><code>&gt;=x.y.z</code> - Allow future updates, good for libraries</li> <li><code>~=x.y.z</code> - Compatible releases, balanced approach</li> <li><code>==x.y.z</code> - Exact versions, maximum reproducibility</li> <li><code>^x.y.z</code> - Major version compatibility (Poetry)</li> </ul>"},{"location":"features/version-completion/#team-collaboration","title":"Team Collaboration","text":"<p>Consistent Dependencies:</p> Team-friendly constraints<pre><code>[project]\ndependencies = [\n    # Production dependencies - conservative constraints\n    \"django~=4.2.0\",        # Patch updates only\n    \"psycopg2&gt;=2.9.0,&lt;3.0\", # Major version range\n\n    # Development flexibility\n    \"requests&gt;=2.28.0\",     # Allow minor updates\n]\n</code></pre>"},{"location":"features/version-completion/#integration-tips","title":"Integration Tips","text":""},{"location":"features/version-completion/#with-other-tools","title":"With Other Tools","text":"<p>Poetry Integration: - Works alongside <code>poetry install</code> and <code>poetry update</code> - Respects Poetry's version resolution - Supports Poetry-specific constraint syntax</p> <p>Pip Integration: - Compatible with <code>pip install -r requirements.txt</code> - Supports all pip constraint formats - Works with virtual environments</p>"},{"location":"features/version-completion/#cicd-compatibility","title":"CI/CD Compatibility","text":"<p>Reproducible Builds: - Use lock files (<code>poetry.lock</code>, <code>requirements.lock</code>) for exact versions - Keep source files (<code>pyproject.toml</code>, <code>requirements.txt</code>) with ranges - Let Tombo help maintain source file constraints</p>"},{"location":"features/version-completion/#next-steps","title":"Next Steps","text":"<p>Ready to explore more Tombo features?</p> <ul> <li>Hover Information \u2192 - Rich package metadata</li> <li>Smart Caching \u2192 - Performance optimization</li> <li>Configuration \u2192 - Customize completion behavior</li> </ul>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Customize Tombo to fit your development workflow. All settings are accessible through VS Code's settings UI or directly in your <code>settings.json</code>.</p>"},{"location":"getting-started/configuration/#accessing-settings","title":"Accessing Settings","text":""},{"location":"getting-started/configuration/#via-settings-ui-recommended","title":"Via Settings UI (Recommended)","text":"<ol> <li>Open VS Code Settings: <code>Ctrl+,</code> (Windows/Linux) or <code>Cmd+,</code> (macOS)</li> <li>Search for \"Tombo\" in the settings search bar</li> <li>Modify settings using the UI controls</li> </ol>"},{"location":"getting-started/configuration/#via-json-configuration","title":"Via JSON Configuration","text":"<ol> <li>Open Command Palette: <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (macOS)</li> <li>Type: <code>Preferences: Open User Settings (JSON)</code></li> <li>Add Tombo settings to your <code>settings.json</code></li> </ol>"},{"location":"getting-started/configuration/#core-settings","title":"Core Settings","text":""},{"location":"getting-started/configuration/#pypi-index-configuration","title":"PyPI Index Configuration","text":"<p>Configure which PyPI server Tombo uses for package information:</p> settings.json<pre><code>{\n    \"tombo.pypiIndexUrl\": \"https://pypi.org/simple/\",\n    \"tombo.listPreReleases\": false\n}\n</code></pre> <code>tombo.pypiIndexUrl</code> Default: <code>https://pypi.org/simple/</code> Description: PyPI index server URL for package lookups Options: Any PyPI-compatible index (PyPI, corporate mirrors, etc.) <code>tombo.listPreReleases</code> Default: <code>false</code> Description: Include pre-release versions (alpha, beta, rc) in completion Options: <code>true</code> to show pre-releases, <code>false</code> to hide them <p>Custom PyPI Indexes</p> <p>For corporate environments, you can point Tombo to your internal PyPI mirror: <pre><code>\"tombo.pypiIndexUrl\": \"https://internal-pypi.company.com/simple/\"\n</code></pre></p>"},{"location":"getting-started/configuration/#caching-settings","title":"Caching Settings","text":"<p>Control how Tombo caches package information:</p> settings.json<pre><code>{\n    \"tombo.cache.enabled\": true,\n    \"tombo.cache.ttl\": 86400,\n    \"tombo.cache.maxSize\": 1000\n}\n</code></pre> <code>tombo.cache.enabled</code> Default: <code>true</code> Description: Enable smart caching for better performance Options: <code>true</code> for caching, <code>false</code> to always fetch fresh data <code>tombo.cache.ttl</code> Default: <code>86400</code> (24 hours) Description: Cache time-to-live in seconds Options: Any positive integer (3600 = 1 hour, 86400 = 24 hours) <code>tombo.cache.maxSize</code> Default: <code>1000</code> Description: Maximum number of packages to cache Options: Any positive integer"},{"location":"getting-started/configuration/#visual-decorations","title":"Visual Decorations","text":"<p>Customize how Tombo displays compatibility information:</p> settings.json<pre><code>{\n    \"tombo.compatibleDecorator\": \"\u2705\",\n    \"tombo.incompatibleDecorator\": \"\u274c\",\n    \"tombo.decorations.enabled\": true\n}\n</code></pre> <code>tombo.compatibleDecorator</code> Default: <code>\u2705</code> Description: Icon shown next to compatible package versions Options: Any emoji or text string <code>tombo.incompatibleDecorator</code> Default: <code>\u274c</code> Description: Icon shown next to incompatible package versions Options: Any emoji or text string <code>tombo.decorations.enabled</code> Default: <code>true</code> Description: Show visual decorators in the editor Options: <code>true</code> to show decorators, <code>false</code> to hide them"},{"location":"getting-started/configuration/#logging-and-debug","title":"Logging and Debug","text":"<p>Configure Tombo's logging behavior:</p> settings.json<pre><code>{\n    \"tombo.logging.enabled\": false,\n    \"tombo.logging.level\": \"info\"\n}\n</code></pre> <code>tombo.logging.enabled</code> Default: <code>false</code> Description: Enable debug logging to VS Code output panel Options: <code>true</code> for debugging, <code>false</code> for production (recommended) <code>tombo.logging.level</code> Default: <code>\"info\"</code> Description: Logging verbosity level Options: <code>\"error\"</code>, <code>\"warn\"</code>, <code>\"info\"</code>, <code>\"debug\"</code> <p>Logging Performance Impact</p> <p>Enabling detailed logging can impact performance. Only enable for troubleshooting.</p>"},{"location":"getting-started/configuration/#configuration-profiles","title":"Configuration Profiles","text":""},{"location":"getting-started/configuration/#development-profile","title":"Development Profile","text":"<p>For active development with frequent package exploration:</p> settings.json<pre><code>{\n    \"tombo.pypiIndexUrl\": \"https://pypi.org/simple/\",\n    \"tombo.listPreReleases\": true,\n    \"tombo.cache.ttl\": 3600,\n    \"tombo.logging.enabled\": true,\n    \"tombo.logging.level\": \"info\"\n}\n</code></pre> <p>Benefits: - See pre-release packages - Shorter cache for fresh data - Logging enabled for debugging</p>"},{"location":"getting-started/configuration/#production-profile","title":"Production Profile","text":"<p>For stable development environments:</p> settings.json<pre><code>{\n    \"tombo.pypiIndexUrl\": \"https://pypi.org/simple/\",\n    \"tombo.listPreReleases\": false,\n    \"tombo.cache.ttl\": 86400,\n    \"tombo.logging.enabled\": false\n}\n</code></pre> <p>Benefits: - Stable releases only - Long cache for performance - No logging overhead</p>"},{"location":"getting-started/configuration/#corporate-profile","title":"Corporate Profile","text":"<p>For enterprise environments with internal PyPI:</p> settings.json<pre><code>{\n    \"tombo.pypiIndexUrl\": \"https://internal-pypi.company.com/simple/\",\n    \"tombo.listPreReleases\": false,\n    \"tombo.cache.ttl\": 43200,\n    \"tombo.compatibleDecorator\": \"\u2713\",\n    \"tombo.incompatibleDecorator\": \"\u2717\"\n}\n</code></pre> <p>Benefits: - Internal package repository - Conservative visual indicators - 12-hour cache for internal stability</p>"},{"location":"getting-started/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/configuration/#network-settings","title":"Network Settings","text":"<p>Tombo respects VS Code's network settings:</p> settings.json<pre><code>{\n    \"http.proxy\": \"http://proxy.company.com:8080\",\n    \"http.proxyAuthorization\": \"Basic &lt;encoded-credentials&gt;\",\n    \"http.proxyStrictSSL\": true\n}\n</code></pre>"},{"location":"getting-started/configuration/#file-association","title":"File Association","text":"<p>Extend Tombo support to custom file patterns:</p> settings.json<pre><code>{\n    \"files.associations\": {\n        \"*.requirements\": \"pip-requirements\",\n        \"*.deps\": \"pip-requirements\"\n    }\n}\n</code></pre>"},{"location":"getting-started/configuration/#performance-tuning","title":"Performance Tuning","text":"<p>For large projects or slower systems:</p> settings.json<pre><code>{\n    \"tombo.cache.maxSize\": 2000,\n    \"tombo.cache.ttl\": 604800,\n    \"tombo.debounceMs\": 500\n}\n</code></pre> <p>Benefits: - Larger cache for big projects - Week-long cache duration - Slower debounce for less aggressive requests</p>"},{"location":"getting-started/configuration/#workspace-vs-user-settings","title":"Workspace vs User Settings","text":""},{"location":"getting-started/configuration/#user-settings","title":"User Settings","text":"<p>Global settings that apply to all VS Code workspaces:</p> <ul> <li>Go to File &gt; Preferences &gt; Settings (or <code>Ctrl+,</code>)</li> <li>Configure in the User tab</li> <li>Settings saved to <code>~/.config/Code/User/settings.json</code></li> </ul>"},{"location":"getting-started/configuration/#workspace-settings","title":"Workspace Settings","text":"<p>Project-specific settings that only apply to the current workspace:</p> <ul> <li>Go to File &gt; Preferences &gt; Settings (or <code>Ctrl+,</code>)</li> <li>Configure in the Workspace tab</li> <li>Settings saved to <code>.vscode/settings.json</code> in your project</li> </ul> <p>Best Practice</p> <p>Use User settings for personal preferences (decorators, logging) and Workspace settings for project-specific needs (internal PyPI, pre-releases).</p>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>Tombo also supports environment variable configuration:</p> Environment Variables<pre><code>export TOMBO_PYPI_INDEX=\"https://internal-pypi.company.com/simple/\"\nexport TOMBO_CACHE_TTL=\"43200\"\nexport TOMBO_LOG_LEVEL=\"debug\"\n</code></pre> <p>Priority Order</p> <p>Settings are applied in this order: 1. Environment variables (highest priority) 2. Workspace settings 3. User settings 4. Default values (lowest priority)</p>"},{"location":"getting-started/configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"getting-started/configuration/#settings-not-taking-effect","title":"Settings Not Taking Effect","text":"<ol> <li>Restart VS Code after changing settings</li> <li>Check for typos in setting names or values</li> <li>Verify JSON syntax in manual settings.json edits</li> <li>Check the VS Code output panel for Tombo errors</li> </ol>"},{"location":"getting-started/configuration/#cache-issues","title":"Cache Issues","text":"<p>To reset Tombo's cache:</p> <ol> <li>Open Command Palette: <code>Ctrl+Shift+P</code></li> <li>Run: <code>Tombo: Clear Cache</code></li> <li>Or restart VS Code to clear memory cache</li> </ol>"},{"location":"getting-started/configuration/#network-configuration-issues","title":"Network Configuration Issues","text":"<p>If Tombo can't reach PyPI:</p> <ol> <li>Check your internet connection</li> <li>Verify proxy settings in VS Code</li> <li>Test the PyPI URL in a browser</li> <li>Check corporate firewall settings</li> </ol>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<p>With Tombo configured to your preferences:</p> <ul> <li>Explore all features - Learn what Tombo can do</li> <li>See usage examples - Apply Tombo to different project types</li> <li>Read troubleshooting - Solve common problems</li> </ul> <p>Need Help?</p> <p>Can't find the setting you need? Check our FAQ or file an issue for configuration support.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Get Tombo up and running in VS Code in just a few minutes.</p>"},{"location":"getting-started/installation/#vs-code-marketplace-recommended","title":"VS Code Marketplace (Recommended)","text":"<p>The easiest way to install Tombo is directly from the VS Code Marketplace:</p> Via VS Code UIVia Command PaletteVia Command Line <ol> <li>Open VS Code</li> <li>Press <code>Ctrl+Shift+X</code> (Windows/Linux) or <code>Cmd+Shift+X</code> (macOS) to open Extensions</li> <li>Search for \"Tombo\"</li> <li>Click Install on the official Tombo extension</li> <li>Reload VS Code when prompted</li> </ol> <ol> <li>Press <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (macOS)</li> <li>Type <code>Extensions: Install Extensions</code></li> <li>Search for \"Tombo\"</li> <li>Click Install on the official extension</li> </ol> <pre><code># Install directly via VS Code CLI\ncode --install-extension tombo.tombo\n</code></pre>"},{"location":"getting-started/installation/#vsix-installation-advanced","title":"VSIX Installation (Advanced)","text":"<p>For nightly (pre-release) versions or offline installation:</p> <p>Advanced Users Only</p> <p>Only install VSIX files from trusted sources. The official marketplace installation is recommended for most users.</p> <ol> <li>Download the VSIX file from the GitHub releases page</li> <li>Open VS Code</li> <li>Press <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (macOS)</li> <li>Type <code>Extensions: Install from VSIX...</code></li> <li>Select the downloaded VSIX file</li> <li>Restart VS Code</li> </ol>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/installation/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>VS Code: Version 1.74.0 or higher</li> <li>Operating System: Windows 10+, macOS 10.15+, or Linux (Ubuntu 18.04+)</li> <li>Memory: 4GB RAM minimum, 8GB recommended</li> <li>Network: Internet connection for first package lookup (then works offline)</li> </ul>"},{"location":"getting-started/installation/#recommended-environment","title":"Recommended Environment","text":"<ul> <li>VS Code: Latest stable version</li> <li>Python: 3.10+ installed (for Python project development, note that &lt;3.10 is fine to use, however it's already the end of the lifecycle.)</li> <li>Git: For version control integration</li> <li>Node.js: 16+ (if contributing to development)</li> </ul>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<p>After installation, verify that Tombo is working correctly:</p> <ol> <li>Open a Python project with <code>pyproject.toml</code> or <code>requirements.txt</code></li> <li>Look for the Tombo icon in the VS Code status bar (bottom right)</li> <li>Hover over a package name in your dependency file</li> <li>You should see rich metadata with version information</li> </ol> <p>Installation Complete!</p> <p>If you see hover information when hovering over package names, Tombo is successfully installed and ready to use!</p>"},{"location":"getting-started/installation/#first-steps","title":"First Steps","text":"<p>Now that Tombo is installed:</p> <ol> <li>Configure your preferences - Set up PyPI index, logging, and decorations</li> <li>Try the quick start guide - Learn the basic features</li> <li>Explore examples - See Tombo in action with different project types</li> </ol>"},{"location":"getting-started/installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"getting-started/installation/#extension-not-appearing","title":"Extension Not Appearing","text":"<p>If Tombo doesn't appear in your extensions list:</p> <ol> <li>Restart VS Code completely</li> <li>Check the VS Code output panel for any error messages</li> <li>Verify your VS Code version meets the minimum requirements</li> <li>Try refreshing the extensions marketplace</li> </ol>"},{"location":"getting-started/installation/#hover-information-not-working","title":"Hover Information Not Working","text":"<p>If package hover doesn't work:</p> <ol> <li>Check that you're in a supported file type (<code>pyproject.toml</code>, <code>requirements.txt</code>)</li> <li>Verify internet connectivity for first-time package lookups</li> <li>Check the VS Code output panel for Tombo logs</li> <li>Try restarting VS Code</li> </ol>"},{"location":"getting-started/installation/#performance-issues","title":"Performance Issues","text":"<p>If Tombo feels slow:</p> <ol> <li>Check your network connection - first lookups require internet</li> <li>Wait for initial caching - subsequent requests will be instant</li> <li>Clear the cache via VS Code command palette: <code>Tombo: Clear Cache</code></li> </ol> <p>Need more help? Check our detailed troubleshooting guide or file an issue.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide \u2192</li> <li>Configuration Options \u2192</li> <li>Feature Overview \u2192</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get up and running with Tombo in 5 minutes! This guide walks you through the core features with hands-on examples.</p>"},{"location":"getting-started/quick-start/#your-first-tombo-experience","title":"Your First Tombo Experience","text":""},{"location":"getting-started/quick-start/#step-1-open-a-python-project","title":"Step 1: Open a Python Project","text":"<p>Open any Python project in VS Code that contains:</p> <ul> <li><code>pyproject.toml</code> (PEP 621 or Poetry format)</li> <li><code>requirements.txt</code></li> <li>Any requirements file (<code>requirements-dev.txt</code>, <code>requirements.in</code>, etc.)</li> </ul> <p>Don't have a project?</p> <p>Create a new file called <code>pyproject.toml</code> and follow along!</p>"},{"location":"getting-started/quick-start/#step-2-try-hover-information","title":"Step 2: Try Hover Information","text":"<p>Add a dependency to your file and hover over the package name:</p> PEP 621 FormatPoetry V1 FormatPoetry V2 Format pyproject.toml<pre><code>[project]\ndependencies = [\n    \"requests\",  # \u2190 Hover over \"requests\"\n]\n</code></pre> pyproject.toml<pre><code>[tool.poetry.dependencies]\nrequests = \"^2.28.0\"  # \u2190 Hover over \"requests\"\n</code></pre> pyproject.toml<pre><code>dependencies = [\n  \"mkdocs (&gt;=1.6.1)\",\n  \"requests (^2.28.0)\",  # \u2190 Hover over \"requests\"\n]\n</code></pre> <p>Warning</p> <p>Poetry v2 format doesn't respect pep621, the version in the parentheses needs more \"trigger\" to hook up Tombo's suggestion.</p> Requirements Format requirements.txt<pre><code>requests&gt;=2.28.0  # \u2190 Hover over \"requests\"\n</code></pre> <p>What you'll see:</p> <ul> <li>\ud83d\udce6 Package description</li> <li>\ud83c\udff7\ufe0f Latest version (e.g., 2.31.0)</li> <li>\ud83d\udc0d Python compatibility (e.g., &gt;=3.7)</li> <li>\ud83d\udcc5 Recent versions with release dates</li> <li>\ud83d\udd17 Direct links to PyPI and documentation</li> </ul>"},{"location":"getting-started/quick-start/#step-3-try-version-completion","title":"Step 3: Try Version Completion","text":"<p>Now try Tombo's intelligent version completion:</p> PEP 621 FormatPoetry FormatRequirements Format pyproject.toml<pre><code>[project]\ndependencies = [\n    \"numpy&gt;=\",  # \u2190 Place cursor after \"&gt;=\" and trigger completion\n]\n</code></pre> pyproject.toml<pre><code>[tool.poetry.dependencies]\nnumpy = \"^\"  # \u2190 Place cursor after \"^\" and trigger completion\n</code></pre> requirements.txt<pre><code>numpy&gt;=  # \u2190 Place cursor after \"&gt;=\" and trigger completion\n</code></pre> <p>To trigger completion:</p> <ul> <li>Automatic: Tombo shows suggestions as you type</li> <li>Manual: Press <code>Ctrl+Space</code> (Windows/Linux) or <code>Cmd+Space</code> (macOS)</li> </ul> <p>What you'll see:</p> <ul> <li>\ud83d\udccb List of available versions</li> <li>\u2705 Compatible versions highlighted</li> <li>\u26a0\ufe0f Pre-release versions marked</li> <li>\ud83d\udeab Yanked versions shown last</li> </ul>"},{"location":"getting-started/quick-start/#step-4-experience-smart-caching","title":"Step 4: Experience Smart Caching","text":"<p>Try hovering over the same package again - notice how it's instant the second time!</p> <p>This is Tombo's smart caching in action: - First lookup: Fetches from PyPI (requires internet) - Subsequent lookups: Lightning-fast from cache (works offline!)</p>"},{"location":"getting-started/quick-start/#core-workflows","title":"Core Workflows","text":""},{"location":"getting-started/quick-start/#adding-new-dependencies","title":"Adding New Dependencies","text":"<ol> <li>Open your dependency file</li> <li>Start typing a package name</li> <li>Use hover to explore package information</li> <li>Add version constraints with intelligent completion</li> <li>Save the file - you're done!</li> </ol> <p>Example workflow: pyproject.toml<pre><code>[project]\ndependencies = [\n    \"fastapi\",           # Step 1: Add package name\n    \"fastapi&gt;=\",         # Step 2: Add constraint operator\n    \"fastapi&gt;=0.95.0\",   # Step 3: Complete with suggested version\n]\n</code></pre></p>"},{"location":"getting-started/quick-start/#updating-existing-dependencies","title":"Updating Existing Dependencies","text":"<ol> <li>Hover over existing packages to see newer versions</li> <li>Click the version constraint to highlight it</li> <li>Use completion to see available updates</li> <li>Select the desired version</li> </ol>"},{"location":"getting-started/quick-start/#exploring-package-information","title":"Exploring Package Information","text":"<ol> <li>Hover over any package to see metadata</li> <li>Click PyPI links to visit the official package page</li> <li>Check Python compatibility before adding dependencies</li> <li>Review recent versions to understand release patterns</li> </ol>"},{"location":"getting-started/quick-start/#real-world-example","title":"Real-World Example","text":"<p>Let's create a complete Python project setup:</p> pyproject.toml<pre><code>[project]\nname = \"my-awesome-app\"\nversion = \"0.1.0\"\ndescription = \"My awesome Python application\"\ndependencies = [\n    \"fastapi&gt;=0.95.0\",      # Hover: See FastAPI info\n    \"uvicorn&gt;=0.20.0\",      # Hover: Check server compatibility\n    \"pydantic&gt;=2.0.0\",      # Completion: Get v2 versions\n    \"sqlalchemy&gt;=2.0.0\",    # Hover: See ORM latest features\n    \"pytest&gt;=7.0.0\",        # Testing framework\n]\n\n[project.optional-dependencies]\ndev = [\n    \"black&gt;=23.0.0\",       # Code formatter\n    \"ruff&gt;=0.0.250\",       # Fast linter\n    \"mypy&gt;=1.0.0\",         # Type checker\n]\n</code></pre> <p>Try this yourself: 1. Create this <code>pyproject.toml</code> file 2. Hover over each package to see rich information 3. Try changing version constraints and using completion 4. Notice how fast subsequent hovers are!</p>"},{"location":"getting-started/quick-start/#pro-tips","title":"Pro Tips","text":""},{"location":"getting-started/quick-start/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<ul> <li>Hover: Simply hover with your mouse (no shortcuts needed)</li> <li>Completion: <code>Ctrl+Space</code> (Windows/Linux) or <code>Cmd+Space</code> (macOS)</li> <li>Go to Definition: <code>F12</code> on package names (opens PyPI page)</li> <li>Quick Info: <code>Ctrl+K Ctrl+I</code> for hover info via keyboard</li> </ul>"},{"location":"getting-started/quick-start/#file-format-recognition","title":"File Format Recognition","text":"<p>Tombo automatically works with these file patterns:</p> <ul> <li><code>pyproject.toml</code> - PEP 621 and Poetry formats</li> <li><code>requirements*.txt</code> - All requirements file variants</li> </ul>"},{"location":"getting-started/quick-start/#caching-behavior","title":"Caching Behavior","text":"<ul> <li>First session: Packages fetched from PyPI (needs internet)</li> <li>Same session: Instant responses from memory cache</li> <li>New sessions: Fast responses from disk cache</li> <li>Cache duration: 24 hours by default (configurable)</li> </ul>"},{"location":"getting-started/quick-start/#network-requirements","title":"Network Requirements","text":"<ul> <li>Online: Full functionality with latest PyPI data</li> <li>Offline: Hover works for cached packages</li> <li>Limited connection: Tombo gracefully degrades</li> </ul>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you've experienced Tombo's core features:</p> <ol> <li>Learn about configuration - Customize Tombo for your workflow</li> <li>Explore advanced features - Discover all capabilities</li> <li>See format-specific examples - Master different project types</li> </ol>"},{"location":"getting-started/quick-start/#common-questions","title":"Common Questions","text":"Why doesn't completion trigger automatically? <p>Tombo completion triggers on specific characters (<code>&gt;=</code>, <code>==</code>, <code>~=</code>, etc.). If it's not working:</p> <ol> <li>Make sure you're in a supported file type</li> <li>Try typing the constraint operator (<code>&gt;=</code>)</li> <li>Use <code>Ctrl+Space</code> to manually trigger completion</li> </ol> Package hover shows 'Loading...' forever <p>This usually indicates network connectivity issues:</p> <ol> <li>Check your internet connection</li> <li>Verify PyPI is accessible from your network</li> <li>Check VS Code's output panel for Tombo logs</li> </ol> Can I use Tombo offline? <p>Yes! After the first lookup online:</p> <ul> <li>Hover information works offline from cache</li> <li>Version completion uses cached data</li> <li>Cache persists between VS Code sessions</li> </ul> <p>Ready to dive deeper? Check out the feature overview to learn about all of Tombo's capabilities!</p>"},{"location":"in-action/screenshots/","title":"Screenshots","text":"<p>See Tombo in action across all Python packaging formats! These screenshots demonstrate how Tombo provides consistent, intelligent package management regardless of your project setup.</p>"},{"location":"in-action/screenshots/#pep-621-format-support","title":"PEP 621 Format Support","text":"<p>Modern Python projects using the standardized <code>pyproject.toml</code> format.</p>"},{"location":"in-action/screenshots/#pypi-integration-in-pep-621","title":"PyPI Integration in PEP 621","text":"<p>What you're seeing:</p> <ul> <li>Rich PyPI metadata display in PEP 621 <code>[project]</code> section</li> <li>Package information directly in your editor</li> <li>Clean integration with modern Python packaging standards</li> <li>Professional VS Code interface integration</li> </ul>"},{"location":"in-action/screenshots/#version-management-in-pep-621","title":"Version Management in PEP 621","text":"<p>Features demonstrated:</p> <ul> <li>Intelligent version constraint handling in dependency arrays</li> <li>Version suggestions and completion</li> <li>Clean, readable version display</li> <li>Native PEP 621 <code>dependencies = [...]</code> format support</li> </ul>"},{"location":"in-action/screenshots/#poetry-v1-format-support","title":"Poetry v1 Format Support","text":"<p>Classic Poetry project configuration with traditional dependency management.</p>"},{"location":"in-action/screenshots/#pypi-integration-in-poetry-v1","title":"PyPI Integration in Poetry v1","text":"<p>Poetry-specific features:</p> <ul> <li>Package metadata in <code>[tool.poetry.dependencies]</code> section</li> <li>Poetry constraint syntax support (<code>^</code>, <code>~</code>, <code>&gt;=</code>)</li> <li>Seamless Poetry workflow integration</li> <li>Rich hover information for Poetry projects</li> </ul>"},{"location":"in-action/screenshots/#version-management-in-poetry-v1","title":"Version Management in Poetry v1","text":"<p>Poetry v1 capabilities:</p> <ul> <li>Poetry-native version constraint completion</li> <li>Support for caret (<code>^</code>) and tilde (<code>~</code>) operators</li> <li>Poetry development dependencies support</li> <li>Clean integration with Poetry's dependency model</li> </ul>"},{"location":"in-action/screenshots/#poetry-v2-format-support","title":"Poetry v2 Format Support","text":"<p>Modern Poetry projects with enhanced syntax and parentheses format.</p>"},{"location":"in-action/screenshots/#pypi-integration-in-poetry-v2","title":"PyPI Integration in Poetry v2","text":"<p>Advanced Poetry features:</p> <ul> <li>Poetry v2 parentheses syntax support</li> <li>Enhanced dependency group management</li> <li>Modern Poetry project structure</li> <li>Backward compatibility with Poetry v1</li> </ul>"},{"location":"in-action/screenshots/#version-management-in-poetry-v2","title":"Version Management in Poetry v2","text":"<p>Poetry v2 enhancements:</p> <ul> <li>Complex constraint expressions in parentheses</li> <li>Advanced version handling capabilities</li> <li>Mixed format compatibility</li> <li>Professional Poetry v2 workflow support</li> </ul>"},{"location":"in-action/screenshots/#requirementstxt-format-support","title":"Requirements.txt Format Support","text":"<p>Traditional pip requirements files - the foundation of Python packaging.</p>"},{"location":"in-action/screenshots/#pypi-integration-in-requirements-files","title":"PyPI Integration in Requirements Files","text":"<p>Classic requirements support:</p> <ul> <li>Rich package information in traditional <code>requirements.txt</code></li> <li>Support for all requirements file variants (<code>requirements-dev.txt</code>, etc.)</li> <li>Comment preservation and formatting</li> <li>Universal pip compatibility</li> </ul>"},{"location":"in-action/screenshots/#version-management-in-requirements-files","title":"Version Management in Requirements Files","text":"<p>Requirements.txt capabilities:</p> <ul> <li>All pip constraint operators (<code>&gt;=</code>, <code>==</code>, <code>~=</code>, etc.)</li> <li>Multi-line requirements support</li> <li>Package name and version completion</li> <li>Clean, traditional pip workflow</li> </ul>"},{"location":"in-action/screenshots/#universal-features-across-all-formats","title":"Universal Features Across All Formats","text":""},{"location":"in-action/screenshots/#consistent-experience","title":"Consistent Experience","text":"<p>Every screenshot demonstrates Tombo's commitment to providing a consistent, high-quality experience regardless of your Python packaging choice:</p> <ul> <li>Same rich hover information across all formats</li> <li>Identical version completion quality in PEP 621, Poetry, and requirements.txt</li> <li>Consistent visual design that integrates seamlessly with VS Code</li> <li>Professional interface that doesn't disrupt your workflow</li> </ul>"},{"location":"in-action/screenshots/#format-agnostic-intelligence","title":"Format-Agnostic Intelligence","text":"<p>Notice how Tombo provides the same level of intelligence whether you're using:</p> <ul> <li>Modern PEP 621 <code>[project]</code> sections</li> <li>Poetry's <code>[tool.poetry.dependencies]</code></li> <li>Classic <code>requirements.txt</code> files</li> </ul>"},{"location":"in-action/screenshots/#real-world-projects","title":"Real-World Projects","text":"<p>These screenshots capture Tombo in actual development scenarios:</p> <ul> <li>Working with popular packages like <code>mkdocs</code> and <code>colorama</code></li> <li>Real version numbers and constraints</li> <li>Authentic development workflows</li> <li>Professional project structures</li> </ul>"},{"location":"in-action/screenshots/#key-observations","title":"Key Observations","text":""},{"location":"in-action/screenshots/#package-information-quality","title":"Package Information Quality","text":"<p>All screenshots show Tombo's ability to provide comprehensive package metadata:</p> <ul> <li>Latest version information</li> <li>Release dates and version history</li> <li>Python compatibility requirements</li> <li>Direct links to PyPI and documentation</li> </ul>"},{"location":"in-action/screenshots/#version-constraint-intelligence","title":"Version Constraint Intelligence","text":"<p>Across all formats, Tombo demonstrates smart version handling:</p> <ul> <li>Context-aware version suggestions</li> <li>Compatibility indicators</li> <li>Support for all constraint operators</li> <li>Real-time completion as you type</li> </ul>"},{"location":"in-action/screenshots/#visual-consistency","title":"Visual Consistency","text":"<p>Every screenshot maintains VS Code's design language:</p> <ul> <li>Native hover tooltips and completion dropdowns</li> <li>Consistent color schemes and typography</li> <li>Clean, unobtrusive interface elements</li> <li>Professional development environment feel</li> </ul>"},{"location":"in-action/screenshots/#screenshot-technical-details","title":"Screenshot Technical Details","text":""},{"location":"in-action/screenshots/#capture-settings","title":"Capture Settings","text":"<ul> <li>VS Code Theme: Dark+ (default dark) for optimal contrast</li> <li>Font: JetBrains Mono for clear code readability</li> <li>Extensions: Only Tombo enabled to show pure functionality</li> <li>Projects: Real-world examples with authentic dependencies</li> </ul>"},{"location":"in-action/screenshots/#file-organization","title":"File Organization","text":"<p>Screenshots are organized by format for easy navigation:</p> <ul> <li><code>assets/pep621/</code> - Modern Python packaging</li> <li><code>assets/poetry_v1/</code> - Classic Poetry projects</li> <li><code>assets/poetry_v2/</code> - Modern Poetry projects</li> <li><code>assets/requirements/</code> - Traditional pip requirements</li> </ul>"},{"location":"in-action/screenshots/#next-steps","title":"Next Steps","text":"<p>Ready to experience these features yourself?</p> <ol> <li>Install Tombo - Get started in minutes</li> <li>Try the quick start - Hands-on tutorial</li> <li>Explore examples - Learn format-specific features</li> </ol> <p>Info</p> <p>Watch video demos - preparing!</p> <p>Want to Create Similar Screenshots?</p> <p>Check out our contributing guide for best practices on documentation contributions and capturing screenshots.</p> <p>These screenshots demonstrate that Tombo truly delivers on its promise: intelligent Python package management that works seamlessly across all Python packaging formats, providing a consistent, professional experience in VS Code! \ud83d\udc0d\u2728</p>"},{"location":"troubleshooting/common-issues/","title":"Common Issues","text":"<p>Quick solutions to the most frequently encountered problems with Tombo. Most issues can be resolved with simple configuration changes or understanding how Tombo works.</p>"},{"location":"troubleshooting/common-issues/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/common-issues/#extension-not-found-in-marketplace","title":"Extension Not Found in Marketplace","text":"<p>Problem: Can't find Tombo in VS Code Extensions marketplace.</p> <p>Solutions:</p> <ol> <li>Check extension name: Search for \"Tombo\" (exact spelling)</li> <li>Verify VS Code version: Requires VS Code 1.74.0 or later</li> <li>Refresh marketplace: <code>Ctrl+Shift+P</code> \u2192 \"Extensions: Reload\"</li> <li>Direct install: Use <code>code --install-extension tombo.tombo</code></li> </ol>"},{"location":"troubleshooting/common-issues/#extension-installed-but-not-working","title":"Extension Installed But Not Working","text":"<p>Problem: Tombo appears in extensions list but no functionality.</p> <p>Solutions:</p> <ol> <li>Restart VS Code completely: Close all windows and reopen</li> <li>Check file types: Open a supported file (<code>pyproject.toml</code>, <code>requirements.txt</code>)</li> <li>Verify activation: Look for Tombo in the status bar</li> <li>Check output panel: <code>View</code> \u2192 <code>Output</code> \u2192 Select \"Tombo\" from dropdown</li> </ol> Check these settings<pre><code>{\n    \"tombo.enabled\": true,              // Should be true\n    \"tombo.autoActivate\": true,         // Should be true\n    \"files.associations\": {             // Should include supported types\n        \"*.toml\": \"toml\",\n        \"requirements*.txt\": \"pip-requirements\"\n    }\n}\n</code></pre>"},{"location":"troubleshooting/common-issues/#hover-information-issues","title":"Hover Information Issues","text":""},{"location":"troubleshooting/common-issues/#hover-not-working-at-all","title":"Hover Not Working at All","text":"<p>Problem: No hover information appears over package names.</p> <p>Diagnostic steps:</p> <ol> <li>Check file type: Hover only works in supported files</li> <li>Test internet connection: First hover requires network access</li> <li>Check VS Code settings: Ensure hover is enabled</li> <li>Try manual hover: Use <code>Ctrl+K Ctrl+I</code> (Windows/Linux) or <code>Cmd+K Cmd+I</code> (macOS)</li> </ol> <p>Solutions:</p> VS Code Settings<pre><code>{\n    \"editor.hover.enabled\": true,       // Enable hover globally\n    \"editor.hover.delay\": 300,          // Hover delay in milliseconds\n    \"tombo.hover.enabled\": true,        // Enable Tombo hover specifically\n}\n</code></pre>"},{"location":"troubleshooting/common-issues/#hover-shows-loading-forever","title":"Hover Shows \"Loading...\" Forever","text":"<p>Problem: Hover popup appears but shows loading spinner indefinitely.</p> <p>Root causes: - Network connectivity issues - PyPI server unreachable - Proxy configuration problems - Firewall blocking requests</p> <p>Solutions:</p> <ol> <li>Check internet connection: Verify you can reach https://pypi.org</li> <li>Configure proxy settings:</li> </ol> VS Code Proxy Settings<pre><code>{\n    \"http.proxy\": \"http://proxy.company.com:8080\",\n    \"http.proxyAuthorization\": \"Basic username:password\",\n    \"http.proxyStrictSSL\": false\n}\n</code></pre> <ol> <li>Test with different packages: Try hovering over common packages like <code>requests</code></li> <li>Check Tombo logs: Open VS Code Output panel \u2192 Select \"Tombo\"</li> </ol>"},{"location":"troubleshooting/common-issues/#hover-shows-incorrect-information","title":"Hover Shows Incorrect Information","text":"<p>Problem: Package hover shows outdated or wrong information.</p> <p>Solutions:</p> <ol> <li>Clear cache: <code>Ctrl+Shift+P</code> \u2192 \"Tombo: Clear Cache\"</li> <li>Check cache settings:</li> </ol> Cache Configuration<pre><code>{\n    \"tombo.cache.enabled\": true,\n    \"tombo.cache.ttl\": 86400,           // 24 hours in seconds\n    \"tombo.cache.maxSize\": 1000         // Number of packages to cache\n}\n</code></pre> <ol> <li>Verify PyPI index URL:</li> </ol> PyPI Configuration<pre><code>{\n    \"tombo.pypiIndexUrl\": \"https://pypi.org/simple/\"  // Official PyPI\n}\n</code></pre>"},{"location":"troubleshooting/common-issues/#version-completion-issues","title":"Version Completion Issues","text":""},{"location":"troubleshooting/common-issues/#completion-not-triggering","title":"Completion Not Triggering","text":"<p>Problem: Version completion dropdown doesn't appear when typing.</p> <p>Common causes: - Not typing in the right location - Unsupported file format - Missing constraint operators - Network issues on first use</p> <p>Solutions:</p> <ol> <li>Check trigger characters: Completion triggers after <code>&gt;=</code>, <code>==</code>, <code>~=</code>, etc.</li> </ol> Correct trigger positions<pre><code>[project]\ndependencies = [\n    \"requests&gt;=\",           # \u2190 Cursor here should trigger completion\n    \"numpy==\",              # \u2190 Or here\n    \"pandas~=\",             # \u2190 Or here\n]\n</code></pre> <ol> <li> <p>Manual completion trigger: Use <code>Ctrl+Space</code> (Windows/Linux) or <code>Cmd+Space</code> (macOS)</p> </li> <li> <p>Check supported file formats:</p> </li> <li>\u2705 <code>pyproject.toml</code> with <code>[project]</code> section</li> <li>\u2705 <code>requirements.txt</code> and variants</li> <li>\u2705 Poetry <code>[tool.poetry.dependencies]</code> section</li> </ol>"},{"location":"troubleshooting/common-issues/#completion-shows-no-results","title":"Completion Shows No Results","text":"<p>Problem: Completion dropdown appears but is empty.</p> <p>Solutions:</p> <ol> <li>Verify package exists: Check package name spelling</li> <li>Test with known packages: Try <code>requests</code>, <code>numpy</code>, <code>pandas</code></li> <li>Check pre-release settings:</li> </ol> Pre-release Configuration<pre><code>{\n    \"tombo.listPreReleases\": false      // Set to true to see alpha/beta versions\n}\n</code></pre> <ol> <li>Check network connectivity: First completion requires internet access</li> </ol>"},{"location":"troubleshooting/common-issues/#completion-shows-unexpected-versions","title":"Completion Shows Unexpected Versions","text":"<p>Problem: Version completion shows versions that seem wrong or outdated.</p> <p>Solutions:</p> <ol> <li>Clear package cache: <code>Ctrl+Shift+P</code> \u2192 \"Tombo: Clear Cache\"</li> <li>Check Python compatibility: Tombo filters versions based on <code>requires-python</code></li> </ol> Python Version Compatibility<pre><code>[project]\nrequires-python = \"&gt;=3.8\"              # Affects which versions are shown\ndependencies = [\n    \"numpy&gt;=\",                          # Only shows Python 3.8+ compatible versions\n]\n</code></pre> <ol> <li>Verify PyPI index: Make sure you're using the correct PyPI server</li> </ol>"},{"location":"troubleshooting/common-issues/#version-selection-workflow","title":"Version Selection Workflow","text":"<p>Note: Tombo is designed for version research and selection, not automatic insertion. The recommended workflow is:</p> <ol> <li>Research: Use Tombo to see available versions and compatibility</li> <li>Select: Choose the appropriate version constraint</li> <li>Install: Use <code>uv add package&gt;=x.y.z</code> or <code>poetry add \"package&gt;=x.y.z\"</code></li> </ol> Recommended workflow<pre><code># 1. Start typing to see options\ndependencies = [\n    \"requests&gt;=\",                       # \u2190 See available versions via completion\n]\n\n# 2. Research versions via hover and completion dropdown\n# 3. Choose appropriate version (e.g., 2.31.0)\n# 4. Run: uv add \"requests&gt;=2.31.0\"\n</code></pre> <p>This approach gives you full control over version selection while leveraging Tombo's intelligence for research.</p>"},{"location":"troubleshooting/common-issues/#known-issues-and-limitations","title":"Known Issues and Limitations","text":""},{"location":"troubleshooting/common-issues/#format-support-levels","title":"Format Support Levels","text":"<p>\ud83d\udfe2 Fully Supported (Excellent Experience):</p> <ul> <li>PEP 621 (<code>[project]</code> section): Complete completion and hover support</li> <li>Poetry v1 (<code>[tool.poetry.dependencies]</code>): All features work perfectly</li> <li>Requirements.txt: Full compatibility with all operators</li> </ul> <p>\ud83d\udfe1 Limited Support:</p> <ul> <li> <p>Poetry v2 Parentheses Format: <code>\"package (&gt;=1.0,&lt;2.0)\"</code></p> </li> <li> <p>\u2705 Hover information works</p> </li> <li>\u26a0\ufe0f Completion may not trigger reliably</li> <li>Workaround: Use standard Poetry v1 format when possible</li> </ul> <p>Examples: Support levels comparison<pre><code>[tool.poetry.dependencies]\nrequests = \"^2.31.0\"                   # \ud83d\udfe2 Excellent support\npandas = \"pandas (&gt;=2.0,&lt;3.0)\"         # \ud83d\udfe1 Limited - hover works, completion unreliable\n</code></pre></p>"},{"location":"troubleshooting/common-issues/#file-format-issues","title":"File Format Issues","text":""},{"location":"troubleshooting/common-issues/#pep-621-not-working","title":"PEP 621 Not Working","text":"<p>Problem: Tombo doesn't work in <code>pyproject.toml</code> files.</p> <p>Solutions:</p> <ol> <li>Check section name: Dependencies must be in <code>[project]</code> section</li> </ol> Correct PEP 621 format<pre><code>[project]                               # \u2190 Must be exactly this section\nname = \"my-project\"\ndependencies = [\n    \"requests&gt;=2.31.0\",                 # \u2190 Tombo works here\n]\n</code></pre> <ol> <li>Verify file name: Must be exactly <code>pyproject.toml</code></li> <li>Check TOML syntax: Invalid TOML breaks parsing</li> </ol> Common syntax errors<pre><code>[project]\ndependencies = [\n    \"requests&gt;=2.31.0\",                 # \u2705 Good: proper quotes\n    requests&gt;=2.31.0,                   # \u274c Bad: missing quotes\n    \"requests&gt;=2.31.0\"                  # \u274c Bad: missing comma\n]\n</code></pre>"},{"location":"troubleshooting/common-issues/#poetry-format-issues","title":"Poetry Format Issues","text":"<p>Problem: Inconsistent behavior with Poetry formats.</p> <p>Solutions by Format:</p> <ol> <li>Poetry v1 (Recommended):</li> </ol> Poetry v1 - Excellent support<pre><code>[tool.poetry.dependencies]             # \u2190 Exact section name required\npython = \"^3.8\"\nrequests = \"^2.31.0\"                   # \u2705 Full completion + hover support\nnumpy = \"~1.24.0\"                      # \u2705 All operators work perfectly\n</code></pre> <ol> <li>Poetry v2 (Limited Support):</li> </ol> Poetry v2 - Use with caution<pre><code>[tool.poetry.dependencies]\nrequests = \"^2.31.0\"                   # \u2705 Standard syntax works perfectly\npandas = \"pandas (&gt;=2.0,&lt;3.0)\"         # \u26a0\ufe0f Parentheses format has limitations:\n                                       #     - Hover works \u2705\n                                       #     - Completion unreliable \u26a0\ufe0f\n                                       #     - Manual typing recommended\n</code></pre> <p>Recommendation: Use Poetry v1 syntax for the best Tombo experience. Poetry v2 parentheses format is supported but may require more manual typing.</p>"},{"location":"troubleshooting/common-issues/#requirementstxt-issues","title":"Requirements.txt Issues","text":"<p>Problem: Tombo not working in requirements files.</p> <p>Solutions:</p> <ol> <li>Check file patterns: Tombo supports these patterns:</li> <li><code>requirements.txt</code></li> <li><code>requirements-*.txt</code> (e.g., <code>requirements-dev.txt</code>)</li> <li><code>*.requirements</code></li> <li> <p><code>requirements*.in</code></p> </li> <li> <p>Verify line format:</p> </li> </ol> Supported requirements.txt syntax<pre><code>requests&gt;=2.31.0                        # \u2705 Basic constraint\nnumpy==1.24.3                           # \u2705 Exact version\npandas~=2.0.0                           # \u2705 Compatible release\n# Comments are ignored                  # \u2705 Comments OK\n-e .                                    # \u26a0\ufe0f Editable installs not supported\n-r other-requirements.txt               # \u26a0\ufe0f File references not supported\n</code></pre>"},{"location":"troubleshooting/common-issues/#network-and-connectivity-issues","title":"Network and Connectivity Issues","text":""},{"location":"troubleshooting/common-issues/#proxy-configuration-problems","title":"Proxy Configuration Problems","text":"<p>Problem: Tombo can't reach PyPI due to corporate proxy.</p> <p>Solutions:</p> <ol> <li>Configure VS Code proxy settings:</li> </ol> Corporate proxy setup<pre><code>{\n    \"http.proxy\": \"http://proxy.company.com:8080\",\n    \"http.proxyStrictSSL\": true,\n    \"http.proxyAuthorization\": \"Basic dXNlcjpwYXNz\",  // base64 encoded user:pass\n    \"http.noProxy\": \"localhost,127.0.0.1,.local\"\n}\n</code></pre> <ol> <li> <p>Test proxy configuration: Try accessing https://pypi.org in VS Code's integrated terminal</p> </li> <li> <p>Use system proxy: VS Code can inherit system proxy settings</p> </li> </ol>"},{"location":"troubleshooting/common-issues/#custom-pypi-index-issues","title":"Custom PyPI Index Issues","text":"<p>Problem: Using internal/corporate PyPI server.</p> <p>Solutions:</p> <ol> <li>Configure custom index URL:</li> </ol> Internal PyPI configuration<pre><code>{\n    \"tombo.pypiIndexUrl\": \"https://internal-pypi.company.com/simple/\",\n    \"tombo.cache.ttl\": 3600             // Shorter cache for internal updates\n}\n</code></pre> <ol> <li>Verify index accessibility: Test URL in browser or curl</li> <li>Check authentication: Some internal indexes require authentication</li> </ol>"},{"location":"troubleshooting/common-issues/#sslcertificate-issues","title":"SSL/Certificate Issues","text":"<p>Problem: SSL certificate errors when accessing PyPI.</p> <p>Solutions:</p> <ol> <li>Disable strict SSL (temporary solution):</li> </ol> SSL configuration<pre><code>{\n    \"http.proxyStrictSSL\": false,       // Only for testing\n    \"https.rejectUnauthorized\": false   // Only for testing\n}\n</code></pre> <ol> <li>Install certificates: Add corporate certificates to system store</li> <li>Contact IT: Get proper certificate configuration</li> </ol>"},{"location":"troubleshooting/common-issues/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/common-issues/#slow-hover-response","title":"Slow Hover Response","text":"<p>Problem: Hover information takes several seconds to appear.</p> <p>Solutions:</p> <ol> <li>Check network speed: First hover requires network request</li> <li>Increase cache size:</li> </ol> Performance optimization<pre><code>{\n    \"tombo.cache.maxSize\": 2000,        // Increase cache size\n    \"tombo.cache.ttl\": 604800,          // Longer cache (1 week)\n    \"tombo.debounceMs\": 300             // Reduce hover sensitivity\n}\n</code></pre> <ol> <li>Use local PyPI mirror: Faster than official PyPI</li> </ol>"},{"location":"troubleshooting/common-issues/#high-memory-usage","title":"High Memory Usage","text":"<p>Problem: VS Code uses excessive memory with Tombo enabled.</p> <p>Solutions:</p> <ol> <li>Reduce cache size:</li> </ol> Memory optimization<pre><code>{\n    \"tombo.cache.maxSize\": 500,         // Smaller cache\n    \"tombo.cache.enabled\": true,        // Keep caching for performance\n    \"tombo.logging.enabled\": false      // Disable logging\n}\n</code></pre> <ol> <li>Restart VS Code: Clears memory caches</li> <li>Check for memory leaks: File issue if problem persists</li> </ol>"},{"location":"troubleshooting/common-issues/#debugging-and-diagnostics","title":"Debugging and Diagnostics","text":""},{"location":"troubleshooting/common-issues/#enable-debug-logging","title":"Enable Debug Logging","text":"<p>When reporting issues, enable detailed logging:</p> Debug configuration<pre><code>{\n    \"tombo.logging.enabled\": true,\n    \"tombo.logging.level\": \"debug\",\n    \"tombo.logging.outputPanel\": true\n}\n</code></pre> <p>View logs: <code>View</code> \u2192 <code>Output</code> \u2192 Select \"Tombo\"</p>"},{"location":"troubleshooting/common-issues/#diagnostic-commands","title":"Diagnostic Commands","text":"<p>Use VS Code Command Palette (<code>Ctrl+Shift+P</code>):</p> <ul> <li>\"Tombo: Clear Cache\" - Reset all cached data</li> <li>\"Tombo: Show Diagnostics\" - Display configuration and status</li> <li>\"Tombo: Reload Extension\" - Restart Tombo without reloading VS Code</li> <li>\"Developer: Reload Window\" - Full VS Code reload</li> </ul>"},{"location":"troubleshooting/common-issues/#collect-diagnostic-information","title":"Collect Diagnostic Information","text":"<p>When filing bug reports, include:</p> <ol> <li>VS Code version: <code>Help</code> \u2192 <code>About</code></li> <li>Tombo version: Check Extensions panel</li> <li>Operating system: Windows/macOS/Linux and version</li> <li>Configuration: Your <code>settings.json</code> Tombo settings</li> <li>Log output: From Output panel with debug enabled</li> <li>Sample files: Minimal reproduction case</li> </ol>"},{"location":"troubleshooting/common-issues/#getting-help","title":"Getting Help","text":""},{"location":"troubleshooting/common-issues/#self-service-resources","title":"Self-Service Resources","text":"<ol> <li>FAQ - Frequently asked questions</li> <li>Performance Guide - Optimization tips</li> <li>Configuration Guide - Settings reference</li> </ol>"},{"location":"troubleshooting/common-issues/#community-support","title":"Community Support","text":"<ol> <li>GitHub Issues: Report bugs</li> <li>Discussions: Ask questions</li> <li>VS Code Community: VS Code marketplace reviews</li> </ol>"},{"location":"troubleshooting/common-issues/#bug-reports","title":"Bug Reports","text":"<p>When filing issues, please include:</p> <ul> <li>\u2705 Tombo version and VS Code version</li> <li>\u2705 Minimal reproduction case (sample files)</li> <li>\u2705 Expected vs actual behavior</li> <li>\u2705 Debug logs if relevant</li> <li>\u2705 Operating system and environment details</li> </ul> <p>Good bug report example: <pre><code>Title: Hover not working for Poetry dependencies\n\nEnvironment:\n- VS Code: 1.84.0\n- Tombo: 1.0.0\n- OS: Windows 11\n\nSteps to reproduce:\n1. Create pyproject.toml with Poetry dependencies\n2. Hover over package name\n3. No hover information appears\n\nExpected: Rich package information\nActual: No response\n\nLogs: [attach debug output]\nSample file: [attach pyproject.toml]\n</code></pre></p> <p>Quick Fix Checklist</p> <p>Most Tombo issues can be resolved by:</p> <ol> <li>\u2705 Restarting VS Code completely</li> <li>\u2705 Clearing Tombo cache</li> <li>\u2705 Checking internet connectivity</li> <li>\u2705 Verifying file format and syntax</li> <li>\u2705 Ensuring you're in supported file types</li> </ol> <p>Try these first before diving into detailed troubleshooting!</p>"},{"location":"troubleshooting/faq/","title":"Frequently Asked Questions","text":"<p>Get quick answers to common questions about Tombo. Find solutions to typical issues and learn about advanced usage patterns.</p>"},{"location":"troubleshooting/faq/#installation-setup","title":"Installation &amp; Setup","text":""},{"location":"troubleshooting/faq/#q-how-do-i-install-tombo","title":"Q: How do I install Tombo?","text":"<p>A: Install directly from the VS Code Marketplace:</p> <ol> <li>VS Code Extensions Panel \u2192 Search \"Tombo\"</li> <li>Command line: <code>code --install-extension benbenbang.tombo</code></li> <li>Marketplace: Visit VS Code Marketplace</li> </ol> <p>No additional setup required - Tombo works immediately with any Python project.</p>"},{"location":"troubleshooting/faq/#q-does-tombo-require-python-to-be-installed","title":"Q: Does Tombo require Python to be installed?","text":"<p>A: Yes, but only for environment detection. Tombo needs the Python extension to understand your project's Python version requirements, but the core functionality (PyPI integration, caching, completion) works independently.</p>"},{"location":"troubleshooting/faq/#q-can-i-use-tombo-offline","title":"Q: Can I use Tombo offline?","text":"<p>A: Partially! Tombo caches package information locally:</p> <ul> <li>\u2705 Cached packages - Full functionality offline</li> <li>\u2705 Previously explored versions - Available without internet</li> <li>\u274c New packages - Requires internet for first lookup</li> <li>\u274c Latest versions - May show stale data offline</li> </ul> <p>Tip: Warm your cache by hovering over dependencies before going offline.</p>"},{"location":"troubleshooting/faq/#file-format-support","title":"File Format Support","text":""},{"location":"troubleshooting/faq/#q-which-file-formats-does-tombo-support","title":"Q: Which file formats does Tombo support?","text":"<p>A: Tombo supports all major Python dependency formats:</p> <p>Fully Supported: - <code>pyproject.toml</code> (PEP 621 dependencies) - <code>pyproject.toml</code> (Poetry v1 format) - <code>requirements.txt</code> and variants (<code>requirements-*.txt</code>) - Any <code>.txt</code> file with pip requirement syntax</p> <p>Partially Supported: - Poetry v2 parentheses syntax (works but needs operator triggers)</p>"},{"location":"troubleshooting/faq/#q-why-doesnt-completion-work-in-my-project-pyprojecttoml-file","title":"Q: Why doesn't completion work in my <code>project-pyproject.toml</code> file?","text":"<p>A: File naming requirement - Tombo requires exact filename <code>pyproject.toml</code> (not variants like <code>*-pyproject.toml</code>). This ensures reliable format detection and prevents conflicts with other TOML files.</p> <p>Solution: Rename to exactly <code>pyproject.toml</code> or use a standard <code>requirements.txt</code>.</p>"},{"location":"troubleshooting/faq/#q-does-tombo-work-with-poetry","title":"Q: Does Tombo work with Poetry?","text":"<p>A: Excellent Poetry support! Tombo works perfectly with Poetry v1 format:</p> Perfect Poetry Support<pre><code>[tool.poetry.dependencies]\npython = \"^3.9\"\nrequests = \"^2.|\"           # \u2190 Completion works here\nclick = \"~8.1\"              # \u2190 And here\nfastapi = \"&gt;=0.|\"           # \u2190 And here\n</code></pre> <p>Note: Poetry v2 parentheses syntax <code>\"(&gt;=2.0,&lt;3.0)\"</code> works but completion triggers on operators (<code>&gt;=</code>, <code>&lt;</code>) rather than parentheses.</p>"},{"location":"troubleshooting/faq/#completion-behavior","title":"Completion Behavior","text":""},{"location":"troubleshooting/faq/#q-why-isnt-version-completion-triggering","title":"Q: Why isn't version completion triggering?","text":"<p>A: Common causes and solutions:</p> <p>1. Cursor Position <pre><code># \u2705 Correct - cursor immediately after operator\ndependencies = [\"requests&gt;=|\"]\n\n# \u274c Wrong - cursor with space\ndependencies = [\"requests&gt;= |\"]\n</code></pre></p> <p>2. File Recognition - Must be exactly <code>pyproject.toml</code> or <code>*requirements*.txt</code> - Check VS Code status bar shows correct file type</p> <p>3. Network Access - First completion for each package requires internet - Check VS Code Output Panel \u2192 \"Tombo\" for connection errors</p> <p>4. Package Name - Verify correct spelling and case sensitivity - Try with common packages like <code>requests</code> or <code>numpy</code></p>"},{"location":"troubleshooting/faq/#q-can-i-force-completion-to-appear","title":"Q: Can I force completion to appear?","text":"<p>A: Yes, several methods:</p> <ol> <li>Keyboard shortcut: <code>Ctrl+Space</code> (Windows/Linux) or <code>Cmd+Space</code> (macOS)</li> <li>Re-trigger: Delete and retype the operator (<code>&gt;=</code>)</li> <li>Alternative operators: Try <code>==</code> or <code>~=</code> if <code>&gt;=</code> doesn't work</li> <li>Manual refresh: Command Palette \u2192 \"Tombo: Refresh Package Versions\"</li> </ol>"},{"location":"troubleshooting/faq/#q-why-do-i-see-loading-for-a-long-time","title":"Q: Why do I see \"Loading...\" for a long time?","text":"<p>A: First-time package fetch takes 200-500ms. Long delays usually indicate:</p> <ol> <li>Slow network - Check internet connection speed</li> <li>Package doesn't exist - Verify spelling on PyPI</li> <li>Corporate firewall - May block PyPI access</li> <li>Large package - Some packages have extensive version history</li> </ol> <p>Solution: Enable debug logging to see detailed timing information.</p>"},{"location":"troubleshooting/faq/#caching-questions","title":"Caching Questions","text":""},{"location":"troubleshooting/faq/#q-how-does-tombos-caching-work","title":"Q: How does Tombo's caching work?","text":"<p>A: Three-tier caching system:</p> <ol> <li>Memory Cache (L1) - ~5-10ms, during VS Code session</li> <li>Disk Cache (L2) - ~10-20ms, persistent between sessions</li> <li>Network (L3) - ~200-500ms, fresh PyPI data</li> </ol> <p>Benefits: - 90% reduction in API calls - Works partially offline - Intelligent background refresh</p>"},{"location":"troubleshooting/faq/#q-how-do-i-clear-tombos-cache","title":"Q: How do I clear Tombo's cache?","text":"<p>A: Multiple methods:</p> <ol> <li>Command Palette \u2192 \"Tombo: Clear Cache\"</li> <li>Settings \u2192 Temporarily disable: <code>\"tombo.cacheEnabled\": false</code></li> <li>Restart VS Code \u2192 Clears memory cache (disk cache persists)</li> </ol> <p>When to clear cache: - Seeing stale version information - Completion behaving erratically - After network/proxy changes - Package information seems corrupted</p>"},{"location":"troubleshooting/faq/#q-why-is-my-cache-not-working","title":"Q: Why is my cache not working?","text":"<p>A: Cache troubleshooting:</p> <p>Check settings: Verify Cache Settings<pre><code>{\n    \"tombo.cacheTimeoutMinutes\": 10,    // Not too short\n    \"tombo.maxCacheSize\": 1000,         // Not too small\n    \"tombo.enableDebugLogging\": true    // See cache behavior\n}\n</code></pre></p> <p>Debug with logging: 1. Enable debug logging in settings 2. Open Output Panel \u2192 \"Tombo\" 3. Trigger completion and watch for \"Cache HIT/MISS\" messages 4. Look for cache storage confirmations</p>"},{"location":"troubleshooting/faq/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/faq/#q-tombo-is-slow-how-can-i-speed-it-up","title":"Q: Tombo is slow, how can I speed it up?","text":"<p>A: Performance optimization checklist:</p> <p>1. Optimize cache settings: Performance Settings<pre><code>{\n    \"tombo.cacheTimeoutMinutes\": 60,    // Longer cache\n    \"tombo.maxCacheSize\": 2000,         // More packages cached\n    \"tombo.requestTimeout\": 15000       // Tolerance for slow networks\n}\n</code></pre></p> <p>2. Network optimization: - Use wired internet when possible - Check corporate proxy settings - Consider increasing timeout values</p> <p>3. Pre-warm cache: - Hover over dependencies at start of session - Trigger completion for frequently used packages</p>"},{"location":"troubleshooting/faq/#q-tombo-uses-too-much-memory-what-should-i-do","title":"Q: Tombo uses too much memory, what should I do?","text":"<p>A: Memory optimization:</p> Low Memory Settings<pre><code>{\n    \"tombo.maxCacheSize\": 500,          // Smaller cache\n    \"tombo.cacheTimeoutMinutes\": 15,    // Shorter retention\n    \"tombo.enableDebugLogging\": false   // Reduce logging overhead\n}\n</code></pre> <p>Additional steps: 1. Restart VS Code - Clear accumulated cache 2. Close unused files - Reduce overall memory usage 3. Check system resources - Ensure sufficient RAM available</p>"},{"location":"troubleshooting/faq/#error-messages","title":"Error Messages","text":""},{"location":"troubleshooting/faq/#q-i-see-package-not-found-but-the-package-exists-on-pypi","title":"Q: I see \"Package not found\" but the package exists on PyPI","text":"<p>A: Common causes:</p> <ol> <li>Typo in package name - Check spelling carefully</li> <li>Case sensitivity - PyPI packages are case-sensitive</li> <li>Network/proxy issues - Check corporate firewall settings</li> <li>Package very new - Cache might not reflect recent publications</li> </ol> <p>Solutions: 1. Verify on PyPI - Visit pypi.org directly to confirm package exists 2. Clear cache - Force fresh lookup from PyPI 3. Check network - Test with known packages like <code>requests</code> 4. Enable debug logging - See detailed error information</p>"},{"location":"troubleshooting/faq/#q-what-does-request-timeout-mean","title":"Q: What does \"Request timeout\" mean?","text":"<p>A: Network request took too long (default: 10 seconds)</p> <p>Solutions: Timeout Settings<pre><code>{\n    \"tombo.requestTimeout\": 20000,      // Increase to 20 seconds\n    \"tombo.retryAttempts\": 1            // Reduce retries to fail faster\n}\n</code></pre></p> <p>When to adjust: - Slow or unreliable internet connection - Corporate network with proxy delays - Working from locations with high network latency</p>"},{"location":"troubleshooting/faq/#integration-questions","title":"Integration Questions","text":""},{"location":"troubleshooting/faq/#q-does-tombo-conflict-with-other-extensions","title":"Q: Does Tombo conflict with other extensions?","text":"<p>A: Generally no, but some known interactions:</p> <p>TOML Extensions: - Extensions like \"Even Better TOML\" may interfere with completion - Solution: Temporarily disable other TOML extensions to test - Alternative: Use different trigger characters if conflicts occur</p> <p>Python Extensions: - Works excellently with official Python extension - Shares Python environment detection - No known conflicts with IntelliSense</p>"},{"location":"troubleshooting/faq/#q-can-i-use-tombo-with-docker","title":"Q: Can I use Tombo with Docker?","text":"<p>A: Yes! Tombo works great with containerized development:</p> <p>Inside containers: - Install Tombo in your development container - Cache persists in container volumes - Works with remote development extensions</p> <p>Host development: - Develop on host, deploy to containers - Use Tombo to research versions before container builds - Cache benefits development speed</p>"},{"location":"troubleshooting/faq/#q-does-tombo-work-with-cicd","title":"Q: Does Tombo work with CI/CD?","text":"<p>A: Tombo is a development tool - it doesn't run in CI/CD pipelines. However:</p> <p>Development benefits: - Research appropriate versions before committing - Verify compatibility requirements before deployment - Use hover info to understand dependency implications</p> <p>CI/CD compatibility: - Tombo-selected versions work perfectly in automated environments - No special CI configuration needed - Standard pip/Poetry installation commands work unchanged</p>"},{"location":"troubleshooting/faq/#privacy-security","title":"Privacy &amp; Security","text":""},{"location":"troubleshooting/faq/#q-what-data-does-tombo-collect","title":"Q: What data does Tombo collect?","text":"<p>A: Tombo is privacy-focused:</p> <p>Data sent to PyPI: - Package names you look up (standard PyPI API usage) - No personal information, file contents, or project details</p> <p>Data stored locally: - Package metadata cache (versions, descriptions) - Your VS Code settings for Tombo - No user tracking or analytics</p> <p>Data NOT collected: - Your code or file contents - Personal information - Usage analytics - Project structure or dependencies</p>"},{"location":"troubleshooting/faq/#q-is-tombo-safe-for-corporateconfidential-projects","title":"Q: Is Tombo safe for corporate/confidential projects?","text":"<p>A: Yes, Tombo is corporate-friendly:</p> <p>Security features: - Only queries public PyPI data - Never sends your code or file contents - Works offline after initial cache - No telemetry or user tracking</p> <p>Corporate considerations: - Check firewall allows PyPI access - Consider using corporate PyPI mirror - Cache works well in restricted environments - No external dependencies beyond PyPI API</p>"},{"location":"troubleshooting/faq/#advanced-usage","title":"Advanced Usage","text":""},{"location":"troubleshooting/faq/#q-can-i-customize-tombos-behavior","title":"Q: Can I customize Tombo's behavior?","text":"<p>A: Extensive customization available:</p> <p>Visual customization: UI Customization<pre><code>{\n    \"tombo.compatibleDecorator\": \"\u2705\",      // Custom compatible symbol\n    \"tombo.incompatibleDecorator\": \"\u274c\",    // Custom warning symbol\n    \"tombo.showNotifications\": \"onError\",   // When to show notifications\n}\n</code></pre></p> <p>Functional customization: Behavior Customization<pre><code>{\n    \"tombo.listPreReleases\": true,          // Include alpha/beta versions\n    \"tombo.pypiIndexUrl\": \"https://...\",    // Custom PyPI server\n    \"tombo.requestTimeout\": 15000,          // Custom timeout\n}\n</code></pre></p>"},{"location":"troubleshooting/faq/#q-can-i-contribute-to-tombo","title":"Q: Can I contribute to Tombo?","text":"<p>A: Absolutely! Tombo welcomes contributions:</p> <p>Ways to contribute: - Report bugs - GitHub issues with detailed reproduction steps - Suggest features - Ideas for improvements or new functionality - Documentation - Help improve guides and examples - Code contributions - Pull requests for features or fixes</p> <p>Getting started: 1. Visit GitHub repository 2. Read contributing guidelines 3. Check existing issues for good first contributions 4. Join discussions about future features</p>"},{"location":"troubleshooting/faq/#still-need-help","title":"Still Need Help?","text":""},{"location":"troubleshooting/faq/#getting-support","title":"Getting Support","text":"<p>1. Check Documentation: - Installation Guide - Configuration Reference - Common Issues</p> <p>2. Debug Information: - Enable debug logging: <code>\"tombo.enableDebugLogging\": true</code> - Check Output Panel \u2192 \"Tombo\" - Note exact error messages and reproduction steps</p> <p>3. Community Support: - GitHub Issues - Search existing issues for similar problems - Provide detailed reproduction information when reporting new issues</p> <p>4. Quick Verification: - Try with a simple <code>requirements.txt</code> and common package like <code>requests&gt;=</code> - Test in a new VS Code window with minimal extensions - Verify network connectivity to pypi.org</p>"},{"location":"troubleshooting/faq/#useful-diagnostic-commands","title":"Useful Diagnostic Commands","text":"<pre><code># Test PyPI connectivity\ncurl -s https://pypi.org/pypi/requests/json | head\n\n# Check VS Code extension status\ncode --list-extensions | grep tombo\n\n# Verify file associations\n# File \u2192 Preferences \u2192 Settings \u2192 search \"file associations\"\n</code></pre> <p>Still experiencing issues? Please report them on GitHub with: - VS Code version - Tombo version - File format you're using - Exact error message - Steps to reproduce - Debug log output (if possible)</p>"},{"location":"troubleshooting/performance/","title":"Performance Optimization","text":"<p>Maximize Tombo's speed and efficiency with these performance optimization techniques. Learn how to configure caching, optimize network usage, and troubleshoot performance issues.</p>"},{"location":"troubleshooting/performance/#performance-overview","title":"Performance Overview","text":""},{"location":"troubleshooting/performance/#tombo-performance-characteristics","title":"Tombo Performance Characteristics","text":"<p>Typical Response Times: - First package lookup: 200-500ms (network fetch + cache) - Cached packages: 5-10ms (memory cache) - Disk-cached packages: 10-20ms (persistent cache) - Background refresh: 0ms impact (silent update)</p> <p>Cache Hit Rates: - Memory cache: 85-95% for active development - Disk cache: 95-99% for repeated sessions - Combined efficiency: 90% reduction in API calls</p>"},{"location":"troubleshooting/performance/#smart-caching-configuration","title":"Smart Caching Configuration","text":""},{"location":"troubleshooting/performance/#memory-cache-optimization","title":"Memory Cache Optimization","text":"<p>Default Settings: VS Code Settings - Default<pre><code>{\n    \"tombo.cacheTimeoutMinutes\": 10,    // 10-minute TTL\n    \"tombo.maxCacheSize\": 1000,         // 1000 packages in memory\n    \"tombo.requestTimeout\": 10000       // 10-second timeout\n}\n</code></pre></p> <p>High Performance Setup: VS Code Settings - Performance Optimized<pre><code>{\n    \"tombo.cacheTimeoutMinutes\": 60,    // Longer cache for stability\n    \"tombo.maxCacheSize\": 2000,         // More packages for large projects\n    \"tombo.requestTimeout\": 15000,      // Tolerance for slower networks\n    \"tombo.retryAttempts\": 2,           // Fewer retries for speed\n    \"tombo.showNotifications\": \"never\"  // Reduce UI overhead\n}\n</code></pre></p> <p>Memory-Constrained Setup: VS Code Settings - Low Memory<pre><code>{\n    \"tombo.cacheTimeoutMinutes\": 30,    // Reasonable cache duration\n    \"tombo.maxCacheSize\": 500,          // Smaller memory footprint\n    \"tombo.requestTimeout\": 8000,       // Faster timeouts\n    \"tombo.enableDebugLogging\": false   // Minimal logging overhead\n}\n</code></pre></p>"},{"location":"troubleshooting/performance/#cache-strategy-by-project-size","title":"Cache Strategy by Project Size","text":"<p>Small Projects (&lt; 50 dependencies): Small Project Settings<pre><code>{\n    \"tombo.cacheTimeoutMinutes\": 10,    // Fresh data\n    \"tombo.maxCacheSize\": 500,          // Adequate size\n    \"tombo.requestTimeout\": 8000        // Quick responses\n}\n</code></pre></p> <p>Medium Projects (50-200 dependencies): Medium Project Settings<pre><code>{\n    \"tombo.cacheTimeoutMinutes\": 30,    // Balanced freshness\n    \"tombo.maxCacheSize\": 1000,         // Standard size\n    \"tombo.requestTimeout\": 10000       // Default timeout\n}\n</code></pre></p> <p>Large Projects/Monorepos (200+ dependencies): Large Project Settings<pre><code>{\n    \"tombo.cacheTimeoutMinutes\": 60,    // Longer cache for stability\n    \"tombo.maxCacheSize\": 3000,         // Large cache pool\n    \"tombo.requestTimeout\": 15000,      // Patience for large requests\n    \"tombo.retryAttempts\": 3            // Reliability for critical workflows\n}\n</code></pre></p>"},{"location":"troubleshooting/performance/#network-optimization","title":"Network Optimization","text":""},{"location":"troubleshooting/performance/#connection-management","title":"Connection Management","text":"<p>Efficient Network Usage: - Connection pooling - Reuses HTTP connections - Request batching - Multiple packages per API call when possible - Compression - Gzip/deflate for data transfer - Rate limiting - Respectful PyPI API usage</p> <p>Network-Conscious Settings: Slow Network Optimization<pre><code>{\n    \"tombo.requestTimeout\": 30000,      // 30-second timeout\n    \"tombo.retryAttempts\": 1,           // Avoid retry delays\n    \"tombo.cacheTimeoutMinutes\": 120,   // Long cache to reduce requests\n    \"tombo.maxCacheSize\": 2000          // Large cache for offline capability\n}\n</code></pre></p>"},{"location":"troubleshooting/performance/#offline-performance","title":"Offline Performance","text":"<p>Offline-Ready Configuration: Offline-Optimized Settings<pre><code>{\n    \"tombo.cacheTimeoutMinutes\": 1440,  // 24-hour cache\n    \"tombo.maxCacheSize\": 5000,         // Large cache for self-sufficiency\n    \"tombo.requestTimeout\": 5000,       // Quick failure for offline detection\n    \"tombo.retryAttempts\": 1            // Don't retry when offline\n}\n</code></pre></p> <p>Cache Warming Strategy: 1. Pre-session warm-up - Hover over key dependencies 2. Batch completion - Trigger version completion for multiple packages 3. Documentation prefetch - Visit package links while online 4. Dependency chains - Cache related packages together</p>"},{"location":"troubleshooting/performance/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"troubleshooting/performance/#cache-statistics","title":"Cache Statistics","text":"<p>Accessing Performance Data: 1. Command Palette \u2192 \"Tombo: Cache Statistics\" 2. Output Panel \u2192 Select \"Tombo\" (with debug logging enabled) 3. Hover behavior \u2192 Notice response time differences</p> <p>Performance Metrics to Watch: <pre><code>\ud83d\udcca Tombo Performance Metrics\n\nCache Efficiency:\n\u2022 Memory Hit Rate: 94.2% (excellent)\n\u2022 Disk Hit Rate: 98.7% (outstanding)\n\u2022 Network Requests Saved: 1,847 (94.2% reduction)\n\nResponse Times:\n\u2022 Average Memory Cache: 6ms\n\u2022 Average Disk Cache: 12ms\n\u2022 Average Network Fetch: 287ms\n\nCache Usage:\n\u2022 Memory: 847/1000 packages (84.7%)\n\u2022 Disk Size: 45.2MB\n\u2022 Bandwidth Saved: ~12.4MB this session\n</code></pre></p>"},{"location":"troubleshooting/performance/#debug-logging","title":"Debug Logging","text":"<p>Enable Detailed Performance Logging: Debug Settings<pre><code>{\n    \"tombo.enableDebugLogging\": true\n}\n</code></pre></p> <p>Performance Log Examples: <pre><code>[Tombo] Cache HIT: numpy (6ms from memory)\n[Tombo] Cache MISS: scipy (fetching from PyPI...)\n[Tombo] Network fetch: scipy completed in 234ms\n[Tombo] Cache STORE: scipy (now available for instant access)\n[Tombo] Background refresh: requests (updating stale cache)\n</code></pre></p>"},{"location":"troubleshooting/performance/#common-performance-issues","title":"Common Performance Issues","text":""},{"location":"troubleshooting/performance/#slow-completion-response","title":"Slow Completion Response","text":"<p>Symptoms: - Completion dropdown takes &gt; 2 seconds to appear - First-time package lookup very slow - Frequent timeouts</p> <p>Diagnostics: 1. Check network speed - Test with fast.com or similar 2. Enable debug logging - Monitor cache hit/miss patterns 3. Test with different packages - Isolate package-specific issues 4. Monitor system resources - CPU/memory usage during completion</p> <p>Solutions:</p> <p>Network Issues: Slow Network Fixes<pre><code>{\n    \"tombo.requestTimeout\": 20000,      // Longer timeout\n    \"tombo.retryAttempts\": 1,           // Reduce retry delays\n    \"tombo.cacheTimeoutMinutes\": 120    // Longer cache duration\n}\n</code></pre></p> <p>Cache Issues: <pre><code># Clear potentially corrupted cache\n# Command Palette \u2192 \"Tombo: Clear Cache\"\n</code></pre></p> <p>System Resource Issues: Resource-Conscious Settings<pre><code>{\n    \"tombo.maxCacheSize\": 500,          // Reduce memory usage\n    \"tombo.enableDebugLogging\": false,  // Reduce logging overhead\n    \"tombo.showNotifications\": \"never\"  // Minimize UI updates\n}\n</code></pre></p>"},{"location":"troubleshooting/performance/#high-memory-usage","title":"High Memory Usage","text":"<p>Symptoms: - VS Code becomes sluggish during completion - System memory usage increases significantly - Cache grows without bounds</p> <p>Memory Optimization:</p> <p>Immediate Fixes: Memory Optimization<pre><code>{\n    \"tombo.maxCacheSize\": 500,          // Reduce cache size\n    \"tombo.cacheTimeoutMinutes\": 15,    // Shorter retention\n}\n</code></pre></p> <p>Advanced Memory Management: Advanced Memory Settings<pre><code>{\n    \"tombo.maxCacheSize\": 300,          // Very conservative size\n    \"tombo.cacheTimeoutMinutes\": 5,     // Aggressive cleanup\n    \"tombo.requestTimeout\": 8000,       // Quick operations only\n}\n</code></pre></p> <p>Monitoring Memory Usage: 1. VS Code Task Manager - Help \u2192 Open Process Explorer 2. System Monitor - Watch Python/Node.js processes 3. Tombo Statistics - Check cache utilization</p>"},{"location":"troubleshooting/performance/#frequent-cache-misses","title":"Frequent Cache Misses","text":"<p>Symptoms: - Debug log shows many \"Cache MISS\" entries - Slow response times despite caching enabled - High network usage</p> <p>Root Causes &amp; Solutions:</p> <p>Cache Size Too Small: Increase Cache Size<pre><code>{\n    \"tombo.maxCacheSize\": 2000,         // Double default size\n    \"tombo.cacheTimeoutMinutes\": 30     // Reasonable retention\n}\n</code></pre></p> <p>Aggressive TTL: Extend Cache Duration<pre><code>{\n    \"tombo.cacheTimeoutMinutes\": 60,    // Longer retention\n    \"tombo.maxCacheSize\": 1500          // Accommodate longer retention\n}\n</code></pre></p> <p>Development Pattern Issues: - Problem: Constantly switching between many different packages - Solution: Focus on core dependencies first, then explore alternatives</p>"},{"location":"troubleshooting/performance/#environment-specific-optimization","title":"Environment-Specific Optimization","text":""},{"location":"troubleshooting/performance/#corporateenterprise-networks","title":"Corporate/Enterprise Networks","text":"<p>Network Constraints: Corporate Network Settings<pre><code>{\n    \"tombo.pypiIndexUrl\": \"https://your-corporate-pypi.com/simple/\",\n    \"tombo.requestTimeout\": 45000,      // Corporate proxy delays\n    \"tombo.retryAttempts\": 3,           // Network reliability issues\n    \"tombo.cacheTimeoutMinutes\": 240,   // Reduce external requests\n    \"tombo.maxCacheSize\": 3000          // Large cache for limited connectivity\n}\n</code></pre></p> <p>Proxy Configuration: - Configure VS Code proxy settings - Ensure PyPI access through corporate firewall - Consider internal PyPI mirrors for better performance</p>"},{"location":"troubleshooting/performance/#remote-development","title":"Remote Development","text":"<p>SSH/Remote Performance: Remote Development Settings<pre><code>{\n    \"tombo.cacheTimeoutMinutes\": 60,    // Reduce remote requests\n    \"tombo.maxCacheSize\": 2000,         // Larger cache for remote efficiency\n    \"tombo.requestTimeout\": 25000,      // Network latency tolerance\n    \"tombo.enableDebugLogging\": false,  // Reduce remote logging overhead\n}\n</code></pre></p>"},{"location":"troubleshooting/performance/#cicd-environments","title":"CI/CD Environments","text":"<p>Automated Environment Settings: CI/CD Settings<pre><code>{\n    \"tombo.cacheTimeoutMinutes\": 1440,  // 24-hour cache for build consistency\n    \"tombo.maxCacheSize\": 5000,         // Large cache for comprehensive projects\n    \"tombo.requestTimeout\": 10000,      // Quick failures in automated environments\n    \"tombo.retryAttempts\": 1,           // No retries in CI\n    \"tombo.showNotifications\": \"never\", // Silent operation\n    \"tombo.enableDebugLogging\": false   // Minimal logging overhead\n}\n</code></pre></p>"},{"location":"troubleshooting/performance/#advanced-performance-techniques","title":"Advanced Performance Techniques","text":""},{"location":"troubleshooting/performance/#cache-warming-strategies","title":"Cache Warming Strategies","text":"<p>Project Initialization: <pre><code># Pre-warm cache with project dependencies\n# 1. Open pyproject.toml or requirements.txt\n# 2. Hover over each dependency to cache metadata\n# 3. Trigger completion (Ctrl+Space) on key packages\n# 4. Access documentation links for important packages\n</code></pre></p> <p>Automated Cache Warming: scripts/warm_cache.py<pre><code>\"\"\"\nScript to pre-warm Tombo cache by programmatically accessing packages.\nRun before offline development sessions.\n\"\"\"\nimport subprocess\nimport tomllib\n\ndef warm_cache():\n    # Load project dependencies\n    with open(\"pyproject.toml\", \"rb\") as f:\n        data = tomllib.load(f)\n\n    dependencies = data.get(\"project\", {}).get(\"dependencies\", [])\n\n    print(\"\ud83d\udce6 Warming Tombo cache...\")\n    print(\"\ud83d\udca1 Open VS Code and hover over these packages:\")\n\n    for dep in dependencies:\n        package_name = dep.split(\"&gt;=\")[0].split(\"==\")[0].split(\"~=\")[0].strip()\n        print(f\"   - {package_name}\")\n\n    print(\"\\n\u2705 Cache warming complete!\")\n\nif __name__ == \"__main__\":\n    warm_cache()\n</code></pre></p>"},{"location":"troubleshooting/performance/#selective-package-management","title":"Selective Package Management","text":"<p>High-Priority Packages: Focus optimization on frequently used packages: - Web frameworks: Django, FastAPI, Flask - Data science: NumPy, Pandas, Scikit-learn - Testing: Pytest, Coverage, Factory-boy - Development: Black, isort, mypy</p> <p>Optimization Strategy: 1. Cache these first - Warm cache with high-priority packages 2. Longer retention - Increase TTL for critical dependencies 3. Pre-fetch versions - Trigger completion for version exploration 4. Monitor usage - Track which packages are accessed most</p>"},{"location":"troubleshooting/performance/#batch-operations","title":"Batch Operations","text":"<p>Efficient Workflow Patterns:</p> <p>Package Research Session: 1. Batch hover - Research multiple packages in sequence 2. Document findings - Take notes on version compatibilities 3. Plan updates - Group related updates together 4. Execute changes - Make multiple updates in single session</p> <p>Version Exploration: 1. Open completion - Trigger for multiple packages 2. Compare options - Research version differences simultaneously 3. Make decisions - Choose versions for multiple packages together 4. Apply updates - Batch dependency changes</p>"},{"location":"troubleshooting/performance/#performance-best-practices","title":"Performance Best Practices","text":""},{"location":"troubleshooting/performance/#daily-usage","title":"Daily Usage","text":"<ol> <li>Start sessions by warming cache - Hover over key dependencies</li> <li>Use completion actively - Don't type version numbers manually</li> <li>Enable appropriate caching - Match settings to your project size</li> <li>Monitor performance - Check cache statistics periodically</li> <li>Clean up when needed - Clear cache if behavior becomes erratic</li> </ol>"},{"location":"troubleshooting/performance/#system-optimization","title":"System Optimization","text":"<ol> <li>Allocate sufficient memory - Ensure VS Code has adequate RAM</li> <li>Use fast storage - SSD improves disk cache performance</li> <li>Maintain network quality - Stable internet for initial fetches</li> <li>Update regularly - Keep Tombo extension current</li> <li>Configure thoughtfully - Match settings to your workflow</li> </ol>"},{"location":"troubleshooting/performance/#team-performance","title":"Team Performance","text":"<ol> <li>Share cache strategies - Document team-wide cache settings</li> <li>Coordinate updates - Batch dependency research sessions</li> <li>Monitor team usage - Track common performance issues</li> <li>Document findings - Share package research results</li> <li>Optimize collectively - Use consistent performance settings</li> </ol> <p>Ready to optimize your Tombo performance?</p> <ul> <li>Smart Caching \u2192 - Deep dive into caching strategies</li> <li>Configuration \u2192 - Complete settings reference</li> <li>FAQ \u2192 - Common questions and solutions</li> </ul>"}]}