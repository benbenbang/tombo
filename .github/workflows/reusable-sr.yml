name: release

on:
  workflow_call:
    inputs:
      semantic_release_image_tag:
        description: 'semantic release image version tag (vx.x.x - default: latest)'
        default: latest
        required: false
        type: string
      semantic_release_config_file:
        description: 'semantic release config file path (default: .releaserc.json)'
        required: false
        type: string
        default: .releaserc.json
      new_version_title:
        description: 'title of the new version'
        required: false
        type: string
        default: ''
      dry_run:
        description: 'run semantic release in dry-run mode'
        default: false
        required: false
        type: boolean
      environment:
        type: string
        description: environment to deploy to
        required: false
        default: ''
      history_depth:
        description: '0 means fetch the full history'
        required: false
        default: 0
        type: number
    outputs:
      new_release:
        description: 'the new release version created by semantic release'
        value: ${{ jobs.semantic-release.outputs.new_release }}
      new_release_tag:
        description: 'the new release tag created by semantic release'
        value: ${{ jobs.semantic-release.outputs.new_release_tag }}

jobs:
  semantic-release:
    name: creating semantic release
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/benbenbang/semantic-release:${{ inputs.semantic_release_image_tag }}
    outputs:
      new_release: ${{ steps.get-next-version.outputs.new-release-published }}
      new_release_version: ${{ steps.get-next-version.outputs.new-release-version }}
      new_release_tag: ${{ steps.get-next-version.outputs.new-release-git-tag }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.history_depth }}
          persist-credentials: false # https://github.com/semantic-release/semantic-release/blob/v19.0.5/docs/recipes/ci-configurations/github-actions.md#pushing-packagejson-changes-to-a-master-branch
      - name: generate a token # https://github.com/semantic-release/semantic-release/discussions/1906
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.TECHNICAL_APP_APP_ID  }}
          private-key: ${{ secrets.TECHNICAL_APP_PEM }}
      - name: configure Git with token # Use generated token for git authentication
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git config --global credential.helper store
          echo "https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com" > ~/.git-credentials
      - name: create release
        id: get-next-version
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          jq '.plugins += ["semantic-release-export-data"]' "$GITHUB_WORKSPACE/.releaserc.json" > temp.json && mv temp.json "$GITHUB_WORKSPACE/.releaserc.json"
          semantic-release --debug ${{ inputs.dry_run && '--dry-run' || '' }}
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
      - name: process release output
        id: process-release-output
        run: |
          if [ "${{ steps.get-next-version.outputs.new-release-published }}" == "true" ]; then
            echo "new_release=${{ steps.get-next-version.outputs.new-release-version }}" >> $GITHUB_OUTPUT
            echo "new_release_tag=${{ steps.get-next-version.outputs.new-release-git-tag }}" >> $GITHUB_OUTPUT
            echo "new_release_version=${{ steps.get-next-version.outputs.new-release-version }}" >> $GITHUB_OUTPUT
            echo "new release ${{ steps.get-next-version.outputs.new-release-version }} (tag: ${{ steps.get-next-version.outputs.new-release-git-tag }})"
          else
            echo "new_release=" >> $GITHUB_OUTPUT
            echo "new_release_tag=" >> $GITHUB_OUTPUT
            echo "No new release was published"
          fi
      - name: print release information
        run: |
          echo "new release version: ${{ steps.get-next-version.outputs.new-release-version }}"
          echo "new release tag: ${{ steps.get-next-version.outputs.new-release-git-tag }}"
          echo "new release published: ${{ steps.get-next-version.outputs.new-release-published }}"

  update-release-title:
    name: update release title
    runs-on: ubuntu-latest
    needs: semantic-release
    if: ${{ needs.semantic-release.outputs.new_release == 'true' && inputs.new_version_title != '' && inputs.dry_run == false }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # to ensure we can edit the release title
          persist-credentials: false #
      - name: generate a token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.TECHNICAL_APP_APP_ID  }}
          private-key: ${{ secrets.TECHNICAL_APP_PEM }}
      - name: update release title
        id: update-release-title
        run: |
          echo "Updating release title for tag: ${{ needs.semantic-release.outputs.new_release_tag }}"
          gh release edit ${{ needs.semantic-release.outputs.new_release_tag }} \
            --title "${{ inputs.new_version_title }} ${{ needs.semantic-release.outputs.new_release_tag }}" \
            --repo ${{ github.repository }} \
            --latest
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
